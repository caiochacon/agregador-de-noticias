{"ast":null,"code":"'use strict';\n\nvar callBind = require('call-bind');\n\nvar callBound = require('call-bind/callBound');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $ArrayBuffer = GetIntrinsic('%ArrayBuffer%', true);\n/** @type {undefined | ((receiver: ArrayBuffer) => number) | ((receiver: unknown) => never)} */\n\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);\nvar $toString = callBound('Object.prototype.toString'); // in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\n\nvar abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;\nvar $abSlice = !!abSlice && callBind(abSlice);\n/** @type {import('.')} */\n\nmodule.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  try {\n    if ($byteLength) {\n      // @ts-expect-error no idea why TS can't handle the overload\n      $byteLength(obj);\n    } else {\n      // @ts-expect-error TS chooses not to type-narrow inside a closure\n      $abSlice(obj, 0);\n    }\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n} : $ArrayBuffer // in node 0.8, ArrayBuffers have no prototype or own methods, but also no Symbol.toStringTag\n? function isArrayBuffer(obj) {\n  return $toString(obj) === '[object ArrayBuffer]';\n} : function isArrayBuffer(obj) {\n  // eslint-disable-line no-unused-vars\n  return false;\n};","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/node_modules/is-array-buffer/index.js"],"names":["callBind","require","callBound","GetIntrinsic","$ArrayBuffer","$byteLength","$toString","abSlice","slice","$abSlice","module","exports","isArrayBuffer","obj","e"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIG,YAAY,GAAGD,YAAY,CAAC,eAAD,EAAkB,IAAlB,CAA/B;AACA;;AACA,IAAIE,WAAW,GAAGH,SAAS,CAAC,kCAAD,EAAqC,IAArC,CAA3B;AACA,IAAII,SAAS,GAAGJ,SAAS,CAAC,2BAAD,CAAzB,C,CAEA;;AACA,IAAIK,OAAO,GAAG,CAAC,CAACH,YAAF,IAAkB,CAACC,WAAnB,IAAkC,IAAID,YAAJ,CAAiB,CAAjB,EAAoBI,KAApE;AACA,IAAIC,QAAQ,GAAG,CAAC,CAACF,OAAF,IAAaP,QAAQ,CAACO,OAAD,CAApC;AAEA;;AACAG,MAAM,CAACC,OAAP,GAAiBN,WAAW,IAAII,QAAf,GACd,SAASG,aAAT,CAAuBC,GAAvB,EAA4B;AAC7B,MAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACpC,WAAO,KAAP;AACA;;AACD,MAAI;AACH,QAAIR,WAAJ,EAAiB;AAChB;AACAA,MAAAA,WAAW,CAACQ,GAAD,CAAX;AACA,KAHD,MAGO;AACN;AACAJ,MAAAA,QAAQ,CAACI,GAAD,EAAM,CAAN,CAAR;AACA;;AACD,WAAO,IAAP;AACA,GATD,CASE,OAAOC,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,CAjBe,GAkBdV,YAAY,CACb;AADa,EAEX,SAASQ,aAAT,CAAuBC,GAAvB,EAA4B;AAC7B,SAAOP,SAAS,CAACO,GAAD,CAAT,KAAmB,sBAA1B;AACA,CAJY,GAKX,SAASD,aAAT,CAAuBC,GAAvB,EAA4B;AAAE;AAC/B,SAAO,KAAP;AACA,CAzBH","sourcesContent":["'use strict';\n\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $ArrayBuffer = GetIntrinsic('%ArrayBuffer%', true);\n/** @type {undefined | ((receiver: ArrayBuffer) => number) | ((receiver: unknown) => never)} */\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);\nvar $toString = callBound('Object.prototype.toString');\n\n// in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\nvar abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;\nvar $abSlice = !!abSlice && callBind(abSlice);\n\n/** @type {import('.')} */\nmodule.exports = $byteLength || $abSlice\n\t? function isArrayBuffer(obj) {\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tif ($byteLength) {\n\t\t\t\t// @ts-expect-error no idea why TS can't handle the overload\n\t\t\t\t$byteLength(obj);\n\t\t\t} else {\n\t\t\t\t// @ts-expect-error TS chooses not to type-narrow inside a closure\n\t\t\t\t$abSlice(obj, 0);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t: $ArrayBuffer\n\t\t// in node 0.8, ArrayBuffers have no prototype or own methods, but also no Symbol.toStringTag\n\t\t? function isArrayBuffer(obj) {\n\t\t\treturn $toString(obj) === '[object ArrayBuffer]';\n\t\t}\n\t\t: function isArrayBuffer(obj) { // eslint-disable-line no-unused-vars\n\t\t\treturn false;\n\t\t};\n"]},"metadata":{},"sourceType":"script"}