{"ast":null,"code":"var _jsxFileName = \"C:\\\\aria\\\\cicc-app\\\\front-end\\\\src\\\\context\\\\AuditorsContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport USER_ID_ENUM from 'common/enumerators/UserIdEnum';\nimport { createQueryHttpRequestBody } from 'axios/AxiosUtils';\nimport { LoginContext } from 'context/LoginContext';\nimport { isEmpty } from \"common/utils/collections\";\nimport { isLoggedIn } from \"common/SessionUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuditorsContext = /*#__PURE__*/React.createContext();\nexport function AuditorsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [auditorsData, setAuditorsData] = React.useState({});\n  const [auditorsDataMap, setAuditorsDataMap] = React.useState({});\n  const {\n    setIsAuditorsDataReadyState\n  } = React.useContext(LoginContext);\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n  React.useEffect(() => {\n    if (isLoggedIn()) {\n      if (isEmpty(auditorsData)) {\n        getAuditorsData();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const getAuditorName = function (id) {\n    let idType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USER_ID_ENUM.USER_LOGIN;\n    var auditorData = getAuditorRegistry(id, idType);\n\n    if (auditorData && auditorData['user_name']) {\n      return auditorData['user_name'];\n    } else {\n      console.log(\"ERROR:\", \"USER NOT REGISTERED\", id);\n      return id;\n    }\n  };\n\n  const getAuditorRegistry = (id, idType) => {\n    if (!id) return {};\n\n    if (!auditorsData || Object.keys(auditorsData).length === 0) {\n      getAuditorsData();\n    }\n\n    return auditorsDataMap[idType + id.toString().toUpperCase()];\n  };\n\n  const getGroupMembers = id => {\n    let data = getGroups(id, false);\n    var groups = [];\n\n    if (data) {\n      for (var i = 0; i++; i < data.length) {\n        groups.push(data[i]['user_id']);\n      }\n    }\n\n    return groups;\n  };\n\n  const getGroups = function (id) {\n    let fetchByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let column = fetchByUser ? \"user_id\" : \"group_id\";\n    let filters = [{\n      \"column\": column,\n      \"value\": id,\n      \"filter_type\": \"equal\",\n      \"column_type\": \"int\"\n    }];\n    let httpRequestBody = createQueryHttpRequestBody(filters);\n    axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/group/read_group_members\"), httpRequestBody).then(res => {\n      return res.data[0];\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getAuditorsData = async function () {\n    let notifyJobDone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let filters = [];\n    let orderBy = {\n      \"column\": \"user_name\",\n      \"direction\": \"asc\"\n    };\n    let httpHeader = createQueryHttpRequestBody(filters, orderBy);\n    await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/auditor/read_all\"), httpHeader).then(res => {\n      let auditorsMap = {};\n\n      if (res.data) {\n        Object.keys(res.data).forEach(key => {\n          auditorsMap[USER_ID_ENUM.USER_LOGIN + res.data[key]['user_login'].toString().toUpperCase()] = res.data[key];\n          auditorsMap[USER_ID_ENUM.USER_ID + res.data[key]['user_id'].toString().toUpperCase()] = res.data[key];\n          auditorsMap[USER_ID_ENUM.USER_REGISTRATION_ID + res.data[key]['user_registration_id'].toString().toUpperCase()] = res.data[key];\n          auditorsMap[USER_ID_ENUM.USER_NAME + res.data[key]['user_name'].toString().toUpperCase()] = res.data[key];\n        });\n      }\n\n      setAuditorsData(res.data);\n      setAuditorsDataMap(auditorsMap);\n\n      if (notifyJobDone) {\n        //toggleAuditorsDataReady()\n        setIsAuditorsDataReadyState(() => true);\n      }\n\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuditorsContext.Provider, {\n    value: {\n      auditorsData,\n      getAuditorsData,\n      setAuditorsData,\n      getAuditorRegistry,\n      getAuditorName,\n      getGroupMembers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuditorsProvider, \"lXdiv7F0LXtpN84iNN6MkasqlQs=\");\n\n_c = AuditorsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuditorsProvider\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/context/AuditorsContext.js"],"names":["React","axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","USER_ID_ENUM","createQueryHttpRequestBody","LoginContext","isEmpty","isLoggedIn","AuditorsContext","createContext","AuditorsProvider","children","auditorsData","setAuditorsData","useState","auditorsDataMap","setAuditorsDataMap","setIsAuditorsDataReadyState","useContext","axiosRetryProxy","create","useEffect","getAuditorsData","getAuditorName","id","idType","USER_LOGIN","auditorData","getAuditorRegistry","console","log","Object","keys","length","toString","toUpperCase","getGroupMembers","data","getGroups","groups","i","push","fetchByUser","column","filters","httpRequestBody","post","apiAddress","then","res","catch","err","notifyJobDone","orderBy","httpHeader","auditorsMap","forEach","key","USER_ID","USER_REGISTRATION_ID","USER_NAME"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment'\r\nimport USER_ID_ENUM from 'common/enumerators/UserIdEnum'\r\nimport {createQueryHttpRequestBody} from 'axios/AxiosUtils'\r\nimport {LoginContext} from 'context/LoginContext'\r\nimport { isEmpty } from \"common/utils/collections\";\r\nimport { isLoggedIn } from \"common/SessionUtils\";\r\n\r\nexport const AuditorsContext = React.createContext();\r\n\r\nexport function AuditorsProvider({ children }) {\r\n  const [auditorsData, setAuditorsData] = React.useState({});\r\n  const [auditorsDataMap, setAuditorsDataMap] = React.useState({});\r\n  const {setIsAuditorsDataReadyState} = React.useContext(LoginContext);\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      if (isEmpty(auditorsData)) {\r\n        getAuditorsData();\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n\r\n  const getAuditorName = (id, idType=USER_ID_ENUM.USER_LOGIN) =>{\r\n    var auditorData = getAuditorRegistry(id, idType)\r\n    if (auditorData && auditorData['user_name']) {\r\n      return auditorData['user_name']; \r\n    } else {\r\n      console.log(\"ERROR:\", \"USER NOT REGISTERED\", id )\r\n      return id; \r\n    }    \r\n  }\r\n\r\n  const getAuditorRegistry = (id, idType) => {\r\n    \r\n    if (!id) \r\n      return {}\r\n    \r\n    if (!auditorsData || Object.keys(auditorsData).length === 0){\r\n    \r\n      getAuditorsData()\r\n    }  \r\n\r\n    \r\n    return auditorsDataMap[idType + id.toString().toUpperCase()];\r\n    \r\n  };\r\n\r\n  \r\n  const getGroupMembers = (id) => {\r\n    let data = getGroups(id, false)\r\n    var groups = []\r\n    if (data){          \r\n      for (var i=0; i++; i<data.length) {\r\n        groups.push(data[i]['user_id'])\r\n      }          \r\n    } \r\n    return groups\r\n  };\r\n\r\n  const getGroups = (id, fetchByUser=true) => {\r\n    \r\n    let column = fetchByUser ? \"user_id\" : \"group_id\"\r\n    let filters = [{\r\n      \"column\": column, \r\n      \"value\": id, \r\n      \"filter_type\": \"equal\", \r\n      \"column_type\": \"int\"\r\n    }]\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters)\r\n    \r\n    axiosRetryProxy.post(`${env.apiAddress}/group/read_group_members`, httpRequestBody).then(res => {\r\n        return res.data[0]              \r\n    })\r\n    .catch(err=>{\r\n        console.log(err)\r\n    })\r\n  };\r\n\r\n  \r\n\r\n  const getAuditorsData = async (notifyJobDone=false) => {\r\n    \r\n    let filters = []\r\n    let orderBy = {\r\n      \"column\": \"user_name\",\r\n      \"direction\": \"asc\"\r\n    }\r\n    let httpHeader = createQueryHttpRequestBody(filters, orderBy)\r\n\r\n    \r\n    await axiosRetryProxy.post(`${env.apiAddress}/auditor/read_all`, httpHeader).then(res => {\r\n      let auditorsMap = {}\r\n      if (res.data) {\r\n        Object.keys(res.data).forEach(key => {\r\n          auditorsMap[USER_ID_ENUM.USER_LOGIN+res.data[key]['user_login'].toString().toUpperCase()] = res.data[key]\r\n          auditorsMap[USER_ID_ENUM.USER_ID+res.data[key]['user_id'].toString().toUpperCase()] = res.data[key]\r\n          auditorsMap[USER_ID_ENUM.USER_REGISTRATION_ID+res.data[key]['user_registration_id'].toString().toUpperCase()] = res.data[key]\r\n          auditorsMap[USER_ID_ENUM.USER_NAME+res.data[key]['user_name'].toString().toUpperCase()] = res.data[key]\r\n          \r\n        });\r\n      }\r\n    \r\n      setAuditorsData(res.data)\r\n      setAuditorsDataMap(auditorsMap)\r\n      if (notifyJobDone){\r\n        //toggleAuditorsDataReady()\r\n        setIsAuditorsDataReadyState(()=> (true))\r\n      }\r\n      return res.data\r\n    })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  };\r\n\r\n  return (\r\n    <AuditorsContext.Provider value={{ auditorsData, getAuditorsData, setAuditorsData, getAuditorRegistry, getAuditorName, getGroupMembers}}>\r\n      {children}\r\n    </AuditorsContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}