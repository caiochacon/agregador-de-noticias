{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\views\\\\Groups.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Card, CardBody, Form, FormGroup, Label, Input, Button, Modal, ModalBody, ModalHeader, Row, Col } from 'reactstrap';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport { useHistory } from \"react-router-dom\";\nimport { NavigationContext } from 'context/NavigationContext';\nimport { WarningsContext } from 'context/WarningsContext';\nimport { AuditorsContext } from 'context/AuditorsContext';\nimport Tabs from 'components/Tabs';\nimport TagsInput from 'components/tags/TagsInput';\nimport Table from 'components/tables/Table';\nimport AuditorSelector from 'components/auditor/AuditorSelector';\nimport ModalEditionButtons from 'components/buttons/ModalEditionButtons';\nimport EditionButtons from 'components/buttons/EditionButtons';\nimport env from 'common/enviroment';\nimport STATUS_ENUM from 'common/enumerators/StatusEnum';\nimport GROUP_TYPE_ENUM from 'common/enumerators/GroupTypeEnum';\nimport USER_ID_ENUM from 'common/enumerators/UserIdEnum';\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\nimport ConfirmationModal from 'components/modals/ConfirmationModal ';\nimport MessageModal from 'components/modals/MessageModal';\nimport RevisionModal from 'components/modals/RevisionModal';\nimport { createRevisionModalData } from 'components/modals/RevisionModal';\nimport { getUserLogin, isAdmin, isLoggedIn, reloadVisibilityGroups, isGaeco, isDNIT } from 'common/SessionUtils';\nimport { createOrderByClause, createQueryHttpRequestBody, createSimpleFilterClause, createBaseHttpRequestBody } from 'axios/AxiosUtils';\nimport { ERROR, EXCLUSION, EDITION, CREATION } from 'components/modals/ModalConsts';\nimport { isPRF } from 'common/SessionUtils';\nimport { ViewsContext } from 'context/ViewsContext';\nimport { OR_FILTER } from 'axios/AxiosUtils';\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\nimport { BASE_CONFIG } from 'components/auditor/AuditorSelector';\nimport { getNowDateTimeString } from 'common/utils/validate';\nimport { treatResponse } from 'common/utils/errorTreatment';\nimport treatError from 'common/utils/errorTreatment';\nimport { cloneFilters } from 'axios/AxiosUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BLANK_FORM_DATA = {\n  \"group_id\": \"\",\n  \"group_name\": \"\",\n  \"group_owner\": \"\",\n  \"group_description\": \"\",\n  \"group_members\": {},\n  \"group_status\": \"\",\n  \"group_supervisor\": \"\"\n};\nexport default function Groups() {\n  _s();\n\n  const history = useHistory();\n  const {\n    refresh,\n    refreshFlag,\n    groupsFilters,\n    setGroupsFilters\n  } = React.useContext(ViewsContext);\n  const {\n    setIsMap\n  } = React.useContext(NavigationContext);\n  const {\n    startSSE,\n    wasReloaded,\n    setWasReloaded\n  } = React.useContext(WarningsContext);\n  const {\n    auditorsData,\n    getAuditorsData,\n    getAuditorName,\n    getAuditorRegistry\n  } = React.useContext(AuditorsContext);\n  const [spinner, setSpinner] = React.useState(false);\n  const [invalid, setInvalid] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const [filters, setFilters] = React.useState([]);\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA);\n  const [oldFormData, setOldFormData] = React.useState(BLANK_FORM_DATA);\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\n  const [modalType, setModalType] = React.useState(-1);\n  const [fieldToSave, setFieldToSave] = React.useState(\"\");\n  const [isModalActive, setIsModalActive] = React.useState(false);\n  const [modalData, setModalData] = React.useState({});\n\n  const toggleModalOn = type => {\n    setModalType(type);\n    setIsModalActive(true);\n  };\n\n  const toggleModalOff = () => {\n    setModalType(MODAL_TYPE_ENUM.NONE);\n    setIsModalActive(false);\n  };\n\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const toggleEditionModal = () => setEditionModal(prev => !prev);\n\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n  React.useEffect(() => {\n    if (isLoggedIn()) {\n      getAuditorsData();\n    } else {\n      history.push('/login');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filters, tabIndex]);\n  React.useEffect(() => {\n    if (isLoggedIn()) {\n      setIsMap(false);\n\n      if (wasReloaded) {\n        startSSE();\n        setWasReloaded(false);\n      }\n\n      if (tabIndex === 0) {\n        cleanInputs(tabIndex);\n        setModalReadonlyMode(false);\n      } else if (tabIndex === 1) {\n        if (filters && filters.length > 0) setIsLoading(true);\n      }\n\n      refresh();\n    } else {\n      history.push('/login');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filters, tabIndex, auditorsData]);\n\n  const whenChangeTabIndex = tabNumber => {\n    cleanInputs(tabNumber);\n    setInvalid(() => false);\n    setTabIndex(() => tabNumber);\n  };\n\n  const isDisabled = creator => {\n    let user = getUserLogin();\n\n    if (user && creator === user || isAdmin()) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const hasEmptyValues = obj => {\n    if (obj.group_name.trim() === \"\" || obj.group_description.trim() === \"\" || Object.keys(obj.group_members).length === 0) return true;\n    return false;\n  };\n\n  const isGroupOwnerEmpty = obj => {\n    if (Object.keys(obj.group_owner).length === 0) return true;\n    return false;\n  };\n\n  const isGroupSupervisorEmpty = obj => {\n    if (Object.keys(obj.group_supervisor).length === 0) return true;\n    return false;\n  };\n\n  const HAS_EMPTY_VALUES_MAP = {\n    0: hasEmptyValues,\n    1: hasEmptyValues,\n    2: () => {\n      return false;\n    }\n  };\n\n  const compareMemberGroups = () => {\n    let group1 = Object.keys(formData.group_members);\n    let group2 = Object.keys(oldFormData.group_members);\n    return group1.sort().toString() === group2.sort().toString();\n  };\n\n  const compareWithOldValues = () => {\n    if (formData.group_name === oldFormData.group_name && formData.group_description === oldFormData.group_description && compareMemberGroups()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const compareGroupSupervisor = () => {\n    if (Object.keys(formData.group_supervisor)[0] === Object.keys(oldFormData.group_supervisor)[0]) return true;\n    return false;\n  };\n\n  const compareGroupOwner = () => {\n    if (Object.keys(formData.group_owner)[0] === Object.keys(oldFormData.group_owner)[0]) return true;\n    return false;\n  };\n\n  const cleanInputs = tabNumber => {\n    //Já inserir o atual usuário logado como membro nato do grupo\n    var newData = {};\n    var auditorData = getAuditorRegistry(getUserLogin(), USER_ID_ENUM.USER_LOGIN);\n\n    if (auditorData) {\n      newData[auditorData['user_id']] = auditorData;\n    }\n\n    if (tabNumber === 0) setFormData({ ...BLANK_FORM_DATA,\n      group_members: newData\n    });else setFormData({ ...BLANK_FORM_DATA\n    });\n    setOldFormData(BLANK_FORM_DATA);\n  };\n\n  const openConfirmationModal = (hasEmptyValueFunction, compareValuesFunction) => {\n    if (hasEmptyValueFunction()) {\n      setInvalid(true);\n    } else if (compareValuesFunction()) {\n      setInvalid(true);\n      setModalData({\n        operation: EDITION,\n        messageType: ERROR,\n        message: \"Não há alterações a serem salvas para este grupo operacional!\"\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    } else {\n      setInvalid(false);\n      setModalData({\n        entity: \"e Grupo Operacional\",\n        operation: EDITION\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION);\n    }\n  };\n\n  const openEditionModal = function (data) {\n    let readOnlyMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (data && data['group_id']) {\n      let auditorsDict = mountGroupMembersDict(data['usuario_grupo']);\n      setOldFormData({ ...data,\n        group_members: auditorsDict\n      });\n      setFormData({ ...data,\n        group_members: { ...auditorsDict\n        }\n      });\n      setInvalid(false);\n      setModalReadonlyMode(readOnlyMode);\n      setEditionModal(true);\n    }\n  };\n\n  const openRevisionModal = () => {\n    if (hasEmptyValues(formData)) {\n      //if necessário ?\n      setInvalid(true);\n    } else {\n      setInvalid(false);\n      let data = createRevisionModalData(\"Revise os Dados do Grupo Fiscal\", ['Nome', 'Descrição', 'Criador', 'Membros'], [formData.group_name, formData.group_description, getAuditorName(getUserLogin()), mountGroupMembersText(Object.values(formData.group_members), true)]);\n      setModalData(data);\n      toggleModalOn(MODAL_TYPE_ENUM.REVISION);\n    }\n  };\n\n  const openDeleteModal = id => {\n    if (id) {\n      setFormData({ ...formData,\n        \"group_id\": id\n      });\n      setModalData({\n        entity: \"e Grupo Operacional\",\n        operation: EXCLUSION,\n        id: id\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION);\n    }\n  };\n\n  const mountGroupMembersText = function (groupMembers) {\n    let includeUserRegistrationID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!groupMembers) return \"\";\n    let auditors = [];\n\n    for (let groupMember of groupMembers) {\n      var auditorID = groupMember['user_id'];\n      var auditorData = getAuditorRegistry(auditorID, USER_ID_ENUM.USER_ID);\n      if (!auditorData) continue;\n      var text = auditorData['user_name'];\n      text += includeUserRegistrationID ? \" (\".concat(auditorData['user_registration_id'], \")\") : \"\";\n      auditors.push(text);\n    }\n\n    return auditors.join(\",  \");\n  };\n\n  const mountGroupMembersDict = groupMembers => {\n    let auditors = {};\n\n    for (var groupMember of groupMembers) {\n      var auditorID = groupMember['user_id'];\n      auditors[auditorID] = getAuditorRegistry(auditorID, USER_ID_ENUM.USER_ID);\n    }\n\n    return auditors;\n  };\n\n  const mountRetrievalFiltersOperationalGroups = filters => {\n    filters.push(createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO));\n\n    if (isGaeco()) {\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO));\n    } else if (isDNIT()) {\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT));\n    } else if (isPRF()) {\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF));\n    } else {\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.OPERACIONAL));\n    }\n\n    if (!isAdmin()) {\n      filters.push(createSimpleFilterClause(\"group_owner\", \"char\", \"equal\", getUserLogin()));\n    }\n\n    return filters;\n  };\n\n  const mountRetrievalFiltersInstitucionalGroups = () => {\n    let filters = [];\n    let orClauses = [];\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL));\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO));\n    let groupsFilter = createCompositeFilterClause(\"group_type\", OR_FILTER, orClauses);\n    filters.push(groupsFilter);\n    return filters;\n  };\n\n  const mountRetrievalFiltersMap = {\n    1: mountRetrievalFiltersOperationalGroups,\n    2: mountRetrievalFiltersInstitucionalGroups\n  };\n\n  const createEditionHttpRequestBody = status => {\n    let httpRequestBody = createBaseHttpRequestBody({\n      group_name: formData.group_name,\n      group_description: formData.group_description,\n      group_type: GROUP_TYPE_ENUM.OPERACIONAL,\n      group_status: status,\n      group_modification_date: getNowDateTimeString(),\n      group_modification_user: getUserLogin()\n    });\n\n    if (tabIndex === 2) {\n      httpRequestBody = { ...httpRequestBody,\n        group_type: GROUP_TYPE_ENUM.INSTITUCIONAL\n      };\n      if (fieldToSave === \"owner\") httpRequestBody['group_owner'] = formData.group_owner[Object.keys(formData.group_owner)[0]].user_login;else httpRequestBody['group_supervisor'] = formData.group_supervisor[Object.keys(formData.group_supervisor)[0]].user_login;\n    } else {\n      httpRequestBody = { ...httpRequestBody,\n        group_owner: getUserLogin(),\n        user_ids: Object.keys(formData.group_members).map(Number)\n      };\n    }\n\n    if (status === STATUS_ENUM.CRIADO) {\n      httpRequestBody['group_creation_date'] = getNowDateTimeString();\n    }\n\n    return httpRequestBody;\n  };\n\n  const createCountHttpRequestBody = () => {\n    let filtersClone = [];\n\n    for (const element of filters) {\n      filtersClone.push(element);\n    }\n\n    filtersClone = mountRetrievalFiltersMap[tabIndex](filtersClone);\n    let httpRequestBody = createBaseHttpRequestBody();\n    httpRequestBody['filters'] = filtersClone;\n    return httpRequestBody;\n  };\n\n  const createReadHttpRequestBody = () => {\n    let filtersClone = cloneFilters(filters);\n    filtersClone = mountRetrievalFiltersMap[tabIndex](filtersClone);\n    let orderBy = createOrderByClause(\"group_id\", \"asc\");\n    return createQueryHttpRequestBody(filtersClone, orderBy);\n  };\n\n  const createGroup = () => {\n    const httpRequestBody = createEditionHttpRequestBody(STATUS_ENUM.CRIADO);\n    console.log(httpRequestBody);\n    setSpinner(true);\n    let entity = \"do Grupo Operacional\";\n    axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/group/create\"), httpRequestBody).then(res => {\n      reloadVisibilityGroups();\n      treatResponse(entity, CREATION, 'group_id', res, setModalData, refresh);\n    }).catch(err => {\n      setModalData(treatError(err, entity, CREATION));\n      console.log(err);\n    }).finally(() => {\n      cleanInputs(tabIndex);\n      setSpinner(false);\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    });\n  };\n\n  const updateGroup = () => {\n    if (HAS_EMPTY_VALUES_MAP[tabIndex](formData)) // if é necessário ? pq ja existe uma validação em confirmationModal\n      setInvalid(true);else {\n      setSpinner(true);\n      if (tabIndex === 1) toggleEditionModal();\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n      let httpRequestBody = createEditionHttpRequestBody(STATUS_ENUM.CRIADO);\n      let entity = \"do Grupo Operacional\";\n      axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/group/update/\").concat(formData.group_id), httpRequestBody).then(res => {\n        reloadVisibilityGroups();\n        treatResponse(entity, EDITION, 'group_id', res, setModalData, refresh);\n      }).catch(err => {\n        setModalData(treatError(err, entity, EDITION));\n        console.log(err);\n      }).finally(() => {\n        setSpinner(false);\n        cleanInputs(tabIndex);\n      });\n    }\n  };\n\n  const deleteGroup = async id => {\n    //Checa se um grupo está sendo usado por alguma configuração de alerta. Caso sim, emite uma mensagem de erro.\n    let entity = \"do Grupo Operacional\";\n    let configs = await retrieveWarningConfigsByGroup(formData.group_id);\n    setSpinner(true);\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n\n    if (isEditionModalActive) {\n      toggleEditionModal();\n    }\n\n    if (configs && Array.isArray(configs) && configs.length !== 0) {\n      let configNames = [];\n\n      for (let i = 0; i < configs.length; i++) {\n        configNames.push(configs[i].nome);\n      }\n\n      let message = \"Não é possível excluir o corrente grupo! O mesmo está vinculado as seguintes configurações de alertas:  \" + configNames.join(\", \");\n      setModalData({\n        entity,\n        operation: EXCLUSION,\n        messageType: ERROR,\n        message: message\n      });\n      setSpinner(false);\n    } else {\n      let httpRequestBody = createBaseHttpRequestBody({\n        // É necessário ter este httpRequest preenchido.\n        group_id: id,\n        group_status: STATUS_ENUM.REMOVIDO,\n        group_modification_date: getNowDateTimeString(),\n        group_modification_user: getUserLogin()\n      });\n      axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/group/update/\").concat(id), httpRequestBody).then(res => {\n        reloadVisibilityGroups();\n        treatResponse(entity, EXCLUSION, 'group_id', res, setModalData, refresh);\n      }).catch(err => {\n        setModalData(treatError(err, entity, EXCLUSION));\n        console.log(err);\n      }).finally(() => {\n        setSpinner(false);\n      });\n    }\n  }; //Este método é usado para checar se um grupo está sendo utilizado por alguma configuração de alerta.\n\n\n  const retrieveWarningConfigsByGroup = async groupID => {\n    let orderBy = createOrderByClause(\"data_criacao\", \"desc\");\n    const httpRequestBody = createQueryHttpRequestBody({}, orderBy);\n    httpRequestBody['query']['filters']['view_group'] = [groupID];\n    httpRequestBody['query']['filters']['warning_config'] = [];\n    let res = await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/warningconfigs/read_all\"), httpRequestBody);\n    return res.data[0];\n  };\n\n  const optionalButtonConfig = { ...BASE_CONFIG,\n    buttonAction: () => {\n      setFieldToSave(() => \"owner\");\n      openConfirmationModal(() => {\n        return isGroupOwnerEmpty(formData);\n      }, () => {\n        return compareGroupOwner();\n      });\n    },\n    label: \"Salvar\"\n  };\n  const optionalButtonConfigSupervisor = { ...BASE_CONFIG,\n    buttonAction: () => {\n      setFieldToSave(() => \"supervisor\");\n      openConfirmationModal(() => {\n        return isGroupSupervisorEmpty(formData);\n      }, () => {\n        return compareGroupSupervisor();\n      });\n    },\n    label: \"Salvar\"\n  };\n\n  const EditionForm = props => {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: \"5px 0px 10px 0px\"\n      },\n      onSubmit: e => {\n        e.preventDefault();\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"nome\",\n          children: \"Nome do Grupo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"nome\",\n          placeholder: \"Nome do Grupo\",\n          readOnly: modalReadonlyMode,\n          value: formData.group_name,\n          maxLength: \"70\",\n          invalid: invalid && formData.group_name.trim() === \"\",\n          onChange: e => setFormData({ ...formData,\n            group_name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"descricao\",\n          children: \"Descri\\xE7\\xE3o do Grupo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"descricao\",\n          readOnly: modalReadonlyMode,\n          placeholder: \"Descri\\xE7\\xE3o do Grupo\",\n          value: formData.group_description,\n          maxLength: \"100\",\n          invalid: invalid && formData.group_description.trim() === \"\",\n          onChange: e => setFormData({ ...formData,\n            group_description: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(AuditorSelector, {\n          label: \"Integrantes do Grupo:\",\n          singleSelectionMode: false,\n          data: formData,\n          setData: setFormData,\n          fieldName: 'group_members',\n          invalidFlag: invalid,\n          modalReadonlyMode: modalReadonlyMode,\n          isUserId: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 7\n      }, this), props.isCreationForm ? /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: () => {\n          openRevisionModal();\n        },\n        style: {\n          marginTop: '2rem'\n        },\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(ModalEditionButtons, {\n        id: formData.group_id,\n        data: formData,\n        creator: formData.group_owner,\n        modalReadonlyMode: modalReadonlyMode,\n        setModalReadonlyMode: setModalReadonlyMode,\n        isDisabled: isDisabled,\n        editionAction: setModalReadonlyMode,\n        deleteAction: openDeleteModal,\n        saveAction: () => {\n          openConfirmationModal(() => {\n            return hasEmptyValues(formData);\n          }, () => {\n            return compareWithOldValues();\n          });\n        },\n        cancelAction: toggleEditionModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 11\n      }, this)]\n    }, \"A\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 13\n    }, this);\n  };\n\n  const setValuesToEditGroupTab2 = row => {\n    var newData = {};\n    var auditorData = getAuditorRegistry(row.group_owner, USER_ID_ENUM.USER_LOGIN);\n\n    if (auditorData) {\n      newData[auditorData['user_id']] = auditorData;\n    }\n\n    let supervisorData = getAuditorRegistry(row.group_supervisor, USER_ID_ENUM.USER_LOGIN);\n    let newSupervisorData = {};\n    if (Object.keys(supervisorData).length !== 0) newSupervisorData[supervisorData['user_id']] = supervisorData;else newSupervisorData = \"\";\n    let data = { ...row,\n      group_owner: newData,\n      group_supervisor: newSupervisorData\n    };\n    setFormData(() => data);\n    setOldFormData(() => data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        names: ['Cadastrar Grupo Operacional', 'Gerenciamento de Grupos Operacionais', 'Gerenciamento de Grupos Institucional '],\n        index: [tabIndex, whenChangeTabIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card\",\n        style: {\n          borderTopLeftRadius: '0px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [tabIndex === 0 && EditionForm({\n            isCreationForm: true,\n            isModal: false\n          }), tabIndex === 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TagsInput, {\n              tagsState: [groupsFilters, setGroupsFilters],\n              setQuery: setFilters,\n              columns: {\n                \"Nome do Grupo\": {\n                  field: \"group_name\",\n                  column_type: \"varying\",\n                  size: 100\n                },\n                \"Descrição do Grupo\": {\n                  field: \"group_description\",\n                  column_type: \"varying\",\n                  size: 200\n                },\n                \"Integrantes do Grupo\": {\n                  field: \"group_members\",\n                  column_type: \"varying\",\n                  size: 60\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataUrl: \"/group/read_all\",\n              countUrl: \"/group/count_groups\",\n              requestBody: createReadHttpRequestBody,\n              countRequestBody: createCountHttpRequestBody,\n              tags: filters,\n              fillData: true,\n              retrieveData: data => data,\n              refresh: refreshFlag,\n              trProps: row => {\n                return {\n                  onDoubleClick: e => {\n                    openEditionModal(row, true);\n                  }\n                };\n              },\n              loading: [isLoading, setIsLoading],\n              columns: {\n                \"Nome\": \"group_name\",\n                \"Descrição\": \"group_description\",\n                \"Criador\": {\n                  func: getAuditorName,\n                  args: \"group_owner\"\n                },\n                \"Membros\": {\n                  func: mountGroupMembersText,\n                  args: \"usuario_grupo\"\n                },\n                \"Ações\": {\n                  args: [\"group_id\", \"group_name\"],\n                  tdStyle: {\n                    textAlign: 'center'\n                  },\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  Func: _ref => {\n                    let {\n                      data,\n                      row_data\n                    } = _ref;\n                    return /*#__PURE__*/_jsxDEV(EditionButtons, {\n                      isModal: false,\n                      data: row_data,\n                      id: data[0],\n                      modalReadonlyMode: modalReadonlyMode,\n                      setModalReadonlyMode: setModalReadonlyMode,\n                      isDisabled: isDisabled,\n                      editionAction: openEditionModal,\n                      deleteAction: openDeleteModal\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 684,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), tabIndex === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              style: {\n                border: '1px solid #dee2e6',\n                borderRadius: '5px',\n                padding: '30px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                for: \"nome\",\n                children: \"Ger\\xEAncia\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"nome\",\n                placeholder: \"Nome do Grupo\",\n                readOnly: true,\n                value: formData.group_name,\n                maxLength: \"70\",\n                invalid: invalid && formData.group_name === \"\",\n                onChange: e => setFormData({ ...formData,\n                  group_name: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"descricao\",\n                style: {\n                  marginTop: '10px'\n                },\n                children: \"Nome da Ger\\xEAncia\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                style: {\n                  marginBottom: '10px'\n                },\n                id: \"descricao\",\n                readOnly: true,\n                placeholder: \"Descri\\xE7\\xE3o do Grupo\",\n                value: formData.group_description,\n                maxLength: \"200\",\n                invalid: invalid && formData.group_description === \"\",\n                onChange: e => setFormData({ ...formData,\n                  group_description: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(AuditorSelector, {\n                    label: \"Responsável pela Gerência:\",\n                    singleSelectionMode: true,\n                    data: formData,\n                    setData: setFormData,\n                    fieldName: 'group_owner',\n                    invalidFlag: invalid,\n                    modalReadonlyMode: modalReadonlyMode,\n                    isUserId: true,\n                    firstOptionalButtonConfig: optionalButtonConfig\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 720,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 719,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(AuditorSelector, {\n                    label: \"Supervisor:\",\n                    singleSelectionMode: true,\n                    data: formData,\n                    setData: setFormData,\n                    fieldName: 'group_supervisor',\n                    invalidFlag: invalid,\n                    modalReadonlyMode: modalReadonlyMode,\n                    isUserId: true,\n                    firstOptionalButtonConfig: optionalButtonConfigSupervisor\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 733,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 732,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 718,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataUrl: \"/group/read_all\",\n              countUrl: \"/group/count_groups\",\n              requestBody: createReadHttpRequestBody,\n              countRequestBody: createCountHttpRequestBody,\n              tags: filters,\n              fillData: true,\n              retrieveData: data => data,\n              refresh: refreshFlag,\n              trProps: row => {\n                return {\n                  onClick: e => {\n                    setValuesToEditGroupTab2(row);\n\n                    if (selectedRow) {\n                      selectedRow.style.backgroundColor = '';\n                    }\n\n                    setSelectedRow(e.target.parentNode);\n                    e.target.parentNode.style.backgroundColor = '#51cbce';\n                  }\n                };\n              },\n              loading: [isLoading, setIsLoading],\n              columns: {\n                \"Gerência\": \"group_name\",\n                \"Nome da Gerência\": \"group_description\",\n                \"Subgerente\": {\n                  func: getAuditorName,\n                  args: \"group_owner\"\n                },\n                \"Supervisor\": {\n                  func: getAuditorName,\n                  args: \"group_supervisor\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), isEditionModalActive && /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"lg\",\n      isOpen: isEditionModalActive,\n      toggle: () => {\n        cleanInputs(tabIndex);\n        toggleEditionModal();\n      },\n      style: {\n        minWidth: '35%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => {\n          cleanInputs(tabIndex);\n          toggleEditionModal();\n        },\n        children: \"Grupo Operacional Cadastrado \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        style: {\n          justifyContent: 'center',\n          alignContent: 'center',\n          padding: '0.5rem'\n        },\n        children: EditionForm({\n          id: formData.group_id,\n          isCreationForm: false,\n          isModal: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 32\n    }, this), modalType === MODAL_TYPE_ENUM.CONFIRMATION && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      actionMethods: [undefined, updateGroup, deleteGroup]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 54\n    }, this), modalType === MODAL_TYPE_ENUM.MESSAGE && /*#__PURE__*/_jsxDEV(MessageModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 49\n    }, this), modalType === MODAL_TYPE_ENUM.REVISION && /*#__PURE__*/_jsxDEV(RevisionModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      actionMethod: createGroup,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 50\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Groups, \"YeLwF94L7aZZ3DMuYu3tRvO0+ZM=\", false, function () {\n  return [useHistory];\n});\n\n_c = Groups;\n\nvar _c;\n\n$RefreshReg$(_c, \"Groups\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/views/Groups.js"],"names":["React","Card","CardBody","Form","FormGroup","Label","Input","Button","Modal","ModalBody","ModalHeader","Row","Col","axios","axiosRetry","getTimeoutConfig","getRetryConfig","useHistory","NavigationContext","WarningsContext","AuditorsContext","Tabs","TagsInput","Table","AuditorSelector","ModalEditionButtons","EditionButtons","env","STATUS_ENUM","GROUP_TYPE_ENUM","USER_ID_ENUM","MODAL_TYPE_ENUM","ConfirmationModal","MessageModal","RevisionModal","createRevisionModalData","getUserLogin","isAdmin","isLoggedIn","reloadVisibilityGroups","isGaeco","isDNIT","createOrderByClause","createQueryHttpRequestBody","createSimpleFilterClause","createBaseHttpRequestBody","ERROR","EXCLUSION","EDITION","CREATION","isPRF","ViewsContext","OR_FILTER","createCompositeFilterClause","BASE_CONFIG","getNowDateTimeString","treatResponse","treatError","cloneFilters","BLANK_FORM_DATA","Groups","history","refresh","refreshFlag","groupsFilters","setGroupsFilters","useContext","setIsMap","startSSE","wasReloaded","setWasReloaded","auditorsData","getAuditorsData","getAuditorName","getAuditorRegistry","spinner","setSpinner","useState","invalid","setInvalid","isLoading","setIsLoading","tabIndex","setTabIndex","filters","setFilters","formData","setFormData","oldFormData","setOldFormData","modalReadonlyMode","setModalReadonlyMode","modalType","setModalType","fieldToSave","setFieldToSave","isModalActive","setIsModalActive","modalData","setModalData","toggleModalOn","type","toggleModalOff","NONE","isEditionModalActive","setEditionModal","selectedRow","setSelectedRow","toggleEditionModal","prev","axiosRetryProxy","create","useEffect","push","cleanInputs","length","whenChangeTabIndex","tabNumber","isDisabled","creator","user","hasEmptyValues","obj","group_name","trim","group_description","Object","keys","group_members","isGroupOwnerEmpty","group_owner","isGroupSupervisorEmpty","group_supervisor","HAS_EMPTY_VALUES_MAP","compareMemberGroups","group1","group2","sort","toString","compareWithOldValues","compareGroupSupervisor","compareGroupOwner","newData","auditorData","USER_LOGIN","openConfirmationModal","hasEmptyValueFunction","compareValuesFunction","operation","messageType","message","MESSAGE","entity","CONFIRMATION","openEditionModal","data","readOnlyMode","auditorsDict","mountGroupMembersDict","openRevisionModal","mountGroupMembersText","values","REVISION","openDeleteModal","id","groupMembers","includeUserRegistrationID","auditors","groupMember","auditorID","USER_ID","text","join","mountRetrievalFiltersOperationalGroups","CRIADO","GAECO","DNIT","PRF","OPERACIONAL","mountRetrievalFiltersInstitucionalGroups","orClauses","INSTITUCIONAL","SIGILOSO","groupsFilter","mountRetrievalFiltersMap","createEditionHttpRequestBody","status","httpRequestBody","group_type","group_status","group_modification_date","group_modification_user","user_login","user_ids","map","Number","createCountHttpRequestBody","filtersClone","element","createReadHttpRequestBody","orderBy","createGroup","console","log","post","apiAddress","then","res","catch","err","finally","updateGroup","patch","group_id","deleteGroup","configs","retrieveWarningConfigsByGroup","Array","isArray","configNames","i","nome","REMOVIDO","groupID","optionalButtonConfig","buttonAction","label","optionalButtonConfigSupervisor","EditionForm","props","margin","e","preventDefault","target","value","isCreationForm","marginTop","setValuesToEditGroupTab2","row","supervisorData","newSupervisorData","borderTopLeftRadius","isModal","field","column_type","size","onDoubleClick","func","args","tdStyle","textAlign","thStyle","Func","row_data","border","borderRadius","padding","marginBottom","onClick","style","backgroundColor","parentNode","minWidth","justifyContent","alignContent","undefined"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Row,\r\n  Col,\r\n} from 'reactstrap';\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { NavigationContext } from 'context/NavigationContext'\r\nimport { WarningsContext } from 'context/WarningsContext';\r\nimport { AuditorsContext } from 'context/AuditorsContext';\r\n\r\nimport Tabs from 'components/Tabs';\r\nimport TagsInput from 'components/tags/TagsInput';\r\nimport Table from 'components/tables/Table';\r\nimport AuditorSelector from 'components/auditor/AuditorSelector';\r\nimport ModalEditionButtons from 'components/buttons/ModalEditionButtons';\r\nimport EditionButtons from 'components/buttons/EditionButtons';\r\n\r\nimport env from 'common/enviroment'\r\nimport STATUS_ENUM from 'common/enumerators/StatusEnum'\r\nimport GROUP_TYPE_ENUM from 'common/enumerators/GroupTypeEnum'\r\nimport USER_ID_ENUM from 'common/enumerators/UserIdEnum';\r\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\r\n\r\n\r\nimport ConfirmationModal from 'components/modals/ConfirmationModal ';\r\nimport MessageModal from 'components/modals/MessageModal';\r\nimport RevisionModal from 'components/modals/RevisionModal';\r\nimport { createRevisionModalData } from 'components/modals/RevisionModal';\r\n\r\n\r\nimport { getUserLogin, isAdmin, isLoggedIn, reloadVisibilityGroups, isGaeco, isDNIT } from 'common/SessionUtils';\r\nimport { createOrderByClause, createQueryHttpRequestBody, createSimpleFilterClause, createBaseHttpRequestBody } from 'axios/AxiosUtils';\r\nimport { ERROR, EXCLUSION, EDITION, CREATION } from 'components/modals/ModalConsts';\r\nimport { isPRF } from 'common/SessionUtils';\r\nimport { ViewsContext } from 'context/ViewsContext';\r\nimport { OR_FILTER } from 'axios/AxiosUtils';\r\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\r\nimport { BASE_CONFIG } from 'components/auditor/AuditorSelector';\r\nimport { getNowDateTimeString } from 'common/utils/validate';\r\nimport { treatResponse } from 'common/utils/errorTreatment';\r\nimport treatError from 'common/utils/errorTreatment';\r\nimport { cloneFilters } from 'axios/AxiosUtils';\r\n\r\n\r\nconst BLANK_FORM_DATA = {\r\n  \"group_id\": \"\",\r\n    \"group_name\": \"\",\r\n    \"group_owner\": \"\",\r\n    \"group_description\": \"\",\r\n    \"group_members\": {},\r\n    \"group_status\": \"\",\r\n    \"group_supervisor\": \"\"\r\n  }\r\n\r\n\r\n\r\nexport default function Groups() {\r\n  const history = useHistory()\r\n\r\n  const { refresh, refreshFlag, groupsFilters, setGroupsFilters } = React.useContext(ViewsContext)\r\n  const { setIsMap } = React.useContext(NavigationContext);\r\n  const { startSSE, wasReloaded, setWasReloaded } = React.useContext(WarningsContext);\r\n  const { auditorsData, getAuditorsData, getAuditorName, getAuditorRegistry } = React.useContext(AuditorsContext);\r\n\r\n\r\n  const [spinner, setSpinner] = React.useState(false)\r\n  const [invalid, setInvalid] = React.useState(false)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const [tabIndex, setTabIndex] = React.useState(0)\r\n\r\n  const [filters, setFilters] = React.useState([])\r\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA)\r\n  const [oldFormData, setOldFormData] = React.useState(BLANK_FORM_DATA)\r\n\r\n\r\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\r\n  const [modalType, setModalType] = React.useState(-1);\r\n  const [fieldToSave, setFieldToSave] = React.useState(\"\");\r\n  const [isModalActive, setIsModalActive] = React.useState(false);\r\n  const [modalData, setModalData] = React.useState({});\r\n  const toggleModalOn = (type) => { setModalType(type); setIsModalActive(true); };\r\n  const toggleModalOff = () => { setModalType(MODAL_TYPE_ENUM.NONE); setIsModalActive(false); }\r\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n  const toggleEditionModal = () => setEditionModal(prev => !prev);\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      getAuditorsData();\r\n\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filters, tabIndex])\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      setIsMap(false);\r\n\r\n      if (wasReloaded) {\r\n        startSSE()\r\n        setWasReloaded(false)\r\n      }\r\n\r\n      if (tabIndex === 0) {\r\n        cleanInputs(tabIndex);\r\n        setModalReadonlyMode(false);\r\n      } else  if (tabIndex === 1) {\r\n        if (filters && filters.length > 0)\r\n          setIsLoading(true)\r\n      }\r\n\r\n      refresh()\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filters, tabIndex, auditorsData])\r\n\r\n\r\n  const whenChangeTabIndex = (tabNumber) => {\r\n\r\n    cleanInputs(tabNumber)\r\n    setInvalid(() => false)\r\n    setTabIndex(() => tabNumber)\r\n  }\r\n\r\n  const isDisabled = (creator) => {\r\n    let user = getUserLogin()\r\n\r\n    if ((user && creator === user) || isAdmin()) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const hasEmptyValues = (obj) => {\r\n    if (obj.group_name.trim() === \"\" || obj.group_description.trim() === \"\"|| Object.keys(obj.group_members).length === 0)\r\n      return true\r\n\r\n    return false\r\n  }\r\n\r\n  const isGroupOwnerEmpty = (obj) => {\r\n    if (Object.keys(obj.group_owner).length === 0)\r\n      return true\r\n    return false\r\n  }\r\n\r\n  const isGroupSupervisorEmpty = (obj) => {\r\n    if (Object.keys(obj.group_supervisor).length === 0)\r\n      return true\r\n    return false\r\n  }\r\n\r\n  const HAS_EMPTY_VALUES_MAP = {\r\n    0: hasEmptyValues,\r\n    1: hasEmptyValues,\r\n    2: () => {return false}\r\n  }\r\n\r\n  const compareMemberGroups = () => {\r\n    let group1 = Object.keys(formData.group_members)\r\n    let group2 = Object.keys(oldFormData.group_members)\r\n\r\n    return group1.sort().toString() === group2.sort().toString()\r\n  }\r\n\r\n  const compareWithOldValues = () => {\r\n    if (formData.group_name === oldFormData.group_name && formData.group_description === oldFormData.group_description && compareMemberGroups()) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const compareGroupSupervisor = () => {\r\n    if (Object.keys(formData.group_supervisor)[0] === Object.keys(oldFormData.group_supervisor)[0])\r\n      return true\r\n\r\n    return false\r\n\r\n  }\r\n\r\n  const compareGroupOwner = () => {\r\n    if (Object.keys(formData.group_owner)[0] === Object.keys(oldFormData.group_owner)[0])\r\n      return true\r\n\r\n    return false\r\n  }\r\n\r\n  const cleanInputs = (tabNumber) => {\r\n    //Já inserir o atual usuário logado como membro nato do grupo\r\n    var newData = {}\r\n    var auditorData = getAuditorRegistry(getUserLogin(), USER_ID_ENUM.USER_LOGIN)\r\n    if (auditorData) {\r\n      newData[auditorData['user_id']] = auditorData\r\n    }\r\n\r\n    if (tabNumber === 0)\r\n      setFormData({ ...BLANK_FORM_DATA, group_members: newData })\r\n    else\r\n      setFormData({ ...BLANK_FORM_DATA})\r\n    setOldFormData(BLANK_FORM_DATA)\r\n  }\r\n\r\n  const openConfirmationModal = (hasEmptyValueFunction, compareValuesFunction) => {\r\n    if (hasEmptyValueFunction()) {\r\n      setInvalid(true)\r\n    }\r\n    else if (compareValuesFunction()) {\r\n      setInvalid(true)\r\n      setModalData({ operation: EDITION, messageType: ERROR, message: \"Não há alterações a serem salvas para este grupo operacional!\" });\r\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n    }\r\n    else {\r\n      setInvalid(false)\r\n      setModalData({ entity: \"e Grupo Operacional\", operation: EDITION });\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n    }\r\n  }\r\n\r\n\r\n  const openEditionModal = (data, readOnlyMode = false) => {\r\n\r\n    if (data && data['group_id']) {\r\n      let auditorsDict = mountGroupMembersDict(data['usuario_grupo'])\r\n      setOldFormData({ ...data, group_members: auditorsDict })\r\n      setFormData({ ...data, group_members: { ...auditorsDict } })\r\n\r\n      setInvalid(false);\r\n      setModalReadonlyMode(readOnlyMode);\r\n      setEditionModal(true)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const openRevisionModal = () => {\r\n    if (hasEmptyValues(formData)) { //if necessário ?\r\n      setInvalid(true)\r\n    }\r\n    else {\r\n      setInvalid(false)\r\n      let data = createRevisionModalData(\"Revise os Dados do Grupo Fiscal\",\r\n        ['Nome', 'Descrição', 'Criador', 'Membros'],\r\n        [formData.group_name, formData.group_description, getAuditorName(getUserLogin()), mountGroupMembersText(Object.values(formData.group_members), true)])\r\n      setModalData(data)\r\n      toggleModalOn(MODAL_TYPE_ENUM.REVISION)\r\n    }\r\n  };\r\n\r\n\r\n  const openDeleteModal = (id) => {\r\n    if (id) {\r\n\r\n      setFormData({ ...formData, \"group_id\": id });\r\n      setModalData({ entity: \"e Grupo Operacional\", operation: EXCLUSION, id: id });\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n    }\r\n  }\r\n\r\n  \r\n  const mountGroupMembersText = (groupMembers, includeUserRegistrationID = false) => {\r\n    if (!groupMembers)\r\n      return \"\"\r\n\r\n    let auditors = []\r\n    for (let groupMember of groupMembers) {\r\n\r\n      var auditorID = groupMember['user_id']\r\n      var auditorData = getAuditorRegistry(auditorID, USER_ID_ENUM.USER_ID)\r\n\r\n      if(!auditorData)\r\n        continue\r\n      var text = auditorData['user_name']\r\n      text += includeUserRegistrationID ? ` (${auditorData['user_registration_id']})` : \"\"\r\n      auditors.push(text)\r\n    }\r\n\r\n    return auditors.join(\",  \")\r\n  }\r\n\r\n\r\n  const mountGroupMembersDict = (groupMembers) => {\r\n    let auditors = {}\r\n    for (var groupMember of groupMembers) {\r\n      var auditorID = groupMember['user_id']\r\n      auditors[auditorID] = getAuditorRegistry(auditorID, USER_ID_ENUM.USER_ID)\r\n    }\r\n    return auditors\r\n  }\r\n\r\n\r\n  const mountRetrievalFiltersOperationalGroups = (filters) => {\r\n    filters.push(createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO))\r\n    if (isGaeco()) {\r\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO))\r\n    } else if (isDNIT()) {\r\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT))\r\n    } else if (isPRF()) {\r\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF))\r\n    } else {\r\n      filters.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.OPERACIONAL))\r\n    }\r\n\r\n    if (!isAdmin()) {\r\n      filters.push(createSimpleFilterClause(\"group_owner\", \"char\", \"equal\", getUserLogin()))\r\n    }\r\n    return filters\r\n\r\n  }\r\n\r\n  const mountRetrievalFiltersInstitucionalGroups = () => {\r\n    \r\n    let filters = []\r\n    let orClauses = []\r\n    \r\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL))\r\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO))\r\n    \r\n\r\n    let groupsFilter = createCompositeFilterClause(\"group_type\", OR_FILTER, orClauses)\r\n    filters.push(groupsFilter)  \r\n    return filters\r\n  }\r\n\r\n  const mountRetrievalFiltersMap = {\r\n    1: mountRetrievalFiltersOperationalGroups,\r\n    2: mountRetrievalFiltersInstitucionalGroups\r\n  }\r\n\r\n  const createEditionHttpRequestBody = (status) => {\r\n\r\n    let httpRequestBody = createBaseHttpRequestBody({\r\n      group_name: formData.group_name,\r\n      group_description: formData.group_description, group_type: GROUP_TYPE_ENUM.OPERACIONAL, group_status: status,\r\n      group_modification_date: getNowDateTimeString(),\r\n      group_modification_user: getUserLogin()\r\n    })\r\n\r\n    if (tabIndex === 2){\r\n      httpRequestBody = { ...httpRequestBody,\r\n        group_type: GROUP_TYPE_ENUM.INSTITUCIONAL\r\n      }\r\n\r\n      if (fieldToSave === \"owner\")\r\n        httpRequestBody['group_owner'] = formData.group_owner[Object.keys(formData.group_owner)[0]].user_login\r\n      else\r\n        httpRequestBody['group_supervisor'] = formData.group_supervisor[Object.keys(formData.group_supervisor)[0]].user_login\r\n\r\n    }else{\r\n      httpRequestBody = {...httpRequestBody,\r\n        group_owner: getUserLogin(),\r\n        user_ids: Object.keys(formData.group_members).map(Number)\r\n      }\r\n    }\r\n\r\n    if (status === STATUS_ENUM.CRIADO) {\r\n      httpRequestBody['group_creation_date'] = getNowDateTimeString()\r\n    }\r\n\r\n    return httpRequestBody\r\n\r\n  }\r\n\r\n\r\n  const createCountHttpRequestBody = () => {\r\n\r\n    let filtersClone = []\r\n    for (const element of filters) {\r\n        filtersClone.push(element)\r\n    }\r\n\r\n    filtersClone = mountRetrievalFiltersMap[tabIndex](filtersClone)\r\n\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n    httpRequestBody['filters'] = filtersClone\r\n\r\n    return httpRequestBody\r\n  }\r\n\r\n  const createReadHttpRequestBody = () => {\r\n    let filtersClone = cloneFilters(filters)\r\n\r\n    filtersClone = mountRetrievalFiltersMap[tabIndex](filtersClone)\r\n\r\n    let orderBy = createOrderByClause(\"group_id\", \"asc\")\r\n\r\n    return createQueryHttpRequestBody(filtersClone, orderBy)\r\n  }\r\n\r\n  const createGroup = () => {\r\n\r\n    const httpRequestBody = createEditionHttpRequestBody(STATUS_ENUM.CRIADO)\r\n\r\n    console.log(httpRequestBody)\r\n\r\n    setSpinner(true)\r\n    let entity = \"do Grupo Operacional\"\r\n    axiosRetryProxy.post(`${env.apiAddress}/group/create`, httpRequestBody)\r\n      .then(res => {\r\n        reloadVisibilityGroups();\r\n        treatResponse(entity, CREATION, 'group_id', res,  setModalData, refresh)\r\n      }).catch(err => {\r\n        setModalData(treatError(err, entity, CREATION));\r\n        console.log(err)\r\n      }).finally(() => {\r\n        cleanInputs(tabIndex);\r\n        setSpinner(false)\r\n        toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n      })\r\n\r\n  }\r\n\r\n\r\n  const updateGroup = () => {\r\n    if (HAS_EMPTY_VALUES_MAP[tabIndex](formData)) // if é necessário ? pq ja existe uma validação em confirmationModal\r\n      setInvalid(true)\r\n    else {\r\n\r\n\r\n      setSpinner(true)\r\n      if (tabIndex === 1)\r\n        toggleEditionModal()\r\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n\r\n      let httpRequestBody = createEditionHttpRequestBody(STATUS_ENUM.CRIADO)\r\n      let entity = \"do Grupo Operacional\"\r\n      axiosRetryProxy.patch(`${env.apiAddress}/group/update/${formData.group_id}`, httpRequestBody)\r\n        .then(res => {\r\n\r\n          reloadVisibilityGroups();\r\n          treatResponse(entity, EDITION, 'group_id', res,  setModalData, refresh)\r\n        }).catch(err => {\r\n          setModalData(treatError(err, entity, EDITION));\r\n          console.log(err)\r\n        }).finally(() => {\r\n          setSpinner(false)\r\n          cleanInputs(tabIndex)\r\n        })\r\n\r\n    }\r\n  }\r\n\r\n  const deleteGroup = async (id) => {\r\n\r\n    //Checa se um grupo está sendo usado por alguma configuração de alerta. Caso sim, emite uma mensagem de erro.\r\n    let entity = \"do Grupo Operacional\"\r\n    \r\n    let configs = await retrieveWarningConfigsByGroup(formData.group_id)\r\n    \r\n\r\n    setSpinner(true)\r\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n\r\n\r\n    if (isEditionModalActive) {\r\n      toggleEditionModal()\r\n    }\r\n\r\n    if (configs && Array.isArray(configs) && configs.length !== 0) {\r\n      let configNames = []\r\n      for (let i = 0; i < configs.length; i++) {\r\n        configNames.push(configs[i].nome)\r\n      }\r\n\r\n      let message = \"Não é possível excluir o corrente grupo! O mesmo está vinculado as seguintes configurações de alertas:  \" + configNames.join(\", \")\r\n      setModalData({ entity, operation: EXCLUSION, messageType: ERROR, message: message });\r\n      setSpinner(false)\r\n\r\n    } else {\r\n\r\n      let httpRequestBody = createBaseHttpRequestBody({ // É necessário ter este httpRequest preenchido.\r\n        group_id: id , group_status: STATUS_ENUM.REMOVIDO,\r\n        group_modification_date: getNowDateTimeString(),\r\n        group_modification_user: getUserLogin()\r\n      })\r\n\r\n      axiosRetryProxy.patch(`${env.apiAddress}/group/update/${id}`, httpRequestBody)\r\n        .then(res => {\r\n          reloadVisibilityGroups();\r\n          treatResponse(entity, EXCLUSION, 'group_id', res,  setModalData, refresh)\r\n        }).catch(err => {\r\n          setModalData(treatError(err, entity, EXCLUSION));\r\n          console.log(err)\r\n        }).finally(() => {\r\n          setSpinner(false)\r\n        })\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //Este método é usado para checar se um grupo está sendo utilizado por alguma configuração de alerta.\r\n  const retrieveWarningConfigsByGroup = async (groupID) => {\r\n    let orderBy = createOrderByClause(\"data_criacao\", \"desc\")\r\n    const httpRequestBody = createQueryHttpRequestBody({}, orderBy)\r\n    httpRequestBody['query']['filters']['view_group'] = [groupID]\r\n    httpRequestBody['query']['filters']['warning_config'] = []\r\n\r\n    let res = await axiosRetryProxy.post(`${env.apiAddress}/warningconfigs/read_all`, httpRequestBody)\r\n    \r\n    return res.data[0]\r\n  }\r\n\r\n  const optionalButtonConfig = {...BASE_CONFIG, \r\n    buttonAction : () => {setFieldToSave(() => \"owner\");openConfirmationModal(\r\n      () => {return isGroupOwnerEmpty(formData)},\r\n      () => {return compareGroupOwner()}\r\n    )},\r\n    label : \"Salvar\"    \r\n  }\r\n\r\n  const optionalButtonConfigSupervisor = {...BASE_CONFIG, \r\n    buttonAction : () => {setFieldToSave(() => \"supervisor\");openConfirmationModal(\r\n      () => {return isGroupSupervisorEmpty(formData)},\r\n      () => {return compareGroupSupervisor()}\r\n    )},\r\n    label : \"Salvar\"    \r\n  }\r\n\r\n\r\n  const EditionForm = (props) => {\r\n    return (<Form key={\"A\"} style={{ margin: \"5px 0px 10px 0px\" }} onSubmit={e => { e.preventDefault(); }}>\r\n      <FormGroup>\r\n        <Label for=\"nome\">Nome do Grupo</Label>\r\n        <Input\r\n          id=\"nome\"\r\n          placeholder=\"Nome do Grupo\"\r\n          readOnly={modalReadonlyMode}\r\n          value={formData.group_name}\r\n          maxLength=\"70\"\r\n          invalid={invalid && formData.group_name.trim() === \"\"}\r\n          onChange={e => setFormData({ ...formData, group_name: e.target.value })}\r\n\r\n        />\r\n      </FormGroup>\r\n      <br />\r\n      <FormGroup>\r\n        <Label for=\"descricao\">Descrição do Grupo</Label>\r\n        <Input\r\n          id=\"descricao\"\r\n          readOnly={modalReadonlyMode}\r\n          placeholder=\"Descrição do Grupo\"\r\n          value={formData.group_description}\r\n          maxLength=\"100\"\r\n          invalid={invalid && formData.group_description.trim() === \"\"}\r\n          onChange={e => setFormData({ ...formData, group_description: e.target.value })}\r\n        />\r\n      </FormGroup>\r\n      <br />\r\n            <Row >\r\n        <AuditorSelector label={\"Integrantes do Grupo:\"} singleSelectionMode={false} data={formData} setData={setFormData} fieldName={'group_members'} invalidFlag={invalid} modalReadonlyMode={modalReadonlyMode} isUserId={true} />\r\n      </Row>\r\n\r\n      <br />\r\n\r\n      {(props.isCreationForm) ?\r\n        <Button color=\"primary\" onClick={() => { openRevisionModal() }} style={{ marginTop: '2rem' }}>Cadastrar</Button>\r\n        : <ModalEditionButtons\r\n          id={formData.group_id} data={formData} creator={formData.group_owner}\r\n          modalReadonlyMode={modalReadonlyMode} setModalReadonlyMode={setModalReadonlyMode} isDisabled={isDisabled}\r\n          editionAction={setModalReadonlyMode} deleteAction={openDeleteModal}\r\n          saveAction={() => {\r\n            openConfirmationModal(\r\n              () => {return hasEmptyValues(formData)},\r\n              () => {return compareWithOldValues()}\r\n            )\r\n          }} \r\n          cancelAction={toggleEditionModal}\r\n        />\r\n      }\r\n\r\n\r\n\r\n    </Form>)\r\n\r\n  }\r\n\r\n  const setValuesToEditGroupTab2 = (row) => {\r\n\r\n    var newData = {}\r\n    var auditorData = getAuditorRegistry(row.group_owner, USER_ID_ENUM.USER_LOGIN)\r\n    if (auditorData) {\r\n      newData[auditorData['user_id']] = auditorData\r\n    }\r\n\r\n    let supervisorData = getAuditorRegistry(row.group_supervisor, USER_ID_ENUM.USER_LOGIN)\r\n\r\n    let newSupervisorData = {}\r\n\r\n    if (Object.keys(supervisorData).length !== 0)\r\n      newSupervisorData[supervisorData['user_id']] = supervisorData\r\n    else\r\n      newSupervisorData = \"\"\r\n\r\n    let data = {...row,  group_owner: newData, group_supervisor: newSupervisorData}\r\n\r\n    setFormData(() => data)\r\n    setOldFormData(() => data)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <Tabs names={['Cadastrar Grupo Operacional', 'Gerenciamento de Grupos Operacionais', 'Gerenciamento de Grupos Institucional ']} index={[tabIndex, whenChangeTabIndex]} />\r\n        <Card className=\"card\" style={{ borderTopLeftRadius: '0px' }}>\r\n          <CardBody>\r\n            {tabIndex === 0 &&\r\n              EditionForm({ isCreationForm: true, isModal: false })\r\n            }\r\n\r\n            {tabIndex === 1 &&\r\n              <>\r\n                <TagsInput\r\n                  tagsState={[groupsFilters, setGroupsFilters]}\r\n                  setQuery={setFilters}\r\n                  columns={{\r\n                    \"Nome do Grupo\": {\r\n                      field: \"group_name\",\r\n                      column_type: \"varying\",\r\n                      size: 100\r\n                    },\r\n                    \"Descrição do Grupo\": {\r\n                      field: \"group_description\",\r\n                      column_type: \"varying\",\r\n                      size: 200\r\n                    },\r\n                    \"Integrantes do Grupo\": {\r\n                      field: \"group_members\",\r\n                      column_type: \"varying\",\r\n                      size: 60\r\n                    }\r\n                }} />\r\n\r\n\r\n                <Table\r\n                  dataUrl=\"/group/read_all\"\r\n                  countUrl=\"/group/count_groups\"\r\n                  requestBody={createReadHttpRequestBody}\r\n                  countRequestBody={createCountHttpRequestBody}\r\n                  tags={filters}\r\n                  fillData\r\n                  retrieveData={(data) => data}\r\n                  refresh={refreshFlag}\r\n                  trProps={row => { return { onDoubleClick: (e) => { openEditionModal(row, true) } } }}\r\n                  loading={[isLoading, setIsLoading]}\r\n                  columns={{\r\n                    \"Nome\": \"group_name\",\r\n                    \"Descrição\": \"group_description\",\r\n                    \"Criador\": { func: getAuditorName, args: \"group_owner\" },\r\n                    \"Membros\": { func: mountGroupMembersText, args: \"usuario_grupo\" },\r\n                    \"Ações\": {\r\n                      args: [\"group_id\", \"group_name\"],\r\n                      tdStyle: { textAlign: 'center' },\r\n                      thStyle: { textAlign: 'center' },\r\n                      Func: ({ data, row_data }) => <EditionButtons isModal={false} data={row_data} id={data[0]}\r\n                        modalReadonlyMode={modalReadonlyMode} setModalReadonlyMode={setModalReadonlyMode} isDisabled={isDisabled}\r\n                        editionAction={openEditionModal} deleteAction={openDeleteModal} />\r\n\r\n                    }\r\n                  }}\r\n                />\r\n              </>\r\n            }\r\n\r\n            {tabIndex === 2 &&\r\n              <>\r\n                <FormGroup style={{border: '1px solid #dee2e6', borderRadius: '5px', padding: '30px'}}>\r\n                  <Label for=\"nome\">Gerência</Label>\r\n                  <Input\r\n                    id=\"nome\"\r\n                    placeholder=\"Nome do Grupo\"\r\n                    readOnly\r\n                    value={formData.group_name}\r\n                    maxLength=\"70\"\r\n                    invalid={invalid && formData.group_name === \"\"}\r\n                    onChange={e => setFormData({ ...formData, group_name: e.target.value })}\r\n                  />\r\n                  <Label for=\"descricao\" style={{marginTop: '10px'}}>Nome da Gerência</Label>\r\n                  <Input\r\n                    style={{marginBottom: '10px'}}\r\n                    id=\"descricao\"\r\n                    readOnly\r\n                    placeholder=\"Descrição do Grupo\"\r\n                    value={formData.group_description}\r\n                    maxLength=\"200\"\r\n                    invalid={invalid && formData.group_description === \"\"}\r\n                    onChange={e => setFormData({ ...formData, group_description: e.target.value })}\r\n                  />\r\n                  <Row >\r\n                    <Col>\r\n                      <AuditorSelector\r\n                        label={\"Responsável pela Gerência:\"}\r\n                        singleSelectionMode={true}\r\n                        data={formData}\r\n                        setData={setFormData}\r\n                        fieldName={'group_owner'}\r\n                        invalidFlag={invalid}\r\n                        modalReadonlyMode={modalReadonlyMode}\r\n                        isUserId={true}\r\n                        firstOptionalButtonConfig={optionalButtonConfig}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <AuditorSelector\r\n                        label={\"Supervisor:\"}\r\n                        singleSelectionMode={true}\r\n                        data={formData}\r\n                        setData={setFormData}\r\n                        fieldName={'group_supervisor'}\r\n                        invalidFlag={invalid}\r\n                        modalReadonlyMode={modalReadonlyMode}\r\n                        isUserId={true}\r\n                        firstOptionalButtonConfig={optionalButtonConfigSupervisor}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                </FormGroup>\r\n                <Table\r\n                    dataUrl=\"/group/read_all\"\r\n                    countUrl=\"/group/count_groups\"\r\n                    requestBody={createReadHttpRequestBody}\r\n                    countRequestBody={createCountHttpRequestBody}\r\n                    tags={filters}\r\n                    fillData\r\n                    retrieveData={(data) => data}\r\n                    refresh={refreshFlag}\r\n                    trProps={row => { return { onClick: (e) => {\r\n                      setValuesToEditGroupTab2(row)\r\n                      if (selectedRow) {\r\n                        selectedRow.style.backgroundColor = '';\r\n                      }\r\n                      setSelectedRow(e.target.parentNode);\r\n                      e.target.parentNode.style.backgroundColor = '#51cbce';\r\n                    } } }}\r\n                    loading={[isLoading, setIsLoading]}\r\n                    columns={{\r\n                      \"Gerência\": \"group_name\",\r\n                      \"Nome da Gerência\": \"group_description\",\r\n                      \"Subgerente\": { func: getAuditorName, args: \"group_owner\" },                      \r\n                      \"Supervisor\": { func: getAuditorName, args: \"group_supervisor\" },                      \r\n                    }}\r\n                />\r\n            </>\r\n            }\r\n          </CardBody>\r\n        </Card>\r\n\r\n\r\n      </div>\r\n\r\n      {isEditionModalActive && <Modal size='lg' isOpen={isEditionModalActive} toggle={() => { cleanInputs(tabIndex); toggleEditionModal() }} style={{ minWidth: '35%' }} >\r\n        <ModalHeader toggle={() => { cleanInputs(tabIndex); toggleEditionModal() }}>Grupo Operacional Cadastrado {/*spinner? <Spinner color=\"danger\" size=\"sm\" /> : <RiDeleteBin2Fill className=\"text-danger\" style={{cursor: 'pointer'}} onClick={toggleConfirmDelete}/>*/}</ModalHeader>\r\n        <ModalBody style={{ justifyContent: 'center', alignContent: 'center', padding: '0.5rem' }}>\r\n          {EditionForm({ id: formData.group_id, isCreationForm: false, isModal: true })}\r\n        </ModalBody>\r\n      </Modal>}\r\n\r\n      {modalType === MODAL_TYPE_ENUM.CONFIRMATION && <ConfirmationModal show={isModalActive} toggle={toggleModalOff} data={modalData} actionMethods={[undefined, updateGroup, deleteGroup]} />}\r\n      {modalType === MODAL_TYPE_ENUM.MESSAGE && <MessageModal show={isModalActive} toggle={toggleModalOff} data={modalData} spinner={spinner} />}\r\n      {modalType === MODAL_TYPE_ENUM.REVISION && <RevisionModal show={isModalActive} toggle={toggleModalOff} data={modalData} actionMethod={createGroup} spinner={spinner} />}\r\n    </>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}