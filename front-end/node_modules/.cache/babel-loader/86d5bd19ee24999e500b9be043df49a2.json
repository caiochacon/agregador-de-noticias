{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createBaseHttpRequestBody, createQueryHttpRequestBody, createSimpleFilterClause } from \"./AxiosUtils\";\nimport { isEmpty } from \"common/utils/collections\";\nexport default function ReadDfeData() {\n  const NFE_KEY = 'infprot_chnfe';\n  const MDFE_KEY = 'protmdfe_infprot_chmdfe';\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const getDfe = data => {\n    if (!isEmpty(data) && Array.isArray(data)) {\n      return data[0];\n    }\n  };\n\n  const mountResult = (data, field) => {\n    try {\n      let result = [];\n      console.log(\"MDFE\", data);\n\n      for (const dfe of data) {\n        console.log(\"MDFE1\", dfe);\n        console.log(\"MDFE2\", dfe[field]);\n        result.push(dfe[field]);\n      }\n\n      return result;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const readEventMdfe = async event_id => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"id_evento\", \"char\", \"equal\", event_id));\n    let httpRequestBody = createBaseHttpRequestBody();\n    httpRequestBody['id'] = event_id;\n    let res = await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/eventdocs/read_event_mdfe\"), httpRequestBody).then(res => {\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n      return [];\n    });\n    return res;\n  };\n\n  const readEventNfe = async event_id => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"id_evento\", \"char\", \"equal\", event_id));\n    let httpRequestBody = createBaseHttpRequestBody();\n    httpRequestBody['id'] = event_id;\n    let res = await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/eventdocs/read_event_nfe\"), httpRequestBody).then(res => {\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n      return [];\n    });\n    return res;\n  };\n\n  const readDfeDataRequest = async event_id => {\n    try {\n      let mdfeData = await readEventMdfe(event_id);\n      let nfeData = await readEventNfe(event_id);\n      let mdfe = mountResult(mdfeData, \"fato_mdfe\");\n      let nfe = mountResult(nfeData, \"fato_nfetransito\");\n      return [mdfe, nfe];\n    } catch (error) {\n      return error;\n    }\n  };\n\n  return {\n    readDfeDataRequest\n  };\n}\n_c = ReadDfeData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadDfeData\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/axios/ReadDfeData.js"],"names":["axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createBaseHttpRequestBody","createQueryHttpRequestBody","createSimpleFilterClause","isEmpty","ReadDfeData","NFE_KEY","MDFE_KEY","axiosRetryProxy","create","getDfe","data","Array","isArray","mountResult","field","result","console","log","dfe","push","error","readEventMdfe","event_id","filters","httpRequestBody","res","post","apiAddress","then","catch","err","readEventNfe","readDfeDataRequest","mdfeData","nfeData","mdfe","nfe"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\n\r\nimport { createBaseHttpRequestBody, createQueryHttpRequestBody, createSimpleFilterClause } from \"./AxiosUtils\";\r\nimport { isEmpty } from \"common/utils/collections\";\r\n\r\nexport default function ReadDfeData() {\r\n\r\n  const NFE_KEY = 'infprot_chnfe'\r\n  const MDFE_KEY = 'protmdfe_infprot_chmdfe' \r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n\r\n  const getDfe = (data) => {\r\n    if (!isEmpty(data) && Array.isArray(data)){\r\n      return data[0]\r\n    }\r\n  }\r\n\r\n  const mountResult = (data, field) => {\r\n    \r\n    try{\r\n      let result = []\r\n\r\n      console.log(\"MDFE\", data)\r\n      for (const dfe of data){\r\n        console.log(\"MDFE1\", dfe)\r\n        console.log(\"MDFE2\", dfe[field])\r\n        result.push(dfe[field])\r\n      }\r\n      \r\n      return result\r\n\r\n    } catch (error) {\r\n      return error\r\n      \r\n    } \r\n    \r\n  }\r\n\r\n\r\n  const readEventMdfe = async (event_id) => {\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(\"id_evento\", \"char\", \"equal\", event_id))\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n    httpRequestBody['id'] = event_id\r\n    \r\n    let res = await axiosRetryProxy.post(`${env.apiAddress}/eventdocs/read_event_mdfe`, httpRequestBody).then(res => {\r\n      return res.data\r\n    }).catch(err => {\r\n      console.log(err)\r\n      return []\r\n    })\r\n    return res\r\n  }\r\n\r\n  const readEventNfe = async (event_id) => {\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(\"id_evento\", \"char\", \"equal\", event_id))\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n    httpRequestBody['id'] = event_id\r\n    \r\n    let res = await axiosRetryProxy.post(`${env.apiAddress}/eventdocs/read_event_nfe`, httpRequestBody).then(res => {\r\n      return res.data\r\n    }).catch(err => {\r\n      console.log(err)\r\n      return []\r\n    })\r\n    return res\r\n  }\r\n\r\n  const readDfeDataRequest = async (event_id) => {\r\n    \r\n    try{\r\n\r\n      let mdfeData = await readEventMdfe(event_id)\r\n      let nfeData = await readEventNfe(event_id)\r\n\r\n      let mdfe = mountResult(mdfeData, \"fato_mdfe\")\r\n      let nfe = mountResult(nfeData, \"fato_nfetransito\")\r\n\r\n      \r\n      return [mdfe, nfe]\r\n\r\n    } catch (error) {\r\n      return error\r\n      \r\n    } \r\n    \r\n  }\r\n\r\n    return { readDfeDataRequest }\r\n  }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}