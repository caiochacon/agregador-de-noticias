{"ast":null,"code":"export function removeKey(obj, key) {\n  for (const prop in obj) {\n    if (prop === key) {\n      delete obj[prop];\n    } else if (typeof obj[prop] === 'object') {\n      removeKey(obj[prop], key);\n    }\n  }\n}\nexport function useDefaultValue(value, defaultValue) {\n  if (isEmpty(value)) {\n    return defaultValue;\n  }\n\n  return value;\n}\nexport function isEmpty(value) {\n  if (!value) return true;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return value === \"\" || value === '';\n}\nexport const hasSubstring = (data, key, substring) => {\n  if (data[key].toUpperCase().indexOf(substring.toUpperCase()) !== -1) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport function treatNullValue(value) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  if (isEmpty(value)) return defaultValue;\n  return value;\n}\nexport function sortData(list, fieldName) {\n  if (isEmpty(list)) return [];\n  return [...list].sort(function (a, b) {\n    return b[fieldName] - a[fieldName];\n  });\n}\nexport function manageInputTables(input, ways) {\n  const EMPTY_FIELDS = [\"NULL\", \"null\", undefined, null, \"\", \"-\", \"0\"];\n\n  try {\n    let new_input = input;\n\n    for (let index = 0; index < ways.length; index = index + 1) {\n      new_input = new_input[ways[index]];\n    }\n\n    new_input = EMPTY_FIELDS.includes(new_input) ? \"\" : new_input;\n    return new_input;\n  } catch {\n    return \"\";\n  }\n}\nexport function compareArray(oldValue, newValue) {\n  let group1 = Object.keys(oldValue);\n  let group2 = Object.keys(newValue);\n  return group1.sort().toString() === group2.sort().toString();\n}\nexport function allNullObject(array) {\n  for (let i = 0; i < array.length; i++) {\n    const objeto = array[i];\n    const chaves = Object.keys(objeto);\n\n    for (let j = 0; j < chaves.length; j++) {\n      const chave = chaves[j];\n\n      if (objeto[chave] !== null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/common/utils/collections.js"],"names":["removeKey","obj","key","prop","useDefaultValue","value","defaultValue","isEmpty","Array","isArray","length","Object","keys","hasSubstring","data","substring","toUpperCase","indexOf","treatNullValue","sortData","list","fieldName","sort","a","b","manageInputTables","input","ways","EMPTY_FIELDS","undefined","new_input","index","includes","compareArray","oldValue","newValue","group1","group2","toString","allNullObject","array","i","objeto","chaves","j","chave"],"mappings":"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","sourcesContent":["\r\n\r\nexport function removeKey(obj, key) {\r\n  for(const prop in obj) {\r\n    if (prop === key) {\r\n      delete obj[prop];\r\n    } else if (typeof obj[prop] === 'object') {\r\n      removeKey(obj[prop], key);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function useDefaultValue (value, defaultValue) {\r\n  if (isEmpty(value)){\r\n    return defaultValue\r\n  }\r\n  return value\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function isEmpty(value){\r\n  if (!value)\r\n      return true\r\n\r\n  if (Array.isArray(value))\r\n      return value.length === 0\r\n\r\n  if (typeof value === 'object')\r\n    return Object.keys(value).length === 0\r\n\r\n  return value === \"\" || value === ''\r\n\r\n}\r\n\r\n\r\nexport const hasSubstring = (data, key, substring) => {\r\n  if (data[key].toUpperCase().indexOf(substring.toUpperCase()) !== -1){\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nexport function treatNullValue(value, defaultValue=\"\"){\r\n  if (isEmpty(value))\r\n    return defaultValue\r\n  return value\r\n}\r\n\r\n\r\nexport function sortData(list, fieldName) {\r\n  if (isEmpty(list)) return []\r\n  return [...list].sort(function (a, b) {\r\n      return b[fieldName] - a[fieldName];\r\n  });\r\n}\r\n\r\n\r\nexport function manageInputTables(input, ways){\r\n\r\n  const EMPTY_FIELDS = [\"NULL\", \"null\", undefined, null, \"\", \"-\", \"0\"]\r\n\r\n  try{\r\n\r\n    let new_input = input\r\n\r\n    for(let index = 0; index < ways.length; index = index + 1 ) {\r\n\r\n      new_input = new_input[ways[index]]\r\n    }\r\n\r\n    new_input = EMPTY_FIELDS.includes(new_input)? \"\":new_input\r\n\r\n    return new_input\r\n  }catch{\r\n\r\n    return \"\"\r\n  }\r\n}\r\n\r\n\r\nexport function compareArray(oldValue, newValue){\r\n  let group1 = Object.keys(oldValue)\r\n  let group2 = Object.keys(newValue)\r\n\r\n  return group1.sort().toString() === group2.sort().toString()\r\n}\r\n\r\n\r\nexport function allNullObject(array) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    const objeto = array[i];\r\n    const chaves = Object.keys(objeto);\r\n\r\n    for (let j = 0; j < chaves.length; j++) {\r\n      const chave = chaves[j];\r\n      if (objeto[chave] !== null) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}