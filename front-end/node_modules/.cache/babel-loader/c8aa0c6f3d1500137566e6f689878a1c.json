{"ast":null,"code":"import { isAdmin, isSubgerente } from 'common/SessionUtils';\nimport { getJWT } from 'common/SessionUtils';\nimport { isComandoFiscal } from 'common/SessionUtils';\nimport { isExternalUser } from 'common/SessionUtils';\nimport { getVisibilityGroups } from 'common/SessionUtils';\nimport { EDITION_TIMEOUT } from 'common/enviroment';\nimport { READ_TIMEOUT } from 'common/enviroment';\nimport { exponentialDelay } from 'axios-retry';\nimport { LOGIN_TIMEOUT } from 'common/enviroment';\nexport const OR_FILTER = \"or\";\nexport const AND_FILTER = \"and\";\nexport const ASC = \"asc\";\nexport const DESC = \"desc\";\nexport const EQUAL = \"equal\";\nexport const IS_NULL = \"null\";\nexport const IN = \"in\";\nexport const INTERVAL = \"interval\";\nexport const GREATER = \"greater\";\nexport const CHAR = \"char\";\nexport const INT = \"int\";\nexport const VARCHAR = \"varying\";\nexport const FILTERS = \"filters\";\nexport const ROLE = \"role\";\nexport const QUERY = \"query\";\nexport const GROUP_IDS = 'group_ids';\nexport const READ = 0;\nexport const WRITE = 1;\nexport const LOGIN = 2;\n\nfunction getRole() {\n  if (isExternalUser()) return \"GAECO\";else if (isAdmin() || isComandoFiscal()) return \"ADMIN\";else if (isSubgerente()) return \"SUBGERENTE\";else return \"CICC\";\n}\n\nexport function createBaseHttpRequestBody(data) {\n  let httpRequestBody = {\n    'jwt_token': getJWT(),\n    'role': getRole()\n  };\n\n  if (data) {\n    for (const [key, value] of Object.entries(data)) {\n      httpRequestBody[key] = value;\n    }\n  }\n\n  return { ...httpRequestBody\n  };\n}\nexport function createQueryHttpRequestBody() {\n  let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let orderBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let httpRequestBody = createBaseHttpRequestBody();\n  httpRequestBody['query'] = {\n    \"filters\": []\n  };\n\n  if (filters) {\n    httpRequestBody['query']['filters'] = filters;\n  }\n\n  if (orderBy) {\n    httpRequestBody['query']['order_by'] = orderBy;\n  }\n\n  return httpRequestBody;\n}\nexport function addOrderByClause(httpRequestBody, column, direction) {\n  let order_by = {\n    \"column\": column,\n    \"direction\": direction\n  };\n  httpRequestBody['query']['order_by'] = order_by;\n}\nexport function createOrderByClause(column, direction) {\n  let order_by = {\n    \"column\": column,\n    \"direction\": direction\n  };\n  return order_by;\n}\nexport function createSimpleFilterClause(column, columnType, filterType, value) {\n  let filter = {\n    \"column\": column,\n    \"filter_type\": filterType,\n    \"column_type\": columnType,\n    \"value\": value\n  };\n  return filter;\n}\nexport function createCompositeFilterClause(column, filterType) {\n  let clauses = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let filter = {\n    \"column\": column,\n    \"value\": [],\n    \"filter_type\": filterType,\n    \"column_type\": \"\"\n  };\n\n  for (const clause of clauses) {\n    filter['value'].push(clause);\n  }\n\n  return filter;\n}\nexport function createNotFilterClause(column, columnType, filterType, value) {\n  return {\n    \"column\": \"\",\n    \"filter_type\": \"not\",\n    \"column_type\": \"\",\n    \"value\": createSimpleFilterClause(column, columnType, filterType, value)\n  };\n}\nexport function mountQueryFromTags(tags, columns) {\n  let filters = [];\n  Object.keys(tags).filter(columnName => tags[columnName].length > 0).forEach(columnName => {\n    let skip = false;\n\n    if (columns[columnName].field === \"group_id\") {\n      return;\n    }\n\n    let values = [];\n    tags[columnName].forEach(filter => {\n      let value = filter;\n      if (columns[columnName].dropdown) switch (columns[columnName].dropdown[filter].constructor) {\n        case Function:\n          const result = columns[columnName].dropdown[filter]();\n\n          if (result.constructor === Array) {\n            filters.push(...result);\n            skip = true;\n          } else values.push(result);\n\n          return;\n\n        case Object:\n          value = columns[columnName].dropdown[filter].value;\n          break;\n\n        default:\n          value = columns[columnName].dropdown[filter];\n      }\n      if (columns[columnName].mask) if (filter.constructor === Array) value = filter.map(limit => columns[columnName].mask.decode(limit));else value = columns[columnName].mask.decode(filter);\n      if (columns[columnName].column_type === \"varying\") value = \"%\".concat(value, \"%\");\n      const finalFilter = {\n        column: columns[columnName].field,\n        filter_type: columns[columnName].filter_type || (filter.constructor === Array ? \"interval\" : \"equal\"),\n        column_type: columns[columnName].column_type,\n        value\n      };\n      if (columns[columnName].field.constructor === Array) columns[columnName].field.forEach(field => {\n        values.push({ ...finalFilter,\n          column: field\n        });\n      });else values.push(finalFilter);\n    });\n    if (skip) return;\n    if (values.length === 1) filters.push(values[0]);else filters.push({\n      filter_type: \"or\",\n      value: values\n    });\n  });\n  return filters;\n}\nexport function mountGroupsFilterClause(tags, groupsSimpleMap) {\n  let filters = [];\n\n  if (tags && \"Visibilidade\" in tags) {\n    let filter = tags[\"Visibilidade\"];\n    let groupsIDs = [];\n\n    for (const group of filter) {\n      let groupID = groupsSimpleMap[group];\n      groupsIDs.push(Number(groupID));\n    }\n\n    filters = groupsIDs;\n  } else if (!isAdmin()) {\n    filters = getVisibilityGroups().map(Number);\n  }\n\n  return filters;\n}\nexport function cloneFilters(filters) {\n  let filtersClone = [];\n\n  for (const element of filters) {\n    filtersClone.push(element);\n  }\n\n  return filtersClone;\n}\nexport function getTimeoutConfig() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : READ;\n  let timeout = EDITION_TIMEOUT;\n\n  switch (mode) {\n    case READ:\n      timeout = READ_TIMEOUT;\n      break;\n\n    case READ:\n      timeout = LOGIN_TIMEOUT;\n      break;\n  }\n\n  return {\n    timeout: timeout\n  };\n}\n\nconst {\n  Agent\n} = require('https');\n\nexport function getRetryConfig() {\n  return {\n    httpsAgent: new Agent({\n      maxSockets: 8\n    }),\n    retries: 5,\n    shouldResetTimeout: true,\n    retryDelay: exponentialDelay,\n    retryCondition: _ => true // onRetry: (retryCount, error, requestConfig) => {(\"Tentei denovo\")}\n\n  };\n}","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/axios/AxiosUtils.js"],"names":["isAdmin","isSubgerente","getJWT","isComandoFiscal","isExternalUser","getVisibilityGroups","EDITION_TIMEOUT","READ_TIMEOUT","exponentialDelay","LOGIN_TIMEOUT","OR_FILTER","AND_FILTER","ASC","DESC","EQUAL","IS_NULL","IN","INTERVAL","GREATER","CHAR","INT","VARCHAR","FILTERS","ROLE","QUERY","GROUP_IDS","READ","WRITE","LOGIN","getRole","createBaseHttpRequestBody","data","httpRequestBody","key","value","Object","entries","createQueryHttpRequestBody","filters","orderBy","undefined","addOrderByClause","column","direction","order_by","createOrderByClause","createSimpleFilterClause","columnType","filterType","filter","createCompositeFilterClause","clauses","clause","push","createNotFilterClause","mountQueryFromTags","tags","columns","keys","columnName","length","forEach","skip","field","values","dropdown","constructor","Function","result","Array","mask","map","limit","decode","column_type","finalFilter","filter_type","mountGroupsFilterClause","groupsSimpleMap","groupsIDs","group","groupID","Number","cloneFilters","filtersClone","element","getTimeoutConfig","mode","timeout","Agent","require","getRetryConfig","httpsAgent","maxSockets","retries","shouldResetTimeout","retryDelay","retryCondition","_"],"mappings":"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","sourcesContent":["\r\n\r\nimport { isAdmin, isSubgerente } from 'common/SessionUtils'\r\nimport { getJWT } from 'common/SessionUtils'\r\nimport { isComandoFiscal } from 'common/SessionUtils'\r\nimport { isExternalUser } from 'common/SessionUtils'\r\nimport { getVisibilityGroups } from 'common/SessionUtils'\r\nimport { EDITION_TIMEOUT } from 'common/enviroment'\r\nimport { READ_TIMEOUT } from 'common/enviroment'\r\nimport { exponentialDelay } from 'axios-retry';\r\nimport { LOGIN_TIMEOUT } from 'common/enviroment'\r\n\r\nexport const OR_FILTER = \"or\"\r\nexport const AND_FILTER = \"and\"\r\n\r\nexport const ASC = \"asc\"\r\nexport const DESC = \"desc\"\r\n\r\nexport const EQUAL = \"equal\"\r\nexport const IS_NULL = \"null\"\r\nexport const IN = \"in\"\r\nexport const INTERVAL = \"interval\"\r\nexport const GREATER = \"greater\"\r\n\r\nexport const CHAR = \"char\"\r\nexport const INT = \"int\"\r\nexport const VARCHAR = \"varying\"\r\n\r\n\r\nexport const FILTERS = \"filters\"\r\nexport const ROLE = \"role\"\r\nexport const QUERY = \"query\"\r\nexport const GROUP_IDS = 'group_ids'\r\n\r\nexport const READ = 0\r\nexport const WRITE = 1\r\nexport const LOGIN = 2\r\n\r\n\r\nfunction getRole(){\r\n    if (isExternalUser() ) \r\n        return \"GAECO\"\r\n    else if (isAdmin() || isComandoFiscal() ) \r\n        return \"ADMIN\"\r\n    else if (isSubgerente() ) \r\n        return \"SUBGERENTE\"\r\n    else \r\n        return \"CICC\"\r\n}\r\n\r\nexport function createBaseHttpRequestBody(data) {\r\n    let httpRequestBody = {\r\n        'jwt_token': getJWT(),\r\n        'role': getRole()\r\n    }\r\n    if (data) {\r\n        for (const [key,value] of Object.entries(data) ){\r\n            httpRequestBody[key] = value\r\n        }\r\n    }\r\n\r\n    return {...httpRequestBody}\r\n}\r\n\r\nexport function createQueryHttpRequestBody(filters=[], orderBy=undefined) {\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n    httpRequestBody['query'] = {\r\n        \"filters\": [],\r\n    }\r\n    if (filters){\r\n        httpRequestBody['query']['filters'] = filters\r\n    }\r\n    if (orderBy){\r\n        httpRequestBody['query']['order_by'] = orderBy\r\n    }\r\n    return httpRequestBody\r\n}\r\n\r\nexport function addOrderByClause(httpRequestBody, column, direction) {\r\n    let order_by = {\r\n        \"column\": column,\r\n        \"direction\": direction\r\n    }\r\n    httpRequestBody['query']['order_by'] = order_by    \r\n}\r\n\r\n\r\nexport function createOrderByClause(column, direction) {\r\n    let order_by = {\r\n        \"column\": column,\r\n        \"direction\": direction\r\n    }\r\n    return order_by\r\n}\r\n\r\nexport function createSimpleFilterClause(column, columnType, filterType, value) {\r\n    let filter = {\r\n        \"column\": column,\r\n        \"filter_type\": filterType,\r\n        \"column_type\": columnType,\r\n        \"value\": value\r\n    }\r\n    return filter\r\n}\r\n\r\n\r\nexport function createCompositeFilterClause(column, filterType, clauses=[]) {\r\n    let filter = {\r\n        \"column\": column,\r\n        \"value\": [            \r\n        ],\r\n        \"filter_type\": filterType,\r\n        \"column_type\": \"\"\r\n    }\r\n    for (const clause of clauses){\r\n        filter['value'].push(clause)\r\n    }\r\n\r\n    return filter\r\n}\r\n\r\n\r\nexport function createNotFilterClause(column, columnType, filterType, value) {\r\n    return {\r\n        \"column\": \"\",\r\n        \"filter_type\": \"not\",\r\n        \"column_type\": \"\",\r\n        \"value\": createSimpleFilterClause(column, columnType, filterType, value)\r\n    }\r\n}\r\n\r\nexport function mountQueryFromTags(tags, columns){\r\n    let filters = []\r\n    \r\n\t\tObject.keys(tags).filter(columnName => tags[columnName].length > 0).forEach(columnName => {\r\n\t\t\tlet skip = false\r\n\r\n\t\t\tif(columns[columnName].field === \"group_id\"){\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet values = []\r\n\r\n\t\t\ttags[columnName].forEach(filter => {\r\n\t\t\t\tlet value = filter\r\n\r\n\t\t\t\tif(columns[columnName].dropdown)\r\n\t\t\t\t\tswitch(columns[columnName].dropdown[filter].constructor){\r\n\t\t\t\t\t\tcase Function:\r\n\t\t\t\t\t\t\tconst result = columns[columnName].dropdown[filter]()\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(result.constructor === Array){\r\n\t\t\t\t\t\t\t\tfilters.push(...result)\r\n\t\t\t\t\t\t\t\tskip = true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tvalues.push(result)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\tcase Object:\r\n\t\t\t\t\t\t\tvalue = columns[columnName].dropdown[filter].value\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tvalue = columns[columnName].dropdown[filter]\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif(columns[columnName].mask)\r\n\t\t\t\t\tif(filter.constructor === Array)\r\n\t\t\t\t\t\tvalue = filter.map(limit => columns[columnName].mask.decode(limit))\r\n\t\t\t\t\telse \r\n                        value = columns[columnName].mask.decode(filter)\r\n\r\n\t\t\t\tif(columns[columnName].column_type === \"varying\")\r\n\t\t\t\t\tvalue = `%${value}%`\r\n\r\n                const finalFilter = {\r\n\t\t\t\t\tcolumn: columns[columnName].field,\r\n\t\t\t\t\tfilter_type: columns[columnName].filter_type || (filter.constructor === Array ? \"interval\" : \"equal\"),\r\n\t\t\t\t\tcolumn_type: columns[columnName].column_type,\r\n\t\t\t\t\tvalue\r\n\t\t\t\t}\r\n\r\n                if(columns[columnName].field.constructor === Array)\r\n                    columns[columnName].field.forEach(field=>{\r\n\t\t\t\t        values.push({...finalFilter, column: field})\r\n                    })\r\n                else\r\n\t\t\t\t    values.push(finalFilter)\r\n\t\t\t})\r\n\r\n\t\t\tif(skip)\r\n\t\t\t\treturn\r\n\r\n\t\t\tif(values.length === 1)\r\n\t\t\t\tfilters.push(values[0])\r\n\t\t\telse\r\n\t\t\t\tfilters.push({\r\n\t\t\t\t\tfilter_type: \"or\",\r\n\t\t\t\t\tvalue: values\r\n\t\t\t\t})\r\n\t\t})\r\n\r\n\t\treturn filters\r\n}\r\n\r\nexport function mountGroupsFilterClause(tags, groupsSimpleMap) {\r\n    let filters = []\r\n\r\n    if (tags && \"Visibilidade\" in tags) {\r\n        let filter = tags[\"Visibilidade\"]\r\n        let groupsIDs = []\r\n        for (const group of filter){\r\n            let groupID = groupsSimpleMap[group]\r\n            groupsIDs.push(Number(groupID))\r\n        }\r\n        filters = groupsIDs\r\n    } else if (!isAdmin()) {\r\n        filters = getVisibilityGroups().map(Number)        \r\n    }\r\n\r\n    return filters;\r\n}\r\n\r\nexport function cloneFilters(filters) {\r\n    let filtersClone = []\r\n    for (const element of filters) {\r\n        filtersClone.push(element)\r\n    }\r\n    return filtersClone\r\n}\r\n\r\nexport function getTimeoutConfig(mode=READ){\r\n\r\n    let timeout = EDITION_TIMEOUT\r\n    switch (mode) {\r\n        case READ:\r\n            timeout = READ_TIMEOUT\r\n            break;\r\n        case READ:\r\n            timeout = LOGIN_TIMEOUT\r\n            break;\r\n      }\r\n\r\n  return { timeout: timeout }\r\n  \r\n}\r\n\r\nconst { Agent } = require('https');\r\n\r\nexport function getRetryConfig(){\r\n  return {\r\n    httpsAgent: new Agent({\r\n        maxSockets: 8\r\n    }),\r\n    retries: 5,\r\n    shouldResetTimeout: true,\r\n    retryDelay: exponentialDelay,\r\n    retryCondition: _ => true,\r\n    // onRetry: (retryCount, error, requestConfig) => {(\"Tentei denovo\")}\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}