{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\components\\\\modals\\\\WarningClosingModal.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Modal, ModalBody, ModalHeader, Button, Col, FormGroup, Input, Row, Spinner } from \"reactstrap\";\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createBaseHttpRequestBody } from \"axios/AxiosUtils\";\nimport { EDITION, ERROR, OK } from \"./ModalConsts\";\nimport { FcCancel, FcHighPriority, FcOk } from \"react-icons/fc\";\nimport { getUserLogin } from \"common/SessionUtils\";\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\";\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\nimport MessageModal from \"./MessageModal\";\nimport { isEmpty } from \"common/utils/collections\";\nimport { getNowDateTimeString } from \"common/utils/validate\";\nimport { escapeSpecialCharacters } from \"common/utils/validate\";\nimport { isSuccessStatusCode } from \"common/utils/errorTreatment\";\nimport { getValue } from \"common/utils/errorTreatment\";\nimport treatError from \"common/utils/errorTreatment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HOMOLOGATION_MODE = 0;\nexport const AWARENESS_MODE = 1;\nexport default function ClosingModal(_ref) {\n  _s();\n\n  let {\n    show,\n    toggle,\n    data,\n    refresh,\n    toggleEditionModalOff\n  } = _ref;\n  const ICON_MESSAGES = [/*#__PURE__*/_jsxDEV(FcOk, {\n    size: '6.5rem'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 26\n  }, this), /*#__PURE__*/_jsxDEV(FcCancel, {\n    size: '6.5rem'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 51\n  }, this), /*#__PURE__*/_jsxDEV(FcHighPriority, {\n    size: '6.5rem'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 80\n  }, this)];\n  const id_config = data.id_config;\n  const config_name = data.config_name;\n  const groups = data.groups;\n  const [report, setReport] = React.useState(\"\");\n  const [spinner, setSpinner] = React.useState(false);\n  const [invalid, setInvalid] = React.useState(false);\n  const [mode, setMode] = React.useState(true);\n  const [modalData, setModalData] = React.useState({});\n  const [modalType, setModalType] = React.useState(-1);\n  const [isModalActive, setIsModalActive] = React.useState(false);\n\n  const toggleModalOn = type => {\n    setModalType(type);\n    setIsModalActive(true);\n  };\n\n  const toggleModalOff = () => {\n    setModalType(MODAL_TYPE_ENUM.NONE);\n    setIsModalActive(false);\n  };\n\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const mountIconTag = () => {\n    return ICON_MESSAGES[modalData.messageType];\n  };\n\n  const handleClick = () => {\n    if (isEmpty(report)) {\n      setInvalid(true);\n      setModalData({\n        operation: EDITION,\n        messageType: ERROR,\n        message: \"Há campos obrigatórios com preenchimento pendente!\"\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    } else {\n      /*setInvalid(false)\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n      setModalActionMethods([undefined, update, undefined]);\r\n      setModalData({\r\n        message: `Tem certeza o encerramento desta Configuração de Alerta: ${config_name}?`,\r\n        operation: EDITION\r\n      })\r\n      */\n      update();\n    }\n  };\n\n  const update = () => {\n    let httpRequestBody = createBaseHttpRequestBody({\n      'config_status': STATUS_ENUM.ATUALIZADO,\n      'config_modification_date': getNowDateTimeString(),\n      'config_modification_user': getUserLogin(),\n      'config_pause_timestamp': getNowDateTimeString(),\n      'data_fechamento': getNowDateTimeString(),\n      'config_closing_report': escapeSpecialCharacters(report)\n    }); //Esta instrução abaixo tem o propósito de não zerar os grupos de visibilidade de uma configuração\n\n    httpRequestBody['group_ids'] = groups.map(Number);\n    setSpinner(true);\n    setMode(false);\n    axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/warningconfigs/update/\").concat(id_config), httpRequestBody).then(async res => {\n      if (!isSuccessStatusCode(res) || !getValue(res, 'id_config')) {\n        setModalData({\n          messageType: ERROR,\n          message: \"Falha no encerramento da Configuração de Alerta\"\n        });\n      } else {\n        setModalData({\n          messageType: OK,\n          message: \"Encerramento da Configuração de Alerta realizado com sucesso.\"\n        });\n      }\n    }).catch(err => {\n      setModalData(treatError(err, \"\", \"Falha no encerramento da Configuração de Alerta\"));\n    }).finally(() => {\n      refresh();\n      setSpinner(false);\n    });\n  };\n\n  return mode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: show,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \"Encerrar Alerta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              'textAlign': 'center',\n              margin: '10px 0px',\n              whiteSpace: 'pre-line'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Confirma o encerramento desta Configura\\xE7\\xE3o de Alerta: \".concat(config_name, \"?\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '50px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Observa\\xE7\\xF5es:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                type: \"textarea\",\n                name: \"text\",\n                id: \"homologation_warning\",\n                maxLength: 2048,\n                invalid: invalid && isEmpty(report),\n                style: {\n                  paddingTop: 0,\n                  paddingLeft: 5\n                },\n                onChange: e => {\n                  setReport(e.target.value);\n                },\n                value: report\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        row: true,\n        className: \"text-center\",\n        style: {\n          marginTop: '25px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: () => {\n              handleClick();\n            },\n            children: \"Sim\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: toggle,\n            children: \"N\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), modalType === MODAL_TYPE_ENUM.MESSAGE && /*#__PURE__*/_jsxDEV(MessageModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: show,\n    toggle: toggle,\n    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n      toggle: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      style: {\n        'textAlign': 'center'\n      },\n      children: spinner ? /*#__PURE__*/_jsxDEV(Spinner, {\n        color: \"info\",\n        style: {\n          width: \"4.0rem\",\n          height: \"4.0rem\",\n          margin: '4.0rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [mountIconTag(), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: modalData.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ClosingModal, \"P3ZscM12wcbRaZOUBhNLoUkwLYE=\");\n\n_c = ClosingModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClosingModal\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/modals/WarningClosingModal.js"],"names":["React","Modal","ModalBody","ModalHeader","Button","Col","FormGroup","Input","Row","Spinner","axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createBaseHttpRequestBody","EDITION","ERROR","OK","FcCancel","FcHighPriority","FcOk","getUserLogin","STATUS_ENUM","MODAL_TYPE_ENUM","MessageModal","isEmpty","getNowDateTimeString","escapeSpecialCharacters","isSuccessStatusCode","getValue","treatError","HOMOLOGATION_MODE","AWARENESS_MODE","ClosingModal","show","toggle","data","refresh","toggleEditionModalOff","ICON_MESSAGES","id_config","config_name","groups","report","setReport","useState","spinner","setSpinner","invalid","setInvalid","mode","setMode","modalData","setModalData","modalType","setModalType","isModalActive","setIsModalActive","toggleModalOn","type","toggleModalOff","NONE","axiosRetryProxy","create","mountIconTag","messageType","handleClick","operation","message","MESSAGE","update","httpRequestBody","ATUALIZADO","map","Number","patch","apiAddress","then","res","catch","err","finally","margin","whiteSpace","marginTop","paddingTop","paddingLeft","e","target","value","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal, ModalBody, ModalHeader,\r\n  Button, Col, FormGroup,\r\n  Input, Row, Spinner\r\n} from \"reactstrap\";\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\nimport { createBaseHttpRequestBody } from \"axios/AxiosUtils\";\r\nimport { EDITION, ERROR, OK } from \"./ModalConsts\";\r\nimport { FcCancel, FcHighPriority, FcOk } from \"react-icons/fc\";\r\nimport { getUserLogin } from \"common/SessionUtils\";\r\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\";\r\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\r\nimport MessageModal from \"./MessageModal\";\r\nimport { isEmpty } from \"common/utils/collections\";\r\nimport { getNowDateTimeString } from \"common/utils/validate\";\r\nimport { escapeSpecialCharacters } from \"common/utils/validate\";\r\nimport { isSuccessStatusCode } from \"common/utils/errorTreatment\";\r\nimport { getValue } from \"common/utils/errorTreatment\";\r\nimport treatError from \"common/utils/errorTreatment\";\r\n\r\nexport const HOMOLOGATION_MODE = 0\r\nexport const AWARENESS_MODE = 1\r\n\r\nexport default function ClosingModal({ show, toggle, data, refresh, toggleEditionModalOff  }) {\r\n\r\n  const ICON_MESSAGES = [<FcOk size={'6.5rem'}/>, <FcCancel size={'6.5rem'}/>, <FcHighPriority size={'6.5rem'}/>]\r\n\r\n\r\n  const id_config = data.id_config\r\n  const config_name = data.config_name\r\n  const groups = data.groups\r\n  \r\n  const [report, setReport] = React.useState(\"\");\r\n  const [spinner, setSpinner] = React.useState(false)\r\n  const [invalid, setInvalid] = React.useState(false)\r\n  const [mode, setMode] = React.useState(true);\r\n  const [modalData, setModalData] = React.useState({});\r\n  const [modalType, setModalType] = React.useState(-1);\r\n  const [isModalActive, setIsModalActive] = React.useState(false);\r\n  const toggleModalOn = (type) => { setModalType(type); setIsModalActive(true); };\r\n  const toggleModalOff = () => { setModalType(MODAL_TYPE_ENUM.NONE); setIsModalActive(false); }\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n\r\n  const mountIconTag = () => {\r\n    return ICON_MESSAGES[modalData.messageType]\r\n  }\r\n\r\n  const handleClick = () => {\r\n\r\n    if (isEmpty(report)){\r\n      setInvalid(true)\r\n      setModalData({ operation: EDITION, messageType: ERROR, message: \"Há campos obrigatórios com preenchimento pendente!\" });\r\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n    } else {\r\n      /*setInvalid(false)\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n      setModalActionMethods([undefined, update, undefined]);\r\n      setModalData({\r\n        message: `Tem certeza o encerramento desta Configuração de Alerta: ${config_name}?`,\r\n        operation: EDITION\r\n      })\r\n      */\r\n      \r\n      update()\r\n    }\r\n\r\n  }\r\n\r\n  const update = () => {\r\n\r\n    let httpRequestBody = createBaseHttpRequestBody({\r\n      'config_status': STATUS_ENUM.ATUALIZADO, \r\n      'config_modification_date': getNowDateTimeString(), \r\n      'config_modification_user': getUserLogin(),\r\n      'config_pause_timestamp':  getNowDateTimeString(),\r\n      'data_fechamento': getNowDateTimeString(),\r\n      'config_closing_report': escapeSpecialCharacters(report),\r\n    })\r\n    \r\n    //Esta instrução abaixo tem o propósito de não zerar os grupos de visibilidade de uma configuração\r\n    httpRequestBody['group_ids'] = groups.map(Number)\r\n\r\n    setSpinner(true)\r\n    setMode(false)\r\n\r\n    axiosRetryProxy.patch(`${env.apiAddress}/warningconfigs/update/${id_config}`, httpRequestBody)\r\n      .then(async res => {\r\n        if (!isSuccessStatusCode(res) || !getValue(res, 'id_config')) {\r\n          setModalData({ messageType: ERROR, message: \"Falha no encerramento da Configuração de Alerta\" });\r\n        } else {\r\n          setModalData({ messageType: OK, message: \"Encerramento da Configuração de Alerta realizado com sucesso.\" });\r\n        }\r\n      }).catch(err => {\r\n        setModalData(treatError(err, \"\", \"Falha no encerramento da Configuração de Alerta\"));\r\n      }).finally(() => {\r\n        refresh()\r\n        setSpinner(false)\r\n      })\r\n  }\r\n\r\n\r\n  return (\r\n    (mode) ? \r\n    <>\r\n      <Modal isOpen={show} toggle={toggle} >\r\n      <ModalHeader toggle={toggle}>Encerrar Alerta</ModalHeader>\r\n        <ModalBody>\r\n          <div>\r\n          <h3 style={{ 'textAlign': 'center', margin: '10px 0px', whiteSpace: 'pre-line' }}>\r\n          <b>{`Confirma o encerramento desta Configuração de Alerta: ${config_name}?`}</b>\r\n                </h3>\r\n                </div>\r\n          <div style={{ marginTop: '50px' }}>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <b>Observações:</b>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <Input\r\n                  type=\"textarea\"\r\n                  name=\"text\"\r\n                  id=\"homologation_warning\"\r\n                  maxLength={2048}\r\n                  invalid={invalid && isEmpty(report)}\r\n                  style={{ paddingTop: 0, paddingLeft: 5 }}\r\n                  onChange={e => { setReport(e.target.value) }}\r\n                  value={report}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </ModalBody>\r\n        <FormGroup row className=\"text-center\" style={{ marginTop: '25px' }}>\r\n          <Col>\r\n            <Button color='primary' onClick={() => { handleClick() }}>Sim</Button>\r\n          </Col>\r\n          <Col>\r\n            <Button color='danger' onClick={toggle}>Não</Button>\r\n          </Col>\r\n        </FormGroup>\r\n      </Modal>\r\n      {modalType === MODAL_TYPE_ENUM.MESSAGE && <MessageModal show={isModalActive} toggle={toggleModalOff} data={modalData} spinner={spinner} />}\r\n    </>\r\n    : \r\n      <Modal isOpen={show} toggle={toggle}>\r\n          <ModalHeader toggle={toggle}></ModalHeader>\r\n          <ModalBody style={{ 'textAlign': 'center' }}>\r\n            {\r\n              spinner ?\r\n                <Spinner color=\"info\" style={{ width: \"4.0rem\", height: \"4.0rem\", margin: '4.0rem' }} />\r\n                :\r\n                  <div>\r\n                    {mountIconTag()}\r\n                    <h3>{modalData.message}</h3>                    \r\n                  </div>            \r\n            }\r\n          </ModalBody>\r\n        </Modal>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}