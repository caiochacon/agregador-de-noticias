{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\context\\\\GroupsContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport STATUS_ENUM from 'common/enumerators/StatusEnum';\nimport GROUP_TYPE_ENUM from \"common/enumerators/GroupTypeEnum\";\nimport { isAdmin, isGaeco, getVisibilityGroups } from 'common/SessionUtils';\nimport { createQueryHttpRequestBody } from 'axios/AxiosUtils';\nimport { createSimpleFilterClause } from \"axios/AxiosUtils\";\nimport { createOrderByClause } from \"axios/AxiosUtils\";\nimport { createCompositeFilterClause, createNotFilterClause } from \"axios/AxiosUtils\";\nimport { OR_FILTER } from \"axios/AxiosUtils\";\nimport { isDNIT } from \"common/SessionUtils\";\nimport { isPRF } from \"common/SessionUtils\";\nimport GROUPS_ENUM from \"common/enumerators/GroupsEnum\";\nimport { isEmpty } from \"common/utils/collections\";\nimport { isLoggedIn } from \"common/SessionUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GroupsContext = /*#__PURE__*/React.createContext();\nexport function GroupsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [groupsData, setGroupsData] = React.useState({});\n  const [groupsDataMap, setGroupsDataMap] = React.useState({}); // Este mapa possui como chave o id e o restante dos dados como valor. É usado na tela CRUD pa\n\n  const [groupsSimpleMap, setGroupsSimpleMap] = React.useState({}); // Este mapa possui como chave o nome e valor o id. É usado para compor os filtros de visibilidade. Este mapa apenas lista os grupos que o usário possui visibilidade. \n\n  const [groupsNameMap, setGroupsNameMap] = React.useState({}); //Este mapa possui a lista de todos os grupos e seus nomes. DIFERENTEMENTE DO MAPA groupsSimpleMap, ELE POSSUI TODOS OS GRUPOS. \n\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n  React.useEffect(() => {\n    if (isLoggedIn()) {\n      if (isEmpty(groupsDataMap)) {\n        fetchGroupsData();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const getGroupSupervisorData = fiscal_action_auditors => {\n    let fiscalArray = Object.values(fiscal_action_auditors);\n    let firstOneDepartment = fiscalArray[0]['user_department'];\n    let group = getGroupRegistry(firstOneDepartment);\n    let group_supervisior_data = group['group_supervisor_data'];\n    if (!isEmpty(group_supervisior_data)) return group_supervisior_data[0];else {\n      return null;\n    }\n  };\n\n  function mountGroupsNameText(groupsID) {\n    let groups = [];\n\n    if (groupsID) {\n      for (const groupID of groupsID) {\n        var groupData = getGroupRegistry(groupID);\n        var groupName = groupsNameMap[groupID];\n\n        if (groupName || groupData && groupData['group_name']) {\n          groups.push(groupName);\n        } else {\n          groups.push(groupID);\n        }\n      }\n    }\n\n    return groups.join(\", \");\n  }\n\n  const getGroupOwnerData = fiscal_action_auditors => {\n    let fiscalArray = Object.values(fiscal_action_auditors);\n    let firstOneDepartment = fiscalArray[0]['user_department'];\n    let group = getGroupRegistry(firstOneDepartment);\n    let groupChief = group['group_owner_data'][0];\n    return groupChief;\n  };\n\n  const getMonitoringGroupOwner = () => {\n    let monitoringGroup = getGroupRegistry(GROUPS_ENUM.MONITORAMENTO);\n\n    if (isEmpty(monitoringGroup)) {\n      return;\n    }\n\n    return monitoringGroup['group_owner_data'][0];\n  };\n\n  const getGroupName = id => {\n    var groupData = getGroupRegistry(id);\n\n    if (groupData && groupData['group_name']) {\n      return groupData['group_name'];\n    } else {\n      //console.log(\"ERROR:\", \"GROUP NOT REGISTERED OR CONFIDENTIAL\", id )\n      return id;\n    }\n  };\n\n  const getGroupRegistry = id => {\n    if (!groupsDataMap || Object.keys(groupsDataMap).length === 0) {\n      fetchGroupsData();\n    }\n\n    return groupsDataMap[id.toString()];\n  };\n\n  const fetchGroupsName = async () => {\n    var groups = {};\n    let filters = [createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO)];\n    let orderBy = createOrderByClause(\"group_name\", \"asc\");\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy);\n    await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/group/read_group_names\"), httpRequestBody).then(res => {\n      if (res.data) {\n        for (const data of res.data) {\n          groups[data['group_id']] = data['group_name'];\n        }\n      }\n\n      setGroupsNameMap(groups);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const fetchGroupsData = async () => {\n    let filters = [createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO)];\n    let orderBy = createOrderByClause(\"group_name\", \"asc\");\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy);\n\n    if (!isAdmin()) {\n      let orClauses = [];\n      orClauses.push(createSimpleFilterClause(\"group_id\", \"int\", \"in\", getVisibilityGroups().map(Number)));\n\n      if (isGaeco()) {\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO));\n      } else if (isDNIT()) {\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT));\n      } else if (isPRF()) {\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF));\n      } else {\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL));\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.CACTO));\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO));\n      }\n\n      let groupsFilter = createCompositeFilterClause(\"group_id\", OR_FILTER, orClauses);\n      httpRequestBody['query']['filters'].push(groupsFilter);\n    }\n\n    if (!isGaeco()) {\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO)); //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS GAECO      \n    }\n\n    if (!isDNIT()) {\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT)); //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS DNIT      \n    }\n\n    if (!isPRF()) {\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF)); //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS PRF      \n    }\n\n    await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/group/read_all\"), httpRequestBody).then(res => {\n      setGroupsData(res.data);\n      let newGroupMap = {};\n      let newGroupSimpleMap = {};\n\n      for (var i = 0; i < res.data.length; i++) {\n        newGroupMap[res.data[i]['group_id']] = res.data[i];\n\n        if (!isAdmin() && res.data[i]['group_type'] === GROUP_TYPE_ENUM.SIGILOSO) {\n          continue;\n        }\n\n        newGroupSimpleMap[res.data[i]['group_name']] = res.data[i]['group_id'];\n      }\n\n      setGroupsDataMap(newGroupMap);\n      setGroupsSimpleMap(newGroupSimpleMap);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GroupsContext.Provider, {\n    value: {\n      groupsData,\n      groupsSimpleMap,\n      groupsDataMap,\n      groupsNameMap,\n      setGroupsData,\n      fetchGroupsData,\n      fetchGroupsName,\n      getGroupRegistry,\n      getGroupName,\n      mountGroupsNameText,\n      getGroupOwnerData,\n      getGroupSupervisorData,\n      getMonitoringGroupOwner\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GroupsProvider, \"mfPawDtRVeO83QKqYOSwgtRd+v4=\");\n\n_c = GroupsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupsProvider\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/context/GroupsContext.js"],"names":["React","axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","STATUS_ENUM","GROUP_TYPE_ENUM","isAdmin","isGaeco","getVisibilityGroups","createQueryHttpRequestBody","createSimpleFilterClause","createOrderByClause","createCompositeFilterClause","createNotFilterClause","OR_FILTER","isDNIT","isPRF","GROUPS_ENUM","isEmpty","isLoggedIn","GroupsContext","createContext","GroupsProvider","children","groupsData","setGroupsData","useState","groupsDataMap","setGroupsDataMap","groupsSimpleMap","setGroupsSimpleMap","groupsNameMap","setGroupsNameMap","axiosRetryProxy","create","useEffect","fetchGroupsData","getGroupSupervisorData","fiscal_action_auditors","fiscalArray","Object","values","firstOneDepartment","group","getGroupRegistry","group_supervisior_data","mountGroupsNameText","groupsID","groups","groupID","groupData","groupName","push","join","getGroupOwnerData","groupChief","getMonitoringGroupOwner","monitoringGroup","MONITORAMENTO","getGroupName","id","keys","length","toString","fetchGroupsName","filters","CRIADO","orderBy","httpRequestBody","post","apiAddress","then","res","data","catch","err","console","log","orClauses","map","Number","GAECO","DNIT","PRF","INSTITUCIONAL","CACTO","SIGILOSO","groupsFilter","newGroupMap","newGroupSimpleMap","i"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment'\r\nimport STATUS_ENUM from 'common/enumerators/StatusEnum'\r\nimport GROUP_TYPE_ENUM from \"common/enumerators/GroupTypeEnum\";\r\nimport { isAdmin, isGaeco, getVisibilityGroups } from 'common/SessionUtils';\r\nimport { createQueryHttpRequestBody } from 'axios/AxiosUtils';\r\nimport { createSimpleFilterClause } from \"axios/AxiosUtils\";\r\nimport { createOrderByClause } from \"axios/AxiosUtils\";\r\nimport { createCompositeFilterClause, createNotFilterClause } from \"axios/AxiosUtils\";\r\nimport { OR_FILTER } from \"axios/AxiosUtils\";\r\nimport { isDNIT } from \"common/SessionUtils\";\r\nimport { isPRF } from \"common/SessionUtils\";\r\nimport GROUPS_ENUM from \"common/enumerators/GroupsEnum\";\r\nimport { isEmpty } from \"common/utils/collections\";\r\nimport { isLoggedIn } from \"common/SessionUtils\";\r\n\r\n\r\nexport const GroupsContext = React.createContext();\r\n\r\nexport function GroupsProvider({ children }) {\r\n  const [groupsData, setGroupsData] = React.useState({});\r\n\r\n  const [groupsDataMap, setGroupsDataMap] = React.useState({}); // Este mapa possui como chave o id e o restante dos dados como valor. É usado na tela CRUD pa\r\n  const [groupsSimpleMap, setGroupsSimpleMap] = React.useState({}); // Este mapa possui como chave o nome e valor o id. É usado para compor os filtros de visibilidade. Este mapa apenas lista os grupos que o usário possui visibilidade. \r\n  const [groupsNameMap, setGroupsNameMap] = React.useState({}); //Este mapa possui a lista de todos os grupos e seus nomes. DIFERENTEMENTE DO MAPA groupsSimpleMap, ELE POSSUI TODOS OS GRUPOS. \r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      if (isEmpty(groupsDataMap)) {\r\n        fetchGroupsData()\r\n      }\r\n    }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  \r\n  const getGroupSupervisorData = (fiscal_action_auditors) => {\r\n    let fiscalArray = Object.values(fiscal_action_auditors)\r\n    let firstOneDepartment = fiscalArray[0]['user_department']\r\n    let group = getGroupRegistry(firstOneDepartment)\r\n    \r\n    let group_supervisior_data = group['group_supervisor_data']\r\n\r\n    if (!isEmpty(group_supervisior_data) )\r\n      return group_supervisior_data[0]\r\n    else {\r\n      return null\r\n    }    \r\n  }\r\n\r\n  function mountGroupsNameText(groupsID) {\r\n\r\n    let groups = []\r\n\r\n    if (groupsID) {\r\n      for (const groupID of groupsID) {\r\n\r\n        var groupData = getGroupRegistry(groupID)\r\n        var groupName = groupsNameMap[groupID]\r\n\r\n        if ((groupName || (groupData && groupData['group_name']))) {\r\n          groups.push(groupName)\r\n        } else {\r\n          groups.push(groupID)\r\n        }\r\n      }\r\n    }\r\n    return groups.join(\", \")\r\n  }\r\n\r\n\r\n  const getGroupOwnerData = (fiscal_action_auditors) => {\r\n    let fiscalArray = Object.values(fiscal_action_auditors)\r\n    let firstOneDepartment = fiscalArray[0]['user_department']\r\n    let group = getGroupRegistry(firstOneDepartment)\r\n    let groupChief = group['group_owner_data'][0]\r\n    return groupChief\r\n  }\r\n\r\n  const getMonitoringGroupOwner = () => {\r\n    let monitoringGroup = getGroupRegistry(GROUPS_ENUM.MONITORAMENTO)\r\n    if (isEmpty(monitoringGroup)) {\r\n      return\r\n    }\r\n\r\n    return monitoringGroup['group_owner_data'][0]\r\n  }\r\n\r\n\r\n  const getGroupName = (id) => {\r\n    var groupData = getGroupRegistry(id)\r\n    if (groupData && groupData['group_name']) {\r\n      return groupData['group_name'];\r\n    } else {\r\n      //console.log(\"ERROR:\", \"GROUP NOT REGISTERED OR CONFIDENTIAL\", id )\r\n      return id;\r\n    }\r\n  }\r\n\r\n  const getGroupRegistry = (id) => {\r\n    if (!groupsDataMap || Object.keys(groupsDataMap).length === 0) {\r\n      fetchGroupsData()\r\n    }\r\n\r\n    return groupsDataMap[id.toString()];\r\n  };\r\n\r\n\r\n\r\n  const fetchGroupsName = async () => {\r\n\r\n    var groups = {}\r\n    let filters = [createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO)]\r\n    let orderBy = createOrderByClause(\"group_name\", \"asc\")\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy)\r\n\r\n\r\n    await axiosRetryProxy.post(`${env.apiAddress}/group/read_group_names`, httpRequestBody).then(res => {\r\n\r\n      if (res.data) {\r\n        for (const data of res.data) {\r\n          groups[data['group_id']] = data['group_name']\r\n        }\r\n      }\r\n\r\n      setGroupsNameMap(groups)\r\n    })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  };\r\n\r\n\r\n  const fetchGroupsData = async () => {\r\n\r\n\r\n    let filters = [createSimpleFilterClause(\"group_status\", \"int\", \"equal\", STATUS_ENUM.CRIADO)]\r\n    let orderBy = createOrderByClause(\"group_name\", \"asc\")\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy)\r\n\r\n    if (!isAdmin()) {\r\n      let orClauses = []\r\n      orClauses.push(createSimpleFilterClause(\"group_id\", \"int\", \"in\", getVisibilityGroups().map(Number)))\r\n      if (isGaeco()) {\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO))\r\n      } else if (isDNIT()) {\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT))\r\n      } else if (isPRF()) {\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF))\r\n      } else {\r\n\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL))\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.CACTO))\r\n        orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO))\r\n      }\r\n\r\n\r\n      let groupsFilter = createCompositeFilterClause(\"group_id\", OR_FILTER, orClauses)\r\n      httpRequestBody['query']['filters'].push(groupsFilter)\r\n\r\n    }\r\n\r\n    if (!isGaeco()) {\r\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.GAECO)) //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS GAECO      \r\n    }\r\n\r\n    if (!isDNIT()) {\r\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.DNIT)) //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS DNIT      \r\n    }\r\n\r\n    if (!isPRF()) {\r\n      filters.push(createNotFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.PRF)) //ADMIN NÂO DEVE TER ACESSO AOS GRUPOS PRF      \r\n    }\r\n\r\n    await axiosRetryProxy.post(`${env.apiAddress}/group/read_all`, httpRequestBody).then(res => {\r\n\r\n      setGroupsData(res.data)\r\n      let newGroupMap = {}\r\n      let newGroupSimpleMap = {}\r\n      for (var i = 0; i < res.data.length; i++) {\r\n        newGroupMap[res.data[i]['group_id']] = res.data[i]\r\n\r\n        if (!isAdmin() && res.data[i]['group_type'] ===  GROUP_TYPE_ENUM.SIGILOSO) {\r\n          continue\r\n        } \r\n        newGroupSimpleMap[res.data[i]['group_name']] = res.data[i]['group_id']       \r\n      }\r\n      setGroupsDataMap(newGroupMap)\r\n      setGroupsSimpleMap(newGroupSimpleMap)\r\n\r\n    })\r\n      .catch(err => {\r\n        console.log(err)\r\n\r\n      })\r\n  };\r\n\r\n\r\n  return (\r\n    <GroupsContext.Provider value={{ groupsData, groupsSimpleMap, groupsDataMap, groupsNameMap, \r\n      setGroupsData, fetchGroupsData, fetchGroupsName, getGroupRegistry, getGroupName, mountGroupsNameText,\r\n      getGroupOwnerData, getGroupSupervisorData , getMonitoringGroupOwner }}>\r\n      {children}\r\n    </GroupsContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}