{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\components\\\\modals\\\\NotificationModal\\\\panels\\\\HomologationPanel.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Row, Input, Button, Col } from 'reactstrap';\nimport axios from \"axios\";\nimport env from \"common/enviroment\";\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport AuditorSimpleInput from \"components/auditor/AuditorSimpleInput\";\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\nimport useToggle from \"common/hooks/useToogle\";\nimport { HOMOLOGATION_AUDITOR } from \"common/model/Notification\";\nimport { HOMOLOGATION_AUDITOR_ID } from \"common/model/Notification\";\nimport { HOMOLOGATION_AUDITOR_NAME } from \"common/model/Notification\";\nimport { FISCAL_NOTIFICATION_STATUS } from \"common/model/Notification\";\nimport { HOMOLOGATION_DATE } from \"common/model/Notification\";\nimport { HOMOLOGATION_REPORT } from \"common/model/Notification\";\nimport { EDITION } from \"components/modals/ModalConsts\";\nimport { HOMOLOGATION_MODE, AWARENESS_MODE, SUPERVISION_MODE } from \"components/modals/HomologationModal\";\nimport NOTIFICATION_STATUS_ENUM from \"common/enumerators/NotificationStatus\";\nimport { createBaseHttpRequestBody } from \"axios/AxiosUtils\";\nimport { getUserLogin } from \"common/SessionUtils\";\nimport { createSimpleFilterClause } from \"axios/AxiosUtils\";\nimport { createNotFilterClause } from \"axios/AxiosUtils\";\nimport { VEHICLE_PLATE } from \"common/model/Notification\";\nimport { ID_CONFIG } from \"common/model/Notification\";\nimport { FISCAL_NOTIFICATION_PARENT_ID } from \"common/model/Notification\";\nimport { ID } from \"common/model/Notification\";\nimport { AWARENESS_AUDITOR } from \"common/model/Notification\";\nimport { AWARENESS_DATE } from \"common/model/Notification\";\nimport { SUPERVISION_AUDITOR } from \"common/model/Notification\";\nimport { SUPERVISION_DATE } from \"common/model/Notification\";\nimport { getHomologationPendingStatusCodes } from \"common/enumerators/NotificationStatus\";\nimport { ERROR } from \"components/modals/ModalConsts\";\nimport { OK } from \"components/modals/ModalConsts\";\nimport { Notification } from \"common/model/Notification\";\nimport { isAdmin } from \"common/SessionUtils\";\nimport { isSubgerente } from \"common/SessionUtils\";\nimport ConfirmationModal from \"components/modals/ConfirmationModal \";\nimport MessageModal from \"components/modals/MessageModal\";\nimport { SUPERVISION_REPORT } from \"common/model/Notification\";\nimport { SUPERVISION_AUDITOR_ID } from \"common/model/Notification\";\nimport { SUPERVISION_AUDITOR_NAME } from \"common/model/Notification\";\nimport { getUserName } from \"common/SessionUtils\";\nimport { getUserRegistrationID } from \"common/SessionUtils\";\nimport { AWARENESS_REPORT } from \"common/model/Notification\";\nimport { AWARENESS_AUDITOR_ID } from \"common/model/Notification\";\nimport { AWARENESS_AUDITOR_NAME } from \"common/model/Notification\";\nimport { getNowDateTimeString } from \"common/utils/validate\";\nimport { treatNullValue } from \"common/utils/collections\";\nimport { calculateComponentHeight } from \"common/utils/forms\";\nimport { manageInputTables } from \"common/utils/collections\";\nimport { isEmpty } from \"common/utils/collections\";\nimport { escapeSpecialCharacters } from \"common/utils/validate\";\nimport { isSuccessStatusCode } from \"common/utils/errorTreatment\";\nimport { getValue } from \"common/utils/errorTreatment\";\nimport treatError from \"common/utils/errorTreatment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function HomologationPanel(_ref) {\n  _s();\n\n  let {\n    data,\n    setData,\n    homologationType,\n    refresh,\n    mode,\n    setMode\n  } = _ref;\n  const [formData, setFormData] = React.useState({});\n  const [spinner, setSpinner] = React.useState(false);\n  const [enabled, setEnabled] = React.useState(true); // Esta variável serve para desabilitar os botões de edição no caso de sucesso. \n\n  const [editionMode, toggleEditionMode] = useToggle(false);\n  const {\n    modalData,\n    setModalData,\n    modalActionMethods,\n    isModalActive,\n    modalType,\n    toggleModalOn,\n    toggleModalOff,\n    toogleConfirmationModalOn\n  } = useModalWithData();\n  const LABELS = [{\n    label: \"Homologação\",\n    button_style: {\n      height: \"2.5rem\",\n      width: \"10rem\",\n      marginTop: \"10px\"\n    },\n    button_class: 'btn btn-success',\n    button_label: \"Homologar\",\n    question: \"Confirma a homologação da ação fiscal?\",\n    error: \"Falha no registro da homologação\",\n    success: \"Homologação da notificação realizada com sucesso!\"\n  }, {\n    label: \"Declaração de Ciência\",\n    button_style: {\n      height: \"2.5rem\",\n      width: \"10rem\",\n      marginTop: \"10px\"\n    },\n    button_class: 'btn btn-warning',\n    button_label: \"Declarar Ciência\",\n    question: \"Confirma a declaração de ciência?\",\n    error: \"Falha no registro da declaração de ciência\",\n    success: \"Declaração de ciência realizada com sucesso!\"\n  }, {\n    label: \"Declaração de Supervisão\",\n    button_style: {\n      height: \"2.5rem\",\n      width: \"10rem\",\n      marginTop: \"10px\"\n    },\n    button_class: 'btn btn-info',\n    button_label: \"Declarar Supervisão\",\n    question: \"Confirma a supervisão da ação fiscal?\",\n    error: \"Falha no registro da declaração de supervisão\",\n    success: \"Supervisão da ação fiscal realizada com sucesso!\"\n  }];\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n  const DATE = 'date';\n  const REPORT = 'report';\n  const USER = 'user';\n  const USER_ID = 'user_id';\n  const USER_NAME = 'user_name';\n  const notification = data;\n  React.useEffect(() => {\n    loadFormData(); // eslint-disable-next-line react-hooks/exhaustive-deps  \n  }, [notification]);\n\n  const toggle = enabled => {\n    if (homologationType === HOMOLOGATION_MODE) {\n      setMode({ ...mode,\n        homologation: enabled\n      });\n    } else if (homologationType === AWARENESS_MODE) {\n      setMode({ ...mode,\n        awareness: enabled\n      });\n    } else if (homologationType === SUPERVISION_MODE) {\n      setMode({ ...mode,\n        supervision: enabled\n      });\n    }\n\n    toggleEditionMode();\n  };\n\n  const loadFormData = () => {\n    let newFormData = {};\n\n    if (homologationType === HOMOLOGATION_MODE) {\n      newFormData = mountFormData(HOMOLOGATION_DATE, HOMOLOGATION_REPORT, HOMOLOGATION_AUDITOR, HOMOLOGATION_AUDITOR_NAME, HOMOLOGATION_AUDITOR_ID);\n    } else if (homologationType === SUPERVISION_MODE) {\n      newFormData = mountFormData(SUPERVISION_DATE, SUPERVISION_REPORT, SUPERVISION_AUDITOR, SUPERVISION_AUDITOR_NAME, SUPERVISION_AUDITOR_ID);\n    } else if (homologationType === AWARENESS_MODE) {\n      newFormData = mountFormData(AWARENESS_DATE, AWARENESS_REPORT, AWARENESS_AUDITOR, AWARENESS_AUDITOR_NAME, AWARENESS_AUDITOR_ID);\n    }\n\n    setFormData(newFormData);\n  };\n\n  const mountFormData = (DATE_KEY, REPORT_KEY, USER_KEY, USER_NAME_KEY, USER_ID_KEY) => {\n    let newFormData = {};\n    newFormData[DATE] = notification[DATE_KEY];\n    newFormData[REPORT] = notification[REPORT_KEY];\n    newFormData[USER] = notification[USER_KEY];\n    newFormData[USER_ID] = notification[USER_ID_KEY];\n    newFormData[USER_NAME] = notification[USER_NAME_KEY];\n    return newFormData;\n  };\n\n  const mountParentData = (DATE_KEY, REPORT_KEY, USER_KEY, USER_NAME_KEY, USER_ID_KEY, STATUS) => {\n    notification[DATE_KEY] = formData[DATE];\n    notification[REPORT_KEY] = formData[REPORT];\n    notification[USER_KEY] = formData[USER];\n    notification[USER_ID_KEY] = formData[USER_ID];\n    notification[USER_NAME_KEY] = formData[USER_NAME];\n    notification[FISCAL_NOTIFICATION_STATUS] = STATUS;\n  };\n\n  const saveParentData = () => {\n    if (homologationType === HOMOLOGATION_MODE) {\n      mountParentData(HOMOLOGATION_DATE, HOMOLOGATION_REPORT, HOMOLOGATION_AUDITOR, HOMOLOGATION_AUDITOR_NAME, HOMOLOGATION_AUDITOR_ID, NOTIFICATION_STATUS_ENUM.HOMOLOGADA);\n    } else if (homologationType === SUPERVISION_MODE) {\n      mountParentData(SUPERVISION_DATE, SUPERVISION_REPORT, SUPERVISION_AUDITOR, SUPERVISION_AUDITOR_NAME, SUPERVISION_AUDITOR_ID);\n    } else if (homologationType === AWARENESS_MODE) {\n      mountParentData(AWARENESS_DATE, AWARENESS_REPORT, AWARENESS_AUDITOR, AWARENESS_AUDITOR_NAME, AWARENESS_AUDITOR_ID);\n    }\n\n    setData({ ...notification\n    });\n  };\n\n  const handleHomologationButtonClick = () => {\n    //Se não houver data definida, deve ser setado o timestamp atual\"\n    if (isEmpty(formData[DATE])) {\n      formData[DATE] = getNowDateTimeString();\n      setFormData({ ...formData\n      });\n    } // Se o usuário atual é diferente daquele alocado como responsável pela homologação, deve ser setado o usuário logado\n\n\n    if (!isEmpty(formData[USER]) && formData[USER] !== getUserLogin()) {\n      formData[USER] = getUserLogin();\n      formData[USER_ID] = getUserRegistrationID();\n      formData[USER_NAME] = getUserName();\n      setFormData({ ...formData\n      });\n    }\n\n    toggle(true);\n  };\n\n  const handleSaveClick = () => {\n    if (homologationType === HOMOLOGATION_MODE) {\n      updateHomologationStatus();\n    } else if (homologationType === AWARENESS_MODE) {\n      updateAwarenessStatus();\n    } else if (homologationType === SUPERVISION_MODE) {\n      updateSupervisionStatus();\n    }\n  };\n\n  const handleCancelClick = () => {\n    loadFormData();\n    toggle(false);\n  };\n\n  const openConfirmationModal = () => {\n    let data = {\n      message: LABELS[homologationType]['question'],\n      operation: EDITION,\n      id: formData['id']\n    };\n    toogleConfirmationModalOn(data, () => {\n      handleSaveClick();\n    });\n  };\n\n  const isEnabled = () => {\n    let notificationObj = new Notification(notification);\n\n    if (!enabled) {\n      return false;\n    }\n\n    if (homologationType === HOMOLOGATION_MODE) {\n      if (notificationObj.isHomologationPending()) {\n        return isAdmin() || isSubgerente() && getUserLogin() === formData[USER];\n      }\n    } else if (homologationType === SUPERVISION_MODE) {\n      if (notificationObj.isSupervisionPending()) {\n        return isAdmin() || isSubgerente() && getUserLogin() === formData[USER];\n      }\n    } else if (homologationType === AWARENESS_MODE) {\n      if (notificationObj.isAwarenessPending()) {\n        return isAdmin() || getUserLogin() === formData[USER];\n      }\n    }\n\n    return false;\n  };\n\n  const updateHomologationStatus = () => {\n    let newStatus = NOTIFICATION_STATUS_ENUM.HOMOLOGADA;\n    let status = notification[FISCAL_NOTIFICATION_STATUS];\n\n    if (status === NOTIFICATION_STATUS_ENUM.SEM_COMANDO) {\n      newStatus = NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA;\n    }\n\n    let httpRequestBody = createBaseHttpRequestBody({\n      fiscal_notification_modification_date: getNowDateTimeString(),\n      fiscal_action_homologation_date: formData[DATE],\n      fiscal_action_homologation_auditor: getUserLogin(),\n      fiscal_action_homologation_report: escapeSpecialCharacters(formData[REPORT]),\n      fiscal_notification_status: newStatus\n    });\n    update(httpRequestBody, HOMOLOGATION_MODE);\n  };\n\n  const updateSupervisionStatus = () => {\n    let httpRequestBody = createBaseHttpRequestBody({\n      fiscal_notification_modification_date: getNowDateTimeString(),\n      fiscal_action_supervision_date: formData[DATE],\n      fiscal_action_supervision_auditor: getUserLogin(),\n      fiscal_action_supervision_report: escapeSpecialCharacters(formData[REPORT])\n    });\n    update(httpRequestBody, SUPERVISION_MODE);\n  };\n\n  const updateAwarenessStatus = () => {\n    let httpRequestBody = createBaseHttpRequestBody({\n      fiscal_notification_awareness_date: formData[DATE],\n      fiscal_notification_awareness_report: escapeSpecialCharacters(formData[REPORT]),\n      fiscal_notification_awareness_auditor: getUserLogin()\n    });\n    update(httpRequestBody, AWARENESS_MODE);\n  };\n\n  const propagateAwarenessData = async httpRequestBody => {\n    let vehiclePlate = notification[VEHICLE_PLATE];\n    if (!vehiclePlate) return;\n    let filters = [];\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]));\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]));\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]));\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"greater\", NOTIFICATION_STATUS_ENUM.DESIGNADA));\n    filters.push(createSimpleFilterClause(AWARENESS_AUDITOR, \"char\", \"null\", \"false\"));\n    filters.push(createSimpleFilterClause(AWARENESS_DATE, \"char\", \"null\", \"true\"));\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]));\n    httpRequestBody['filters'] = filters;\n    await axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/warnings/update_by_filter/\"), httpRequestBody).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const propagateSupervisionData = async httpRequestBody => {\n    let vehiclePlate = notification[VEHICLE_PLATE];\n    if (!vehiclePlate) return;\n    let filters = [];\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]));\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]));\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]));\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"greater\", NOTIFICATION_STATUS_ENUM.REALIZADA));\n    filters.push(createSimpleFilterClause(SUPERVISION_AUDITOR, \"char\", \"null\", \"false\"));\n    filters.push(createSimpleFilterClause(SUPERVISION_DATE, \"char\", \"null\", \"true\"));\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]));\n    httpRequestBody['filters'] = filters;\n    await axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/warnings/update_by_filter/\"), httpRequestBody).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const propagateHomologationData = async httpRequestBody => {\n    let vehiclePlate = notification[VEHICLE_PLATE];\n    if (!vehiclePlate) return;\n\n    if (httpRequestBody[FISCAL_NOTIFICATION_STATUS] === NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA) {\n      return;\n    }\n\n    let status = httpRequestBody[FISCAL_NOTIFICATION_STATUS];\n    httpRequestBody[FISCAL_NOTIFICATION_STATUS] = status * NOTIFICATION_STATUS_ENUM.IMPORTED_STATUS_CODE;\n    let filters = [];\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]));\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]));\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]));\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"in\", getHomologationPendingStatusCodes()));\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]));\n    httpRequestBody['filters'] = filters;\n    await axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/warnings/update_by_filter/\"), httpRequestBody).then(res => {\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const update = (httpRequestBody, mode) => {\n    setSpinner(true);\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    axiosRetryProxy.patch(\"\".concat(env.apiAddress, \"/warnings/update/\").concat(notification[ID]), httpRequestBody).then(async res => {\n      if (!isSuccessStatusCode(res) || !getValue(res, ID)) {\n        setModalData({\n          messageType: ERROR,\n          message: LABELS[homologationType][\"error\"]\n        });\n      } else {\n        setModalData({\n          messageType: OK,\n          message: LABELS[homologationType][\"success\"]\n        });\n\n        if (mode === AWARENESS_MODE) {\n          await propagateAwarenessData(httpRequestBody);\n        } else if (mode === SUPERVISION_MODE) {\n          await propagateSupervisionData(httpRequestBody);\n        } else {\n          await propagateHomologationData(httpRequestBody);\n        }\n\n        setEnabled(false);\n        toggle(false);\n        saveParentData();\n      }\n    }).catch(err => {\n      setModalData(treatError(err, \"\", LABELS[homologationType][\"error\"]));\n    }).finally(() => {\n      refresh();\n      setSpinner(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginTop: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(AuditorSimpleInput, {\n          label: \"Respons\\xE1vel pela \".concat(LABELS[homologationType]['label'], \":\"),\n          user_name: formData[USER_NAME],\n          user_login: formData[USER],\n          user_registration_id: formData[USER_ID]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Data/Hora da \".concat(LABELS[homologationType]['label'], \":\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"datetime-local\",\n          value: treatNullValue(formData[DATE]),\n          readOnly: true,\n          step: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginTop: '5px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Observa\\xE7\\xF5es da \".concat(LABELS[homologationType]['label'], \":\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"textarea\",\n          value: treatNullValue(formData[REPORT]),\n          disabled: !editionMode,\n          maxLength: \"2048\",\n          style: calculateComponentHeight(manageInputTables(formData, [REPORT]), \"0 0px\"),\n          onChange: e => {\n            setFormData({ ...formData,\n              [REPORT]: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), isEnabled() && /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          textAlign: \"end\"\n        },\n        children: editionMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            style: {\n              height: \"2.5rem\",\n              width: \"7rem\",\n              marginTop: \"10px\",\n              marginRight: \"1rem\"\n            },\n            onClick: () => {\n              openConfirmationModal();\n            },\n            children: \"Salvar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            style: {\n              height: \"2.5rem\",\n              width: \"7rem\",\n              marginTop: \"10px\"\n            },\n            onClick: () => {\n              handleCancelClick();\n            },\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: LABELS[homologationType]['button_class'],\n          style: LABELS[homologationType]['button_style'],\n          outline: true,\n          onClick: () => {\n            handleHomologationButtonClick();\n          },\n          children: LABELS[homologationType]['button_label']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 23\n    }, this), modalType === MODAL_TYPE_ENUM.CONFIRMATION && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      actionMethods: modalActionMethods\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 54\n    }, this), modalType === MODAL_TYPE_ENUM.MESSAGE && /*#__PURE__*/_jsxDEV(MessageModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true);\n}\n\n_s(HomologationPanel, \"ydZYGumqmImpL41sXc/mfziMQro=\", false, function () {\n  return [useToggle, useModalWithData];\n});\n\n_c = HomologationPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomologationPanel\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/modals/NotificationModal/panels/HomologationPanel.js"],"names":["React","Row","Input","Button","Col","axios","env","axiosRetry","getTimeoutConfig","getRetryConfig","AuditorSimpleInput","MODAL_TYPE_ENUM","useModalWithData","useToggle","HOMOLOGATION_AUDITOR","HOMOLOGATION_AUDITOR_ID","HOMOLOGATION_AUDITOR_NAME","FISCAL_NOTIFICATION_STATUS","HOMOLOGATION_DATE","HOMOLOGATION_REPORT","EDITION","HOMOLOGATION_MODE","AWARENESS_MODE","SUPERVISION_MODE","NOTIFICATION_STATUS_ENUM","createBaseHttpRequestBody","getUserLogin","createSimpleFilterClause","createNotFilterClause","VEHICLE_PLATE","ID_CONFIG","FISCAL_NOTIFICATION_PARENT_ID","ID","AWARENESS_AUDITOR","AWARENESS_DATE","SUPERVISION_AUDITOR","SUPERVISION_DATE","getHomologationPendingStatusCodes","ERROR","OK","Notification","isAdmin","isSubgerente","ConfirmationModal","MessageModal","SUPERVISION_REPORT","SUPERVISION_AUDITOR_ID","SUPERVISION_AUDITOR_NAME","getUserName","getUserRegistrationID","AWARENESS_REPORT","AWARENESS_AUDITOR_ID","AWARENESS_AUDITOR_NAME","getNowDateTimeString","treatNullValue","calculateComponentHeight","manageInputTables","isEmpty","escapeSpecialCharacters","isSuccessStatusCode","getValue","treatError","HomologationPanel","data","setData","homologationType","refresh","mode","setMode","formData","setFormData","useState","spinner","setSpinner","enabled","setEnabled","editionMode","toggleEditionMode","modalData","setModalData","modalActionMethods","isModalActive","modalType","toggleModalOn","toggleModalOff","toogleConfirmationModalOn","LABELS","label","button_style","height","width","marginTop","button_class","button_label","question","error","success","axiosRetryProxy","create","DATE","REPORT","USER","USER_ID","USER_NAME","notification","useEffect","loadFormData","toggle","homologation","awareness","supervision","newFormData","mountFormData","DATE_KEY","REPORT_KEY","USER_KEY","USER_NAME_KEY","USER_ID_KEY","mountParentData","STATUS","saveParentData","HOMOLOGADA","handleHomologationButtonClick","handleSaveClick","updateHomologationStatus","updateAwarenessStatus","updateSupervisionStatus","handleCancelClick","openConfirmationModal","message","operation","id","isEnabled","notificationObj","isHomologationPending","isSupervisionPending","isAwarenessPending","newStatus","status","SEM_COMANDO","SEM_COMANDO_HOMOLOGADA","httpRequestBody","fiscal_notification_modification_date","fiscal_action_homologation_date","fiscal_action_homologation_auditor","fiscal_action_homologation_report","fiscal_notification_status","update","fiscal_action_supervision_date","fiscal_action_supervision_auditor","fiscal_action_supervision_report","fiscal_notification_awareness_date","fiscal_notification_awareness_report","fiscal_notification_awareness_auditor","propagateAwarenessData","vehiclePlate","filters","push","DESIGNADA","patch","apiAddress","then","res","console","log","catch","err","propagateSupervisionData","REALIZADA","propagateHomologationData","IMPORTED_STATUS_CODE","MESSAGE","messageType","finally","e","target","value","textAlign","marginRight","CONFIRMATION"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n  Row,\r\n  Input,\r\n  Button,\r\n  Col,\r\n} from 'reactstrap';\r\n\r\n\r\nimport axios from \"axios\";\r\nimport env from \"common/enviroment\";\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\n\r\nimport AuditorSimpleInput from \"components/auditor/AuditorSimpleInput\";\r\n\r\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\r\n\r\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\r\nimport useToggle from \"common/hooks/useToogle\";\r\nimport { HOMOLOGATION_AUDITOR } from \"common/model/Notification\";\r\nimport { HOMOLOGATION_AUDITOR_ID } from \"common/model/Notification\";\r\nimport { HOMOLOGATION_AUDITOR_NAME } from \"common/model/Notification\";\r\nimport { FISCAL_NOTIFICATION_STATUS } from \"common/model/Notification\";\r\nimport { HOMOLOGATION_DATE } from \"common/model/Notification\";\r\nimport { HOMOLOGATION_REPORT } from \"common/model/Notification\";\r\nimport { EDITION } from \"components/modals/ModalConsts\";\r\nimport { HOMOLOGATION_MODE, AWARENESS_MODE, SUPERVISION_MODE } from \"components/modals/HomologationModal\";\r\nimport NOTIFICATION_STATUS_ENUM from \"common/enumerators/NotificationStatus\";\r\nimport { createBaseHttpRequestBody } from \"axios/AxiosUtils\";\r\nimport { getUserLogin } from \"common/SessionUtils\";\r\nimport { createSimpleFilterClause } from \"axios/AxiosUtils\";\r\nimport { createNotFilterClause } from \"axios/AxiosUtils\";\r\nimport { VEHICLE_PLATE } from \"common/model/Notification\";\r\nimport { ID_CONFIG } from \"common/model/Notification\";\r\nimport { FISCAL_NOTIFICATION_PARENT_ID } from \"common/model/Notification\";\r\nimport { ID } from \"common/model/Notification\";\r\nimport { AWARENESS_AUDITOR } from \"common/model/Notification\";\r\nimport { AWARENESS_DATE } from \"common/model/Notification\";\r\nimport { SUPERVISION_AUDITOR } from \"common/model/Notification\";\r\nimport { SUPERVISION_DATE } from \"common/model/Notification\";\r\nimport { getHomologationPendingStatusCodes } from \"common/enumerators/NotificationStatus\";\r\nimport { ERROR } from \"components/modals/ModalConsts\";\r\nimport { OK } from \"components/modals/ModalConsts\";\r\nimport { Notification } from \"common/model/Notification\";\r\nimport { isAdmin } from \"common/SessionUtils\";\r\nimport { isSubgerente } from \"common/SessionUtils\";\r\nimport ConfirmationModal from \"components/modals/ConfirmationModal \";\r\nimport MessageModal from \"components/modals/MessageModal\";\r\nimport { SUPERVISION_REPORT } from \"common/model/Notification\";\r\nimport { SUPERVISION_AUDITOR_ID } from \"common/model/Notification\";\r\nimport { SUPERVISION_AUDITOR_NAME } from \"common/model/Notification\";\r\nimport { getUserName } from \"common/SessionUtils\";\r\nimport { getUserRegistrationID } from \"common/SessionUtils\";\r\nimport { AWARENESS_REPORT } from \"common/model/Notification\";\r\nimport { AWARENESS_AUDITOR_ID } from \"common/model/Notification\";\r\nimport { AWARENESS_AUDITOR_NAME } from \"common/model/Notification\";\r\nimport { getNowDateTimeString } from \"common/utils/validate\";\r\nimport { treatNullValue } from \"common/utils/collections\";\r\nimport { calculateComponentHeight } from \"common/utils/forms\";\r\nimport { manageInputTables } from \"common/utils/collections\";\r\nimport { isEmpty } from \"common/utils/collections\";\r\nimport { escapeSpecialCharacters } from \"common/utils/validate\";\r\nimport { isSuccessStatusCode } from \"common/utils/errorTreatment\";\r\nimport { getValue } from \"common/utils/errorTreatment\";\r\nimport treatError from \"common/utils/errorTreatment\";\r\n\r\nexport default function HomologationPanel({ data, setData, homologationType, refresh, mode, setMode }) {\r\n\r\n  const [formData, setFormData] = React.useState({})\r\n  const [spinner, setSpinner] = React.useState(false)\r\n  const [enabled, setEnabled] = React.useState(true) // Esta variável serve para desabilitar os botões de edição no caso de sucesso. \r\n\r\n  const [editionMode, toggleEditionMode] = useToggle(false)\r\n\r\n  const { modalData, setModalData, modalActionMethods, isModalActive, modalType, toggleModalOn, toggleModalOff, toogleConfirmationModalOn } = useModalWithData()\r\n\r\n  const LABELS = [\r\n    { label: \"Homologação\", button_style: { height: \"2.5rem\", width: \"10rem\", marginTop: \"10px\" }, button_class: 'btn btn-success', button_label: \"Homologar\", question: \"Confirma a homologação da ação fiscal?\", error: \"Falha no registro da homologação\", success: \"Homologação da notificação realizada com sucesso!\" },\r\n    { label: \"Declaração de Ciência\", button_style: { height: \"2.5rem\", width: \"10rem\", marginTop: \"10px\" }, button_class: 'btn btn-warning', button_label: \"Declarar Ciência\", question: \"Confirma a declaração de ciência?\", error: \"Falha no registro da declaração de ciência\", success: \"Declaração de ciência realizada com sucesso!\" },\r\n    { label: \"Declaração de Supervisão\", button_style: { height: \"2.5rem\", width: \"10rem\", marginTop: \"10px\" }, button_class: 'btn btn-info', button_label: \"Declarar Supervisão\", question: \"Confirma a supervisão da ação fiscal?\", error: \"Falha no registro da declaração de supervisão\", success: \"Supervisão da ação fiscal realizada com sucesso!\" }\r\n  ]\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const DATE = 'date'\r\n  const REPORT = 'report'\r\n  const USER = 'user'\r\n  const USER_ID = 'user_id'\r\n  const USER_NAME = 'user_name'\r\n\r\n  const notification = data\r\n\r\n\r\n  React.useEffect(() => {\r\n    loadFormData()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps  \r\n  }, [notification])\r\n\r\n\r\n\r\n  const toggle = (enabled) => {\r\n    if (homologationType === HOMOLOGATION_MODE) {\r\n      setMode({...mode, homologation : enabled})\r\n    } else if (homologationType === AWARENESS_MODE) {\r\n      setMode({...mode, awareness : enabled})\r\n    } else if (homologationType === SUPERVISION_MODE) {\r\n      setMode({...mode, supervision : enabled})\r\n    }\r\n    toggleEditionMode()\r\n  }\r\n\r\n\r\n  const loadFormData = () => {\r\n    let newFormData = {}\r\n    if (homologationType === HOMOLOGATION_MODE) {\r\n      newFormData = mountFormData(HOMOLOGATION_DATE, HOMOLOGATION_REPORT, HOMOLOGATION_AUDITOR, HOMOLOGATION_AUDITOR_NAME, HOMOLOGATION_AUDITOR_ID)\r\n    } else if (homologationType === SUPERVISION_MODE) {\r\n      newFormData = mountFormData(SUPERVISION_DATE, SUPERVISION_REPORT, SUPERVISION_AUDITOR, SUPERVISION_AUDITOR_NAME, SUPERVISION_AUDITOR_ID)      \r\n    } else if (homologationType === AWARENESS_MODE) {\r\n      newFormData = mountFormData(AWARENESS_DATE, AWARENESS_REPORT, AWARENESS_AUDITOR, AWARENESS_AUDITOR_NAME, AWARENESS_AUDITOR_ID)      \r\n    }\r\n    setFormData(newFormData)\r\n  }\r\n\r\n  const mountFormData = (DATE_KEY, REPORT_KEY, USER_KEY, USER_NAME_KEY, USER_ID_KEY ) => {\r\n    let newFormData = {}\r\n      newFormData[DATE] = notification[DATE_KEY]\r\n      newFormData[REPORT] = notification[REPORT_KEY]\r\n      newFormData[USER] = notification[USER_KEY]\r\n      newFormData[USER_ID] = notification[USER_ID_KEY]\r\n      newFormData[USER_NAME] = notification[USER_NAME_KEY]\r\n      return newFormData\r\n    }\r\n\r\n    \r\n    const mountParentData = (DATE_KEY, REPORT_KEY, USER_KEY, USER_NAME_KEY, USER_ID_KEY, STATUS ) => {\r\n      notification[DATE_KEY] = formData[DATE] \r\n      notification[REPORT_KEY] = formData[REPORT]\r\n      notification[USER_KEY] = formData[USER]\r\n      notification[USER_ID_KEY] = formData[USER_ID]\r\n      notification[USER_NAME_KEY] = formData[USER_NAME]\r\n      notification[FISCAL_NOTIFICATION_STATUS] = STATUS\r\n  }\r\n\r\n\r\n    const saveParentData = () => {\r\n      if (homologationType === HOMOLOGATION_MODE) {\r\n        mountParentData(HOMOLOGATION_DATE, HOMOLOGATION_REPORT, HOMOLOGATION_AUDITOR, HOMOLOGATION_AUDITOR_NAME, HOMOLOGATION_AUDITOR_ID, NOTIFICATION_STATUS_ENUM.HOMOLOGADA)\r\n      } else if (homologationType === SUPERVISION_MODE) {\r\n        mountParentData(SUPERVISION_DATE, SUPERVISION_REPORT, SUPERVISION_AUDITOR, SUPERVISION_AUDITOR_NAME, SUPERVISION_AUDITOR_ID)      \r\n      } else if (homologationType === AWARENESS_MODE) {\r\n        mountParentData(AWARENESS_DATE, AWARENESS_REPORT, AWARENESS_AUDITOR, AWARENESS_AUDITOR_NAME, AWARENESS_AUDITOR_ID)      \r\n      }\r\n      setData({...notification})\r\n    }\r\n  \r\n  const handleHomologationButtonClick = () => {\r\n    //Se não houver data definida, deve ser setado o timestamp atual\"\r\n    if (isEmpty(formData[DATE])) {\r\n      formData[DATE] = getNowDateTimeString()\r\n      setFormData({ ...formData })\r\n    }\r\n\r\n    // Se o usuário atual é diferente daquele alocado como responsável pela homologação, deve ser setado o usuário logado\r\n    if (!isEmpty(formData[USER]) && formData[USER] !== getUserLogin()) {\r\n      formData[USER] = getUserLogin()\r\n      formData[USER_ID] = getUserRegistrationID()\r\n      formData[USER_NAME] = getUserName()\r\n      setFormData({ ...formData })\r\n    }\r\n\r\n    toggle(true)\r\n    \r\n    \r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    if (homologationType === HOMOLOGATION_MODE) {\r\n      updateHomologationStatus()\r\n    } else if (homologationType === AWARENESS_MODE) {\r\n      updateAwarenessStatus()\r\n    } else if (homologationType === SUPERVISION_MODE) {\r\n      updateSupervisionStatus()\r\n    }\r\n  }\r\n\r\n  const handleCancelClick = () => {\r\n    loadFormData()\r\n    \r\n    toggle(false)\r\n  }\r\n\r\n\r\n  const openConfirmationModal = () => {\r\n    let data = { message: LABELS[homologationType]['question'], operation: EDITION, id: formData['id'] }\r\n    toogleConfirmationModalOn(data, () => { handleSaveClick(); })\r\n  }\r\n\r\n\r\n  const isEnabled = () => {\r\n    let notificationObj = new Notification(notification)\r\n    if (!enabled) {\r\n      return false\r\n    }\r\n\r\n    if (homologationType === HOMOLOGATION_MODE) {\r\n      if (notificationObj.isHomologationPending()) {\r\n        return isAdmin() || (isSubgerente() && getUserLogin() === formData[USER])\r\n      }\r\n    } else if (homologationType === SUPERVISION_MODE) {\r\n      if (notificationObj.isSupervisionPending()) {\r\n        return isAdmin() || (isSubgerente() && getUserLogin() === formData[USER])\r\n      }\r\n    } else if (homologationType === AWARENESS_MODE) {\r\n      if (notificationObj.isAwarenessPending()) {\r\n        return isAdmin() || (getUserLogin() === formData[USER])\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n\r\n\r\n  const updateHomologationStatus = () => {\r\n\r\n    let newStatus = NOTIFICATION_STATUS_ENUM.HOMOLOGADA\r\n    let status = notification[FISCAL_NOTIFICATION_STATUS]\r\n    if (status === NOTIFICATION_STATUS_ENUM.SEM_COMANDO) {\r\n      newStatus = NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA\r\n    }\r\n\r\n    let httpRequestBody = createBaseHttpRequestBody({\r\n      fiscal_notification_modification_date: getNowDateTimeString(),\r\n      fiscal_action_homologation_date: formData[DATE],\r\n      fiscal_action_homologation_auditor: getUserLogin(),\r\n      fiscal_action_homologation_report: escapeSpecialCharacters(formData[REPORT]),\r\n      fiscal_notification_status: newStatus\r\n    })\r\n\r\n\r\n    update(httpRequestBody, HOMOLOGATION_MODE)\r\n  }\r\n\r\n\r\n  const updateSupervisionStatus = () => {\r\n    let httpRequestBody = createBaseHttpRequestBody({\r\n      fiscal_notification_modification_date: getNowDateTimeString(),\r\n      fiscal_action_supervision_date: formData[DATE],\r\n      fiscal_action_supervision_auditor: getUserLogin(),\r\n      fiscal_action_supervision_report: escapeSpecialCharacters(formData[REPORT]),\r\n    })\r\n\r\n    update(httpRequestBody, SUPERVISION_MODE)\r\n  }\r\n\r\n  const updateAwarenessStatus = () => {\r\n    let httpRequestBody = createBaseHttpRequestBody({\r\n      fiscal_notification_awareness_date: formData[DATE],\r\n      fiscal_notification_awareness_report: escapeSpecialCharacters(formData[REPORT]),\r\n      fiscal_notification_awareness_auditor: getUserLogin()\r\n    })\r\n\r\n    update(httpRequestBody, AWARENESS_MODE)\r\n  }\r\n\r\n\r\n  const propagateAwarenessData = async (httpRequestBody) => {\r\n\r\n    let vehiclePlate = notification[VEHICLE_PLATE]\r\n    if (!vehiclePlate)\r\n      return\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]))\r\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]))\r\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]))\r\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"greater\", NOTIFICATION_STATUS_ENUM.DESIGNADA))\r\n    filters.push(createSimpleFilterClause(AWARENESS_AUDITOR, \"char\", \"null\", \"false\"))\r\n    filters.push(createSimpleFilterClause(AWARENESS_DATE, \"char\", \"null\", \"true\"))\r\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]))\r\n\r\n    httpRequestBody['filters'] = filters\r\n\r\n    await axiosRetryProxy.patch(`${env.apiAddress}/warnings/update_by_filter/`, httpRequestBody)\r\n      .then(res => {\r\n        console.log(res)\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n\r\n  const propagateSupervisionData = async (httpRequestBody) => {\r\n\r\n    let vehiclePlate = notification[VEHICLE_PLATE]\r\n    if (!vehiclePlate)\r\n      return\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]))\r\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]))\r\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]))\r\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"greater\", NOTIFICATION_STATUS_ENUM.REALIZADA))\r\n    filters.push(createSimpleFilterClause(SUPERVISION_AUDITOR, \"char\", \"null\", \"false\"))\r\n    filters.push(createSimpleFilterClause(SUPERVISION_DATE, \"char\", \"null\", \"true\"))\r\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]))\r\n\r\n    httpRequestBody['filters'] = filters\r\n\r\n    await axiosRetryProxy.patch(`${env.apiAddress}/warnings/update_by_filter/`, httpRequestBody)\r\n      .then(res => {\r\n        console.log(res)\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n\r\n  const propagateHomologationData = async (httpRequestBody) => {\r\n\r\n    let vehiclePlate = notification[VEHICLE_PLATE]\r\n    if (!vehiclePlate)\r\n      return\r\n\r\n    if (httpRequestBody[FISCAL_NOTIFICATION_STATUS] === NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA){\r\n      return\r\n    }\r\n\r\n    let status = httpRequestBody[FISCAL_NOTIFICATION_STATUS]\r\n    httpRequestBody[FISCAL_NOTIFICATION_STATUS] = status * NOTIFICATION_STATUS_ENUM.IMPORTED_STATUS_CODE\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(VEHICLE_PLATE, \"char\", \"equal\", notification[VEHICLE_PLATE]))\r\n    filters.push(createSimpleFilterClause(ID_CONFIG, \"char\", \"equal\", notification[ID_CONFIG]))\r\n    filters.push(createSimpleFilterClause(ID, \"varying\", \"greater\", notification[FISCAL_NOTIFICATION_PARENT_ID]))\r\n    filters.push(createSimpleFilterClause(FISCAL_NOTIFICATION_STATUS, \"int\", \"in\", getHomologationPendingStatusCodes()))\r\n    filters.push(createNotFilterClause(ID, \"int\", \"equal\", notification[ID]))\r\n\r\n\r\n    httpRequestBody['filters'] = filters\r\n\r\n    await axiosRetryProxy.patch(`${env.apiAddress}/warnings/update_by_filter/`, httpRequestBody)\r\n      .then(res => {\r\n        console.log(res)\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  const update = (httpRequestBody, mode) => {\r\n\r\n    setSpinner(true)\r\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n\r\n    axiosRetryProxy.patch(`${env.apiAddress}/warnings/update/${notification[ID]}`, httpRequestBody)\r\n      .then(async res => {\r\n\r\n        if (!isSuccessStatusCode(res) || !getValue(res, ID)) {\r\n          setModalData({ messageType: ERROR, message: LABELS[homologationType][\"error\"] });\r\n        } else {\r\n\r\n          setModalData({ messageType: OK, message: LABELS[homologationType][\"success\"] });\r\n\r\n          if (mode === AWARENESS_MODE) {\r\n            await propagateAwarenessData(httpRequestBody)\r\n          } else if (mode === SUPERVISION_MODE) {\r\n            await propagateSupervisionData(httpRequestBody)\r\n          } else {\r\n            await propagateHomologationData(httpRequestBody)\r\n          }\r\n\r\n          setEnabled(false)\r\n          \r\n          toggle(false)\r\n\r\n          saveParentData()\r\n        }\r\n      }).catch(err => {\r\n        setModalData(treatError(err, \"\", LABELS[homologationType][\"error\"]));\r\n      }).finally(() => {\r\n        refresh()\r\n        setSpinner(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      <Row style={{ marginTop: '5px' }}>\r\n        <Col>\r\n          <AuditorSimpleInput\r\n            label={`Responsável pela ${LABELS[homologationType]['label']}:`}\r\n            user_name={formData[USER_NAME]}\r\n            user_login={formData[USER]}\r\n            user_registration_id={formData[USER_ID]}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row >\r\n        <Col>\r\n          <b>{`Data/Hora da ${LABELS[homologationType]['label']}:`}</b>\r\n          <Input\r\n            type='datetime-local'\r\n            value={treatNullValue(formData[DATE])}\r\n            readOnly\r\n            step=\"1\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: '5px' }}>\r\n        <Col>\r\n          <b>{`Observações da ${LABELS[homologationType]['label']}:`}</b>\r\n          <Input\r\n            type='textarea'\r\n            value={treatNullValue(formData[REPORT])}\r\n            disabled={!editionMode}\r\n            maxLength=\"2048\"\r\n            style={calculateComponentHeight(manageInputTables(formData, [REPORT]), \"0 0px\")}\r\n            onChange={e => { setFormData({ ...formData, [REPORT]: e.target.value }) }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      {isEnabled() && <Row>\r\n        <Col style={{ textAlign: \"end\" }}>\r\n          {editionMode ?\r\n            <>\r\n              <Button\r\n                color='primary'\r\n                style={{ height: \"2.5rem\", width: \"7rem\", marginTop: \"10px\", marginRight: \"1rem\" }}\r\n                onClick={() => {\r\n                  openConfirmationModal();\r\n                }}\r\n              >\r\n                Salvar\r\n              </Button>\r\n              <Button\r\n                color='danger'\r\n                style={{ height: \"2.5rem\", width: \"7rem\", marginTop: \"10px\" }}\r\n                onClick={() => { handleCancelClick() }}\r\n              >\r\n                Cancelar\r\n              </Button>\r\n            </>\r\n            :\r\n            <Button size=\"sm\" className={LABELS[homologationType]['button_class']}\r\n              style={LABELS[homologationType]['button_style']} outline\r\n              onClick={() => { handleHomologationButtonClick(); }}\r\n            >\r\n              {LABELS[homologationType]['button_label']}\r\n            </Button>\r\n\r\n          }\r\n        </Col>\r\n      </Row>}\r\n      {modalType === MODAL_TYPE_ENUM.CONFIRMATION && <ConfirmationModal show={isModalActive} toggle={toggleModalOff} data={modalData} actionMethods={modalActionMethods} />}\r\n      {modalType === MODAL_TYPE_ENUM.MESSAGE && <MessageModal show={isModalActive} toggle={toggleModalOff} data={modalData} spinner={spinner} />}\r\n    </>)\r\n}"]},"metadata":{},"sourceType":"module"}