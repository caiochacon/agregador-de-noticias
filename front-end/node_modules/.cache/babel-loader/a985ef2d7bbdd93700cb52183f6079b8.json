{"ast":null,"code":"'use strict';\n\nvar $Map = typeof Map === 'function' && Map.prototype ? Map : null;\nvar $Set = typeof Set === 'function' && Set.prototype ? Set : null;\nvar exported;\n\nif (!$Set) {\n  /** @type {import('.')} */\n  // eslint-disable-next-line no-unused-vars\n  exported = function isSet(x) {\n    // `Set` is not present in this environment.\n    return false;\n  };\n}\n\nvar $mapHas = $Map ? Map.prototype.has : null;\nvar $setHas = $Set ? Set.prototype.has : null;\n\nif (!exported && !$setHas) {\n  /** @type {import('.')} */\n  // eslint-disable-next-line no-unused-vars\n  exported = function isSet(x) {\n    // `Set` does not have a `has` method\n    return false;\n  };\n}\n/** @type {import('.')} */\n\n\nmodule.exports = exported || function isSet(x) {\n  if (!x || typeof x !== 'object') {\n    return false;\n  }\n\n  try {\n    $setHas.call(x);\n\n    if ($mapHas) {\n      try {\n        $mapHas.call(x);\n      } catch (e) {\n        return true;\n      }\n    } // @ts-expect-error TS can't figure out that $Set is always truthy here\n\n\n    return x instanceof $Set; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/node_modules/is-set/index.js"],"names":["$Map","Map","prototype","$Set","Set","exported","isSet","x","$mapHas","has","$setHas","module","exports","call","e"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAG,OAAOC,GAAP,KAAe,UAAf,IAA6BA,GAAG,CAACC,SAAjC,GAA6CD,GAA7C,GAAmD,IAA9D;AACA,IAAIE,IAAI,GAAG,OAAOC,GAAP,KAAe,UAAf,IAA6BA,GAAG,CAACF,SAAjC,GAA6CE,GAA7C,GAAmD,IAA9D;AAEA,IAAIC,QAAJ;;AAEA,IAAI,CAACF,IAAL,EAAW;AACV;AACA;AACAE,EAAAA,QAAQ,GAAG,SAASC,KAAT,CAAeC,CAAf,EAAkB;AAC5B;AACA,WAAO,KAAP;AACA,GAHD;AAIA;;AAED,IAAIC,OAAO,GAAGR,IAAI,GAAGC,GAAG,CAACC,SAAJ,CAAcO,GAAjB,GAAuB,IAAzC;AACA,IAAIC,OAAO,GAAGP,IAAI,GAAGC,GAAG,CAACF,SAAJ,CAAcO,GAAjB,GAAuB,IAAzC;;AACA,IAAI,CAACJ,QAAD,IAAa,CAACK,OAAlB,EAA2B;AAC1B;AACA;AACAL,EAAAA,QAAQ,GAAG,SAASC,KAAT,CAAeC,CAAf,EAAkB;AAC5B;AACA,WAAO,KAAP;AACA,GAHD;AAIA;AAED;;;AACAI,MAAM,CAACC,OAAP,GAAiBP,QAAQ,IAAI,SAASC,KAAT,CAAeC,CAAf,EAAkB;AAC9C,MAAI,CAACA,CAAD,IAAM,OAAOA,CAAP,KAAa,QAAvB,EAAiC;AAChC,WAAO,KAAP;AACA;;AACD,MAAI;AACHG,IAAAA,OAAO,CAACG,IAAR,CAAaN,CAAb;;AACA,QAAIC,OAAJ,EAAa;AACZ,UAAI;AACHA,QAAAA,OAAO,CAACK,IAAR,CAAaN,CAAb;AACA,OAFD,CAEE,OAAOO,CAAP,EAAU;AACX,eAAO,IAAP;AACA;AACD,KARE,CASH;;;AACA,WAAOP,CAAC,YAAYJ,IAApB,CAVG,CAUuB;AAC1B,GAXD,CAWE,OAAOW,CAAP,EAAU,CAAE;;AACd,SAAO,KAAP;AACA,CAjBD","sourcesContent":["'use strict';\n\nvar $Map = typeof Map === 'function' && Map.prototype ? Map : null;\nvar $Set = typeof Set === 'function' && Set.prototype ? Set : null;\n\nvar exported;\n\nif (!$Set) {\n\t/** @type {import('.')} */\n\t// eslint-disable-next-line no-unused-vars\n\texported = function isSet(x) {\n\t\t// `Set` is not present in this environment.\n\t\treturn false;\n\t};\n}\n\nvar $mapHas = $Map ? Map.prototype.has : null;\nvar $setHas = $Set ? Set.prototype.has : null;\nif (!exported && !$setHas) {\n\t/** @type {import('.')} */\n\t// eslint-disable-next-line no-unused-vars\n\texported = function isSet(x) {\n\t\t// `Set` does not have a `has` method\n\t\treturn false;\n\t};\n}\n\n/** @type {import('.')} */\nmodule.exports = exported || function isSet(x) {\n\tif (!x || typeof x !== 'object') {\n\t\treturn false;\n\t}\n\ttry {\n\t\t$setHas.call(x);\n\t\tif ($mapHas) {\n\t\t\ttry {\n\t\t\t\t$mapHas.call(x);\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t// @ts-expect-error TS can't figure out that $Set is always truthy here\n\t\treturn x instanceof $Set; // core-js workaround, pre-v2.5.0\n\t} catch (e) {}\n\treturn false;\n};\n"]},"metadata":{},"sourceType":"script"}