{"ast":null,"code":"var _jsxFileName = \"C:\\\\aria\\\\cicc-app\\\\front-end\\\\src\\\\context\\\\MapsContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createQueryHttpRequestBody } from \"axios/AxiosUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MapsContext = /*#__PURE__*/React.createContext();\nexport function MapsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [camerasData, setCamerasData] = React.useState([]);\n  const [activeCameras, setActiveCameras] = React.useState([]);\n  const [citiesPB, setCitiesPB] = React.useState([]);\n  const [pointsData, setPointsData] = React.useState(new Array(activeCameras.length).fill({\n    active: false,\n    warnings: 0\n  }));\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const getCamerasData = () => {\n    let httpRequestBody = createQueryHttpRequestBody();\n    httpRequestBody['query']['config'] = {\n      \"filters\": []\n    };\n    httpRequestBody['query']['evento'] = {\n      \"filters\": []\n    };\n    axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/locations/read_all\"), httpRequestBody).then(res => {\n      if (Array.isArray(res.data)) {\n        if (res.data.length > 0) {\n          setCamerasData(res.data.filter(camera => camera.category !== \"SUGESTÕES\"));\n        }\n      } else setCamerasData([]);\n    });\n  };\n\n  const getData = () => getCamerasData();\n\n  React.useEffect(() => {\n    axiosRetryProxy.get(env.citiesPbApi).then(json => {\n      setCitiesPB(json.data);\n    });\n  }, []);\n  React.useEffect(() => {\n    setActiveCameras(camerasData.filter(x => x.status));\n    setPointsData(camerasData.filter(x => x.status).fill({\n      active: false,\n      warnings: 0\n    }));\n  }, [camerasData]);\n  React.useEffect(() => {}, [activeCameras]); //console.log('cameras ativas: ', activeCameras)\n\n  return /*#__PURE__*/_jsxDEV(MapsContext.Provider, {\n    value: {\n      camerasData,\n      getCamerasData,\n      getData,\n      activeCameras,\n      citiesPB,\n      setPointsData,\n      pointsData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapsProvider, \"1tPL8MrShrLLk10fF+KBvJdE2a4=\");\n\n_c = MapsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapsProvider\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/context/MapsContext.js"],"names":["React","axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createQueryHttpRequestBody","MapsContext","createContext","MapsProvider","children","camerasData","setCamerasData","useState","activeCameras","setActiveCameras","citiesPB","setCitiesPB","pointsData","setPointsData","Array","length","fill","active","warnings","axiosRetryProxy","create","getCamerasData","httpRequestBody","post","apiAddress","then","res","isArray","data","filter","camera","category","getData","useEffect","get","citiesPbApi","json","x","status"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,0BAAT,QAA2C,kBAA3C;;AAEA,OAAO,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAN,EAApB;AAEP,OAAO,SAASC,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACzC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,KAAK,CAACa,QAAN,CAAe,EAAf,CAA1C;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BjB,KAAK,CAACa,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BnB,KAAK,CAACa,QAAN,CAAe,IAAIO,KAAJ,CAAUN,aAAa,CAACO,MAAxB,EAAgCC,IAAhC,CAAqC;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GAArC,CAAf,CAApC;AAEA,QAAMC,eAAe,GAAGxB,KAAK,CAACyB,MAAN,CAAavB,gBAAgB,EAA7B,CAAxB;AACAD,EAAAA,UAAU,CAACuB,eAAD,EAAkBrB,cAAc,EAAhC,CAAV;;AAEA,QAAMuB,cAAc,GAAG,MAAM;AAC3B,QAAIC,eAAe,GAAGtB,0BAA0B,EAAhD;AACAsB,IAAAA,eAAe,CAAC,OAAD,CAAf,CAAyB,QAAzB,IAAqC;AAAC,iBAAU;AAAX,KAArC;AACAA,IAAAA,eAAe,CAAC,OAAD,CAAf,CAAyB,QAAzB,IAAqC;AAAC,iBAAU;AAAX,KAArC;AAEAH,IAAAA,eAAe,CAACI,IAAhB,WAAwBxB,GAAG,CAACyB,UAA5B,0BAA6DF,eAA7D,EAA8EG,IAA9E,CAAmFC,GAAG,IAAI;AAExF,UAAIZ,KAAK,CAACa,OAAN,CAAcD,GAAG,CAACE,IAAlB,CAAJ,EAA4B;AAC1B,YAAGF,GAAG,CAACE,IAAJ,CAASb,MAAT,GAAkB,CAArB,EAAuB;AACrBT,UAAAA,cAAc,CAACoB,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,MAAM,IAAIA,MAAM,CAACC,QAAP,KAAoB,WAA9C,CAAD,CAAd;AACD;AACF,OAJD,MAMEzB,cAAc,CAAC,EAAD,CAAd;AACH,KATD;AAUD,GAfD;;AAiBA,QAAM0B,OAAO,GAAG,MAAMX,cAAc,EAApC;;AAEA3B,EAAAA,KAAK,CAACuC,SAAN,CAAgB,MAAM;AACpBd,IAAAA,eAAe,CAACe,GAAhB,CAAoBnC,GAAG,CAACoC,WAAxB,EACGV,IADH,CACQW,IAAI,IAAI;AACZzB,MAAAA,WAAW,CAACyB,IAAI,CAACR,IAAN,CAAX;AACD,KAHH;AAID,GALD,EAKG,EALH;AAOAlC,EAAAA,KAAK,CAACuC,SAAN,CAAgB,MAAM;AACpBxB,IAAAA,gBAAgB,CAACJ,WAAW,CAACwB,MAAZ,CAAmBQ,CAAC,IAAIA,CAAC,CAACC,MAA1B,CAAD,CAAhB;AACAzB,IAAAA,aAAa,CAACR,WAAW,CAACwB,MAAZ,CAAmBQ,CAAC,IAAIA,CAAC,CAACC,MAA1B,EAAkCtB,IAAlC,CAAuC;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,QAAQ,EAAE;AAA3B,KAAvC,CAAD,CAAb;AACD,GAHD,EAGG,CAACb,WAAD,CAHH;AAKAX,EAAAA,KAAK,CAACuC,SAAN,CAAgB,MAAM,CAGrB,CAHD,EAGG,CAACzB,aAAD,CAHH,EAxCyC,CA6CzC;;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEH,MAAAA,WAAF;AAAegB,MAAAA,cAAf;AAA+BW,MAAAA,OAA/B;AAAwCxB,MAAAA,aAAxC;AAAuDE,MAAAA,QAAvD;AAAiEG,MAAAA,aAAjE;AAAgFD,MAAAA;AAAhF,KAA7B;AAAA,cACGR;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GApDeD,Y;;KAAAA,Y","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment'\r\nimport { createQueryHttpRequestBody } from \"axios/AxiosUtils\";\r\n\r\nexport const MapsContext = React.createContext();\r\n\r\nexport function MapsProvider({ children }) {\r\n  const [camerasData, setCamerasData] = React.useState([]);\r\n  const [activeCameras, setActiveCameras] = React.useState([]);\r\n  const [citiesPB, setCitiesPB] = React.useState([]);\r\n  const [pointsData, setPointsData] = React.useState(new Array(activeCameras.length).fill({ active: false, warnings: 0 }));\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const getCamerasData = () => {\r\n    let httpRequestBody = createQueryHttpRequestBody()\r\n    httpRequestBody['query']['config'] = {\"filters\":[ ] }\r\n    httpRequestBody['query']['evento'] = {\"filters\":[ ] }\r\n    \r\n    axiosRetryProxy.post(`${env.apiAddress}/locations/read_all`, httpRequestBody).then(res => {\r\n      \r\n      if (Array.isArray(res.data)){\r\n        if(res.data.length > 0){\r\n          setCamerasData(res.data.filter(camera => camera.category !== \"SUGESTÕES\"))\r\n        }\r\n      }\r\n      else\r\n        setCamerasData([])\r\n    });\r\n  };\r\n\r\n  const getData = () => getCamerasData()\r\n\r\n  React.useEffect(() => {\r\n    axiosRetryProxy.get(env.citiesPbApi)\r\n      .then(json => {\r\n        setCitiesPB(json.data);\r\n      })\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    setActiveCameras(camerasData.filter(x => x.status))\r\n    setPointsData(camerasData.filter(x => x.status).fill({ active: false, warnings: 0 }))\r\n  }, [camerasData])\r\n\r\n  React.useEffect(() => {\r\n\r\n    \r\n  }, [activeCameras])\r\n\r\n  //console.log('cameras ativas: ', activeCameras)\r\n\r\n  return (\r\n    <MapsContext.Provider value={{ camerasData, getCamerasData, getData, activeCameras, citiesPB, setPointsData, pointsData}}>\r\n      {children}\r\n    </MapsContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}