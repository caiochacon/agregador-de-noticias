{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { FILTERS, QUERY, createNotFilterClause, createOrderByClause, createQueryHttpRequestBody, mountGroupsFilterClause } from \"./AxiosUtils\";\nimport { isAdmin } from \"common/SessionUtils\";\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\";\nimport SEVERITY_ENUM from \"common/enumerators/SeverityEnum\";\nimport { getUserLogin } from \"common/SessionUtils\";\nimport { CLOSING_DATE } from \"common/model/WarningConfig\";\nimport { STATUS } from \"common/model/WarningConfig\";\nimport { SEVERITY } from \"common/model/WarningConfig\";\nimport { CREATOR } from \"common/model/WarningConfig\";\nexport default function ReadNearClosingWarningConfig() {\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const readNearClosingWarningConfigRequest = async () => {\n    let result = [];\n    let filters = [];\n    let groups = mountGroupsFilterClause();\n    let orderBy = createOrderByClause(CLOSING_DATE, \"desc\");\n    filters.push(createNotFilterClause(STATUS, \"int\", \"equal\", STATUS_ENUM.REMOVIDO));\n\n    if (!isAdmin()) {\n      filters.push(createNotFilterClause(SEVERITY, \"int\", \"equal\", SEVERITY_ENUM.COE));\n      filters.push(createNotFilterClause(CREATOR, \"char\", \"equal\", getUserLogin()));\n    }\n\n    const httpRequestBody = createQueryHttpRequestBody({}, orderBy);\n    httpRequestBody[QUERY][FILTERS]['view_group'] = groups;\n    httpRequestBody[QUERY][FILTERS]['warning_config'] = filters;\n\n    try {\n      let response = await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/warningconfigs/read_all\"), httpRequestBody);\n\n      if (Array.isArray(response.data)) {\n        var warningsCfg = response.data[0];\n\n        for (var i = 0; i < warningsCfg.length; i++) {\n          let date = new Date(warningsCfg[i][CLOSING_DATE]);\n          let now = new Date();\n          let totalDays = Math.floor((date.getTime() - now.getTime()) / (1000 * 3600 * 24));\n\n          if (totalDays >= 0 && totalDays <= 5) {\n            result.push(warningsCfg[i]);\n          }\n        }\n      }\n\n      return result;\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  };\n\n  return {\n    readNearClosingWarningConfigRequest\n  };\n}\n_c = ReadNearClosingWarningConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadNearClosingWarningConfig\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/axios/ReadNearClosingWarningConfig.js"],"names":["axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","FILTERS","QUERY","createNotFilterClause","createOrderByClause","createQueryHttpRequestBody","mountGroupsFilterClause","isAdmin","STATUS_ENUM","SEVERITY_ENUM","getUserLogin","CLOSING_DATE","STATUS","SEVERITY","CREATOR","ReadNearClosingWarningConfig","axiosRetryProxy","create","readNearClosingWarningConfigRequest","result","filters","groups","orderBy","push","REMOVIDO","COE","httpRequestBody","response","post","apiAddress","Array","isArray","data","warningsCfg","i","length","date","Date","now","totalDays","Math","floor","getTime","err","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\n\r\nimport { FILTERS, QUERY, createNotFilterClause, createOrderByClause, createQueryHttpRequestBody, mountGroupsFilterClause } from \"./AxiosUtils\";\r\nimport { isAdmin } from \"common/SessionUtils\";\r\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\";\r\nimport SEVERITY_ENUM from \"common/enumerators/SeverityEnum\";\r\nimport { getUserLogin } from \"common/SessionUtils\";\r\nimport { CLOSING_DATE } from \"common/model/WarningConfig\";\r\nimport { STATUS } from \"common/model/WarningConfig\";\r\nimport { SEVERITY } from \"common/model/WarningConfig\";\r\nimport { CREATOR } from \"common/model/WarningConfig\";\r\n\r\nexport default function ReadNearClosingWarningConfig() {\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n\r\n  const readNearClosingWarningConfigRequest = async () => {\r\n    \r\n\r\n    let result = []\r\n    let filters = []\r\n    let groups = mountGroupsFilterClause()\r\n    let orderBy = createOrderByClause(CLOSING_DATE, \"desc\")\r\n    filters.push(createNotFilterClause(STATUS, \"int\", \"equal\", STATUS_ENUM.REMOVIDO))\r\n    if (!isAdmin()) {\r\n      filters.push(createNotFilterClause(SEVERITY, \"int\", \"equal\", SEVERITY_ENUM.COE))\r\n      filters.push(createNotFilterClause(CREATOR, \"char\", \"equal\", getUserLogin()))\r\n    }\r\n\r\n    const httpRequestBody = createQueryHttpRequestBody({}, orderBy)\r\n    httpRequestBody[QUERY][FILTERS]['view_group'] = groups\r\n    httpRequestBody[QUERY][FILTERS]['warning_config'] = filters\r\n\r\n    try {\r\n      let response = await axiosRetryProxy.post(`${env.apiAddress}/warningconfigs/read_all`, httpRequestBody)\r\n      if (Array.isArray(response.data)) {\r\n        var warningsCfg = response.data[0]\r\n\r\n        for (var i = 0; i < warningsCfg.length; i++) {\r\n          let date = new Date(warningsCfg[i][CLOSING_DATE]);\r\n          let now = new Date();\r\n\r\n          let totalDays = Math.floor((date.getTime() - now.getTime()) / (1000 * 3600 * 24));\r\n          if (totalDays >= 0 && totalDays <= 5) {\r\n            result.push(warningsCfg[i])\r\n          }\r\n\r\n        }\r\n      }\r\n      return  result\r\n    } catch (err) {\r\n      console.log(err)\r\n      return err\r\n    }\r\n\r\n    \r\n  }\r\n\r\n    return { readNearClosingWarningConfigRequest }\r\n  }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}