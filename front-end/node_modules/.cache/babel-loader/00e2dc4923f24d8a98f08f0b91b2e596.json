{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $WeakSet = GetIntrinsic('%WeakSet%', true);\nvar $setHas = callBound('WeakSet.prototype.has', true);\n\nif ($setHas) {\n  var $mapHas = callBound('WeakMap.prototype.has', true);\n  /** @type {import('.')} */\n\n  module.exports = function isWeakSet(x) {\n    if (!x || typeof x !== 'object') {\n      return false;\n    }\n\n    try {\n      $setHas(x, $setHas);\n\n      if ($mapHas) {\n        try {\n          $mapHas(x, $mapHas);\n        } catch (e) {\n          return true;\n        }\n      } // @ts-expect-error TS can't figure out that $WeakSet is always truthy here\n\n\n      return x instanceof $WeakSet; // core-js workaround, pre-v3\n    } catch (e) {}\n\n    return false;\n  };\n} else {\n  /** @type {import('.')} */\n  // eslint-disable-next-line no-unused-vars\n  module.exports = function isWeakSet(x) {\n    // `WeakSet` does not exist, or does not have a `has` method\n    return false;\n  };\n}","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/node_modules/is-weakset/index.js"],"names":["GetIntrinsic","require","callBound","$WeakSet","$setHas","$mapHas","module","exports","isWeakSet","x","e"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGH,YAAY,CAAC,WAAD,EAAc,IAAd,CAA3B;AAEA,IAAII,OAAO,GAAGF,SAAS,CAAC,uBAAD,EAA0B,IAA1B,CAAvB;;AAEA,IAAIE,OAAJ,EAAa;AACZ,MAAIC,OAAO,GAAGH,SAAS,CAAC,uBAAD,EAA0B,IAA1B,CAAvB;AAEA;;AACAI,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACtC,QAAI,CAACA,CAAD,IAAM,OAAOA,CAAP,KAAa,QAAvB,EAAiC;AAChC,aAAO,KAAP;AACA;;AACD,QAAI;AACHL,MAAAA,OAAO,CAACK,CAAD,EAAIL,OAAJ,CAAP;;AACA,UAAIC,OAAJ,EAAa;AACZ,YAAI;AACHA,UAAAA,OAAO,CAACI,CAAD,EAAIJ,OAAJ,CAAP;AACA,SAFD,CAEE,OAAOK,CAAP,EAAU;AACX,iBAAO,IAAP;AACA;AACD,OARE,CASH;;;AACA,aAAOD,CAAC,YAAYN,QAApB,CAVG,CAU2B;AAC9B,KAXD,CAWE,OAAOO,CAAP,EAAU,CAAE;;AACd,WAAO,KAAP;AACA,GAjBD;AAkBA,CAtBD,MAsBO;AACN;AACA;AACAJ,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACtC;AACA,WAAO,KAAP;AACA,GAHD;AAIA","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $WeakSet = GetIntrinsic('%WeakSet%', true);\n\nvar $setHas = callBound('WeakSet.prototype.has', true);\n\nif ($setHas) {\n\tvar $mapHas = callBound('WeakMap.prototype.has', true);\n\n\t/** @type {import('.')} */\n\tmodule.exports = function isWeakSet(x) {\n\t\tif (!x || typeof x !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t$setHas(x, $setHas);\n\t\t\tif ($mapHas) {\n\t\t\t\ttry {\n\t\t\t\t\t$mapHas(x, $mapHas);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't figure out that $WeakSet is always truthy here\n\t\t\treturn x instanceof $WeakSet; // core-js workaround, pre-v3\n\t\t} catch (e) {}\n\t\treturn false;\n\t};\n} else {\n\t/** @type {import('.')} */\n\t// eslint-disable-next-line no-unused-vars\n\tmodule.exports = function isWeakSet(x) {\n\t\t// `WeakSet` does not exist, or does not have a `has` method\n\t\treturn false;\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}