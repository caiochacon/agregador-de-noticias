{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\components\\\\group\\\\GroupsInput.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Input, Label, FormGroup } from \"reactstrap\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport { isEmpty } from \"common/utils/collections\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GroupsInput(props) {\n  _s();\n\n  const [selectedGroups, setSelectedGroups] = React.useState([]); //const [startGroupFlag, setStarGroupFlag] = React.useState(false);\n\n  const data = props.data;\n  const setData = props.setData;\n  const fieldName = props.fieldName;\n  React.useEffect(() => {\n    if (props.data && isEmpty(props.data[fieldName])) {\n      setSelectedGroups([]);\n    } else {\n      let tempSelectedGroups = [];\n\n      for (const groupId of props.data[fieldName]) {\n        Object.entries(props.conditions).forEach(key_value => {\n          if (groupId.toString() === key_value[1].toString()) {\n            tempSelectedGroups.push(key_value[0]);\n          }\n        });\n      }\n\n      setSelectedGroups(tempSelectedGroups); //setStarGroupFlag(true);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps  \n\n  }, [props]);\n\n  const changeData = groupsIDs => {\n    data[fieldName] = groupsIDs;\n    setData(data);\n  };\n\n  const handleDoubleClick = groupName => {\n    let updatedSelectedGroups = selectedGroups;\n\n    if (!selectedGroups.includes(groupName)) {\n      updatedSelectedGroups = [...selectedGroups, groupName];\n      setSelectedGroups(updatedSelectedGroups);\n    }\n\n    let groupsIDs = updatedSelectedGroups.map(group => String(props.conditions[group]));\n    changeData(groupsIDs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        for: \"exampleSelectMulti\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Visibilidade \", /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"(Para selecionar um grupo, realize um clique duplo sobre ele)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"select\",\n        name: \"selectMulti\",\n        id: \"exampleSelectMulti\",\n        readOnly: props.readOnly,\n        disabled: props.readOnly,\n        invalid: props.invalid,\n        multiple: true,\n        children: Object.entries(props.conditions).map(key_value => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key_value[1],\n            onDoubleClick: () => handleDoubleClick(key_value[0]),\n            children: key_value[0]\n          }, key_value[1], false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'marginBottom': '10px',\n        'marginTop': '12px'\n      },\n      children: selectedGroups.map(groupName => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tag\",\n          style: {\n            'marginLeft': '12px',\n            'marginTop': '100px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"first\",\n            children: \"Grupo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"second\",\n            children: [groupName, !props.readOnly && /*#__PURE__*/_jsxDEV(RiCloseCircleFill, {\n              style: {\n                cursor: \"pointer\",\n                color: \"#51cbce\",\n                marginLeft: \"5px\"\n              },\n              onClick: () => {\n                setSelectedGroups(selectedGroups.filter(group => group !== groupName));\n                const groupsIDs = selectedGroups.filter(group => group !== groupName).map(group => String(props.conditions[group]));\n                changeData(groupsIDs);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GroupsInput, \"PGFd14tHGVvBlNenWo2cxLLFy/c=\");\n\n_c = GroupsInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupsInput\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/group/GroupsInput.js"],"names":["React","Input","Label","FormGroup","RiCloseCircleFill","isEmpty","GroupsInput","props","selectedGroups","setSelectedGroups","useState","data","setData","fieldName","useEffect","tempSelectedGroups","groupId","Object","entries","conditions","forEach","key_value","toString","push","changeData","groupsIDs","handleDoubleClick","groupName","updatedSelectedGroups","includes","map","group","String","readOnly","invalid","cursor","color","marginLeft","filter"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n\tInput,\r\n    Label, \r\n    FormGroup\r\n} from \"reactstrap\";\r\nimport { RiCloseCircleFill } from \"react-icons/ri\"\r\nimport { isEmpty } from \"common/utils/collections\";\r\n\r\nexport default function GroupsInput(props) {\r\n\r\n    const [selectedGroups, setSelectedGroups] = React.useState([]);\r\n    //const [startGroupFlag, setStarGroupFlag] = React.useState(false);\r\n    const data = props.data\r\n    const setData = props.setData;\r\n    const fieldName = props.fieldName;\r\n\r\n    React.useEffect(() => {\r\n        if (props.data && isEmpty(props.data[fieldName])  ){\r\n            setSelectedGroups([])\r\n        } else {\r\n            let tempSelectedGroups = [];\r\n            for (const groupId of props.data[fieldName]){\r\n                Object.entries(props.conditions).forEach((key_value) => {\r\n                    if (groupId.toString() === key_value[1].toString()) {\r\n                        tempSelectedGroups.push(key_value[0]);\r\n                    }\r\n                });\r\n            }\r\n            setSelectedGroups(tempSelectedGroups);\r\n            //setStarGroupFlag(true);\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps  \r\n    }, [props]);\r\n\r\n    \r\n    const changeData = (groupsIDs) => {\r\n        data[fieldName] = groupsIDs\r\n        setData(data)\r\n    }\r\n\r\n    const handleDoubleClick = (groupName) => {\r\n        let updatedSelectedGroups = selectedGroups\r\n        if (!selectedGroups.includes(groupName)) {\r\n            updatedSelectedGroups = [...selectedGroups, groupName];\r\n            setSelectedGroups(updatedSelectedGroups);\r\n        }\r\n        let groupsIDs = updatedSelectedGroups.map((group) => String(props.conditions[group]));\r\n        changeData(groupsIDs)\r\n        \r\n    };\r\n\r\n    \r\n    return (\r\n        <>\r\n        <FormGroup>\r\n                <Label for=\"exampleSelectMulti\">\r\n                    <b>Visibilidade <small>(Para selecionar um grupo, realize um clique duplo sobre ele)</small></b>\r\n                </Label>\r\n                <Input\r\n                    type=\"select\"\r\n                    name=\"selectMulti\"\r\n                    id=\"exampleSelectMulti\"\r\n                    readOnly={props.readOnly}\r\n                    disabled={props.readOnly}\r\n                    invalid={props.invalid}\r\n                    multiple={true}\r\n                >\r\n                    {Object.entries(props.conditions).map((key_value) => {\r\n                        return (\r\n                            <option\r\n                                value={key_value[1]}\r\n                                key={key_value[1]}\r\n                                onDoubleClick={() => handleDoubleClick(key_value[0])}\r\n                            >\r\n                                {key_value[0]}\r\n                            </option>\r\n                        );\r\n                    })}\r\n                </Input>\r\n            </FormGroup>\r\n            <div style={{'marginBottom': '10px', 'marginTop': '12px'}}>\r\n                {selectedGroups.map((groupName) => {\r\n                    return (\r\n                        <span className=\"tag\" style={{'marginLeft': '12px', 'marginTop': '100px'}}>\r\n                            <span className=\"first\">\r\n                                Grupo\r\n                            </span>\r\n                            <span className=\"second\">\r\n                                {groupName}\r\n                                {!props.readOnly &&\r\n                                    <RiCloseCircleFill \r\n                                        style={{cursor: \"pointer\", color: \"#51cbce\", marginLeft: \"5px\"}}\r\n                                        onClick={() => {\r\n                                            setSelectedGroups(selectedGroups.filter((group) => group !== groupName));\r\n                                            const groupsIDs = selectedGroups.filter((group) => group !== groupName).map((group) => String(props.conditions[group]));\r\n                                            changeData(groupsIDs)\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            </span>\r\n                        </span>\r\n                    );\r\n                }\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}