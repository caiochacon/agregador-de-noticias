{"ast":null,"code":"import { OK } from \"components/modals/ModalConsts\";\nimport { ERROR } from \"components/modals/ModalConsts\";\nimport { DATA_ONLY, IMAGE_ONLY, MERGE, MODE_PANE_MAP } from \"./constants\";\nimport { wasSuccessRequest } from \"common/utils/errorTreatment\";\nimport { ID } from \"common/model/Notification\";\nimport { ID_IMAGE } from \"common/model/Image\";\nconst SUCESS_COUNT_TOKEN = \"#SUCESS_COUNT#\";\nconst COUNT_TOKEN = \"#COUNT#\";\nconst DEFAULT_MESSAGES = [[\"Falha na atualização dos campos da Notificação!\", \"Campos da Notificação atualizado com sucesso!\"], [\"Falha no envio da imagens! #SUCESS_COUNT#/#COUNT# das imagens enviadas`\", \"#SUCESS_COUNT#/#COUNT# das imagens enviadas com sucesso!\"]];\nconst CONFIRMATION_MESSAGES = {\n  0: \"Confirma a alteração dos campos desta Notificação?\",\n  1: \"Não há alteração de campos nesta Notificação a serem salvos. Deseja enviar apenas as imagens?\",\n  2: \"Confirma a alteração dos campos desta Notificação e o envio de suas imagens?\"\n};\nexport function formatConfirmationMessage(mode) {\n  return CONFIRMATION_MESSAGES[mode];\n} //Este método serve para marcar os nomes das abas que estão em edição.\n\nexport function formatTabNames(mode, tabIndex, label) {\n  for (const [key, value] of Object.entries(mode)) {\n    if (value === true) {\n      let tabs = MODE_PANE_MAP[key];\n\n      if (tabs.includes(tabIndex)) {\n        return label + \" [EM EDIÇÃO]\";\n      }\n    }\n  }\n\n  return label;\n} //Este método serve para marcar os nomes das abas que estão em edição.\n\nexport function formatTabBackground(mode, tabIndex, label) {\n  for (const [key, value] of Object.entries(mode)) {\n    if (value === true) {\n      let tabs = MODE_PANE_MAP[key];\n\n      if (tabs.includes(tabIndex)) {\n        return {\n          fontWeight: 550,\n          cursor: \"pointer\"\n        };\n      }\n    }\n  }\n\n  return {\n    cursor: \"pointer\"\n  };\n}\n\nfunction getMessageIndex(status) {\n  return status ? 1 : 0;\n}\n\nexport function formatCompletionData(mode, responses) {\n  let success = true;\n  let message = [];\n\n  if (mode === DATA_ONLY || mode === MERGE) {\n    let dataResponse = responses.shift();\n    success = success && wasSuccessRequest(dataResponse, ID);\n    message.push(DEFAULT_MESSAGES[DATA_ONLY][getMessageIndex(success)]);\n  }\n\n  if (mode === IMAGE_ONLY || mode === MERGE) {\n    let count = responses.length;\n    let sucessCount = 0;\n\n    for (const imageResponse of responses) {\n      if (wasSuccessRequest(imageResponse, ID_IMAGE)) {\n        sucessCount += 1;\n      }\n    }\n\n    success = success && count === sucessCount;\n    let indexMessage = getMessageIndex(count === sucessCount);\n    let imageMessage = DEFAULT_MESSAGES[IMAGE_ONLY][indexMessage];\n    imageMessage = imageMessage.replace(SUCESS_COUNT_TOKEN, sucessCount);\n    imageMessage = imageMessage.replace(COUNT_TOKEN, count);\n    message.push(imageMessage);\n  }\n\n  let result = {\n    message: message.join(\"\\n \"),\n    icon: success ? OK : ERROR\n  };\n  return result;\n}\nexport function formatFiscalAuditors(values) {\n  let fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'user_login';\n  let aux = [];\n\n  for (var value of values) {\n    if (value && value[fieldName]) {\n      aux.push(value[fieldName]);\n    }\n  }\n\n  return aux.length > 0 ? aux.sort().join(\",\") : null;\n}","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/components/modals/NotificationModal/utils/format-data.js"],"names":["OK","ERROR","DATA_ONLY","IMAGE_ONLY","MERGE","MODE_PANE_MAP","wasSuccessRequest","ID","ID_IMAGE","SUCESS_COUNT_TOKEN","COUNT_TOKEN","DEFAULT_MESSAGES","CONFIRMATION_MESSAGES","formatConfirmationMessage","mode","formatTabNames","tabIndex","label","key","value","Object","entries","tabs","includes","formatTabBackground","fontWeight","cursor","getMessageIndex","status","formatCompletionData","responses","success","message","dataResponse","shift","push","count","length","sucessCount","imageResponse","indexMessage","imageMessage","replace","result","join","icon","formatFiscalAuditors","values","fieldName","aux","sort"],"mappings":"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","sourcesContent":["import { OK } from \"components/modals/ModalConsts\";\r\nimport { ERROR } from \"components/modals/ModalConsts\";\r\nimport { DATA_ONLY, IMAGE_ONLY, MERGE, MODE_PANE_MAP } from \"./constants\";\r\nimport { wasSuccessRequest } from \"common/utils/errorTreatment\";\r\nimport { ID } from \"common/model/Notification\";\r\nimport { ID_IMAGE } from \"common/model/Image\";\r\n\r\n\r\nconst SUCESS_COUNT_TOKEN = \"#SUCESS_COUNT#\"\r\nconst COUNT_TOKEN = \"#COUNT#\"\r\n\r\nconst DEFAULT_MESSAGES = [\r\n  [ \r\n    \"Falha na atualização dos campos da Notificação!\",\r\n    \"Campos da Notificação atualizado com sucesso!\"\r\n  ],\r\n  [ \r\n    \"Falha no envio da imagens! #SUCESS_COUNT#/#COUNT# das imagens enviadas`\",\r\n    \"#SUCESS_COUNT#/#COUNT# das imagens enviadas com sucesso!\"\r\n  ],\r\n]\r\n\r\nconst CONFIRMATION_MESSAGES = {\r\n  0 : \"Confirma a alteração dos campos desta Notificação?\",\r\n  1 : \"Não há alteração de campos nesta Notificação a serem salvos. Deseja enviar apenas as imagens?\",\r\n  2 : \"Confirma a alteração dos campos desta Notificação e o envio de suas imagens?\",\r\n}\r\n\r\nexport function formatConfirmationMessage(mode){\r\n  return CONFIRMATION_MESSAGES[mode]\r\n}\r\n\r\n//Este método serve para marcar os nomes das abas que estão em edição.\r\nexport function formatTabNames(mode, tabIndex, label){\r\n  for (const [key, value] of Object.entries(mode)) {\r\n    if (value === true){\r\n      let tabs = MODE_PANE_MAP[key]\r\n      if (tabs.includes(tabIndex)){\r\n        return label + \" [EM EDIÇÃO]\"\r\n      }\r\n    }\r\n  }\r\n  return label\r\n}\r\n\r\n//Este método serve para marcar os nomes das abas que estão em edição.\r\nexport function formatTabBackground(mode, tabIndex, label){\r\n  for (const [key, value] of Object.entries(mode)) {\r\n    if (value === true){\r\n      let tabs = MODE_PANE_MAP[key]\r\n      if (tabs.includes(tabIndex)){\r\n        return {fontWeight: 550, cursor: \"pointer\"}\r\n      }\r\n    }\r\n  }\r\n  return {cursor: \"pointer\"}\r\n}\r\n\r\n\r\n\r\nfunction getMessageIndex(status){\r\n  return status ? 1 : 0\r\n}\r\n\r\n\r\nexport function formatCompletionData(mode, responses){\r\n  \r\n  let success = true\r\n  let message = []\r\n  if (mode === DATA_ONLY ||  mode === MERGE){ \r\n    let dataResponse = responses.shift()\r\n    success = success && wasSuccessRequest(dataResponse, ID)\r\n    message.push(DEFAULT_MESSAGES[DATA_ONLY][getMessageIndex(success)])\r\n  } if (mode === IMAGE_ONLY ||  mode === MERGE){ \r\n    \r\n    let count = responses.length\r\n    let sucessCount = 0\r\n    for (const imageResponse of responses){\r\n      if (wasSuccessRequest(imageResponse, ID_IMAGE)){\r\n        sucessCount+= 1\r\n      }\r\n    }\r\n    success = success && count === sucessCount\r\n    let indexMessage = getMessageIndex(count === sucessCount) \r\n    let imageMessage = DEFAULT_MESSAGES[IMAGE_ONLY][indexMessage]\r\n    imageMessage = imageMessage.replace(SUCESS_COUNT_TOKEN, sucessCount)\r\n    imageMessage = imageMessage.replace(COUNT_TOKEN, count)\r\n\r\n    message.push(imageMessage)\r\n  }\r\n  \r\n  let result = {\r\n    message: message.join(\"\\n \"), \r\n    icon :  (success) ? OK : ERROR\r\n  }\r\n  return result\r\n}\r\n\r\n\r\nexport function formatFiscalAuditors (values, fieldName = 'user_login') {\r\n    let aux = []\r\n    for (var value of values) {\r\n      if (value && value[fieldName]) {\r\n        aux.push(value[fieldName])\r\n      }\r\n    }\r\n    return aux.length > 0 ? aux.sort().join(\",\") : null\r\n  }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}