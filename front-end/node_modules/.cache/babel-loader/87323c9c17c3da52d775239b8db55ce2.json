{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createOrderByClause, createQueryHttpRequestBody, createSimpleFilterClause } from \"./AxiosUtils\";\nexport default function ReadVehicleLocations() {\n  const LAST_LOCATIONS_QTD = 5;\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const readVehicleLocationsRequest = async plate => {\n    let orderBy = createOrderByClause(\"evento_infevento_dhregpassagem\", \"desc\");\n    let filters = [createSimpleFilterClause(\"evento_infevento_nrplaca\", \"char\", \"equal\", plate)];\n    const vehicleHttpRequestBody = createQueryHttpRequestBody(filters, orderBy);\n    const vehicleUrl = \"\".concat(env.apiAddress, \"/events/read_all?page=1&page_size=\").concat(LAST_LOCATIONS_QTD);\n\n    try {\n      let response = await axiosRetryProxy.post(vehicleUrl, vehicleHttpRequestBody);\n      return response.data;\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  };\n\n  return {\n    readVehicleLocationsRequest\n  };\n}\n_c = ReadVehicleLocations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadVehicleLocations\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/axios/ReadVehicleLocations.js"],"names":["axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createOrderByClause","createQueryHttpRequestBody","createSimpleFilterClause","ReadVehicleLocations","LAST_LOCATIONS_QTD","axiosRetryProxy","create","readVehicleLocationsRequest","plate","orderBy","filters","vehicleHttpRequestBody","vehicleUrl","apiAddress","response","post","data","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,SAASC,mBAAT,EAA8BC,0BAA9B,EAA0DC,wBAA1D,QAA0F,cAA1F;AAEA,eAAe,SAASC,oBAAT,GAAgC;AAE7C,QAAMC,kBAAkB,GAAG,CAA3B;AAEA,QAAMC,eAAe,GAAGV,KAAK,CAACW,MAAN,CAAaT,gBAAgB,EAA7B,CAAxB;AACAD,EAAAA,UAAU,CAACS,eAAD,EAAkBP,cAAc,EAAhC,CAAV;;AAEA,QAAMS,2BAA2B,GAAG,MAAOC,KAAP,IAAiB;AAEnD,QAAIC,OAAO,GAAGT,mBAAmB,CAAC,gCAAD,EAAmC,MAAnC,CAAjC;AACA,QAAIU,OAAO,GAAG,CAACR,wBAAwB,CAAC,0BAAD,EAA6B,MAA7B,EAAqC,OAArC,EAA8CM,KAA9C,CAAzB,CAAd;AAEA,UAAMG,sBAAsB,GAAGV,0BAA0B,CAACS,OAAD,EAAUD,OAAV,CAAzD;AACA,UAAMG,UAAU,aAAMb,GAAG,CAACc,UAAV,+CAAyDT,kBAAzD,CAAhB;;AACA,QAAI;AACF,UAAIU,QAAQ,GAAG,MAAMT,eAAe,CAACU,IAAhB,CAAqBH,UAArB,EAAiCD,sBAAjC,CAArB;AACA,aAAOG,QAAQ,CAACE,IAAhB;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAP;AACD;AAGF,GAhBD;;AAkBA,SAAO;AAAEV,IAAAA;AAAF,GAAP;AACD;KA1BuBJ,oB","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\n\r\nimport { createOrderByClause, createQueryHttpRequestBody, createSimpleFilterClause } from \"./AxiosUtils\";\r\n\r\nexport default function ReadVehicleLocations() {\r\n\r\n  const LAST_LOCATIONS_QTD = 5\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const readVehicleLocationsRequest = async (plate) => {\r\n\r\n    let orderBy = createOrderByClause(\"evento_infevento_dhregpassagem\", \"desc\")\r\n    let filters = [createSimpleFilterClause(\"evento_infevento_nrplaca\", \"char\", \"equal\", plate)]\r\n\r\n    const vehicleHttpRequestBody = createQueryHttpRequestBody(filters, orderBy)\r\n    const vehicleUrl = `${env.apiAddress}/events/read_all?page=1&page_size=${LAST_LOCATIONS_QTD}`\r\n    try {\r\n      let response = await axiosRetryProxy.post(vehicleUrl, vehicleHttpRequestBody)\r\n      return response.data\r\n    } catch (err) {\r\n      console.log(err)\r\n      return err\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  return { readVehicleLocationsRequest }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}