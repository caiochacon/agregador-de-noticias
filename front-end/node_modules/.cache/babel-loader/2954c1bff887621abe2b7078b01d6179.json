{"ast":null,"code":"var _jsxFileName = \"C:\\\\aria\\\\cicc-app\\\\front-end\\\\src\\\\views\\\\PoliceCars.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Card, CardBody, Form, FormGroup, Label, Input, Button, Modal, ModalBody, ModalHeader, Col } from 'reactstrap';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\nimport { NavigationContext } from 'context/NavigationContext';\nimport { WarningsContext } from 'context/WarningsContext';\nimport env from 'common/enviroment';\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\nimport GROUP_TYPE_ENUM from 'common/enumerators/GroupTypeEnum';\nimport Tabs from 'components/Tabs';\nimport TagsInput from 'components/tags/TagsInput';\nimport Table from 'components/tables/Table';\nimport EditionButtons from 'components/buttons/EditionButtons';\nimport ModalEditionButtons from 'components/buttons/ModalEditionButtons';\nimport ConfirmationModal from 'components/modals/ConfirmationModal ';\nimport MessageModal from 'components/modals/MessageModal';\nimport RevisionModal from 'components/modals/RevisionModal';\nimport { NumericFilter } from 'common/utils/filters';\nimport { isAdmin, isLoggedIn } from 'common/SessionUtils';\nimport { createRevisionModalData } from 'components/modals/RevisionModal';\nimport { ERROR, EXCLUSION, CREATION, EDITION } from 'components/modals/ModalConsts';\nimport { createBaseHttpRequestBody, createBaseHttpRequestBody as createEditionHttpRequestBody, createQueryHttpRequestBody, createOrderByClause, createSimpleFilterClause } from 'axios/AxiosUtils';\nimport { ViewsContext } from 'context/ViewsContext';\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\nimport { OR_FILTER } from 'axios/AxiosUtils'; // Não usado pois, não há campo opcional no Form\n// import { isEmpty } from 'common/utils/collections'; \n\nimport { treatResponse } from 'common/utils/errorTreatment';\nimport treatError from 'common/utils/errorTreatment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BLANK_FORM_DATA = {\n  \"police_car_id\": \"\",\n  \"police_car_name\": \"\",\n  \"police_car_description\": \"\"\n};\nconst GERENCIA_OPTIONS = {\n  \"Selecione uma opção\": \"\",\n  \"GR1 - JOÃO PESSOA\": \"2\",\n  \"GR2 - GUARABIRA\": \"3\",\n  \"GR3 - CAMPINA GRANDE\": \"4\",\n  \"GR4 - PATOS\": \"5\",\n  \"GR5 - CAJAZEIRAS\": \"6\",\n  \"COE\": \"7\",\n  \"GECOF\": \"GECOF\",\n  \"GEOFMT\": \"GEOFMT\",\n  \"SEFAZ\": \"SEFAZ\",\n  \"---------------------\": \"  \",\n  \"USUÁRIO EXTERNO\": \"USUÁRIO EXTERNO\"\n};\nexport default function Auditors() {\n  _s();\n\n  const history = useHistory();\n  const {\n    refresh,\n    refreshFlag,\n    auditorsFilters,\n    setAuditorsFilters\n  } = React.useContext(ViewsContext);\n  const {\n    startSSE,\n    wasReloaded,\n    setWasReloaded\n  } = React.useContext(WarningsContext);\n  const {\n    setIsMap\n  } = React.useContext(NavigationContext);\n  const [spinner, setSpinner] = React.useState(false);\n  const [isloading, setIsLoading] = React.useState(false);\n  const [pageIndex, setPageIndex] = React.useState(0);\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const [filters, setFilters] = React.useState([]);\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA);\n  const [oldFormData, setOldFormData] = React.useState(BLANK_FORM_DATA);\n  const [invalid, setInvalid] = React.useState(false);\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\n  const [modalType, setModalType] = React.useState(-1);\n  const [isModalActive, setIsModalActive] = React.useState(false);\n  const [modalData, setModalData] = React.useState({});\n\n  const toggleModalOn = type => {\n    setModalType(type);\n    setIsModalActive(true);\n  };\n\n  const toggleModalOff = () => {\n    setModalType(MODAL_TYPE_ENUM.NONE);\n    setIsModalActive(false);\n  };\n\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\n\n  const toggleEditionModal = () => setEditionModal(prev => !prev);\n\n  const [groupsOptions, setGroupsOptions] = React.useState(GERENCIA_OPTIONS);\n\n  const mountRetrievalFilters = filters => {\n    let orClauses = [];\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL));\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO));\n    let groupsFilter = createCompositeFilterClause(\"group_type\", OR_FILTER, orClauses);\n    filters.push(groupsFilter);\n  };\n\n  React.useEffect(() => {\n    let filters = [];\n    mountRetrievalFilters(filters);\n    let orderBy = createOrderByClause('police_car_name', \"asc\");\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy); // Request para obter as opções de gerência\n    // DESATIVADO POR: Não há informações de GRE envolvendo Carros de Polícia\n    // axios.post(`${env.apiAddress}/group/read_all`, httpRequestBody)\n    //   .then(res => {\n    //     let create_options  = {}\n    //     create_options['0'] = {group_id: 0, group_description: \"SEFAZ\", group_name: \"SEFAZ\"}\n    //     for (let group in res.data){\n    //       create_options[res.data[group].group_id] = {group_id: res.data[group].group_id, group_description: res.data[group].group_description, group_name: res.data[group].group_name}\n    //     }\n    //     setGroupsOptions(create_options)\n    //   }).catch(err => {})\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    if (isLoggedIn()) {\n      setIsMap(false);\n      refresh();\n\n      if (wasReloaded) {\n        startSSE();\n        setWasReloaded(false);\n      }\n\n      if (tabIndex === 1) {\n        if (filters && filters.length > 0) setIsLoading(true);\n        setPageIndex(() => 0);\n      } else if (tabIndex === 0) {\n        cleanInputs();\n        setModalReadonlyMode(false);\n      }\n    } else {\n      history.push('/login');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filters, pageIndex]);\n\n  const hasEmptyValues = obj => Object.values({ ...obj,\n    \"user_id\": 1,\n    \"user_phone\": '1'\n  }).some(x => typeof x === 'string' && x.trim() === \"\");\n\n  const isEqual = (obj1, obj2) => {\n    for (let key in obj1) {\n      if (obj1[key] !== obj2[key]) return false;\n    }\n\n    return true;\n  };\n\n  const cleanInputs = () => {\n    setFormData(BLANK_FORM_DATA);\n    setOldFormData(BLANK_FORM_DATA);\n  };\n\n  const openEditionModal = function (data) {\n    let readOnlyMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (data) {\n      setOldFormData(data);\n      setFormData(data);\n      setInvalid(false);\n      setModalReadonlyMode(readOnlyMode);\n      setEditionModal(true);\n    }\n  };\n\n  const openRevisionModal = () => {\n    if (hasEmptyValues(formData)) {\n      setInvalid(true);\n    } else {\n      setInvalid(false);\n      let data = createRevisionModalData(\"Revise os Dados do Carro de Polícia\", [\"Id\", \"Nome\", \"Descrição\"], [formData.police_car_id, formData.police_car_name, formData.police_car_description]);\n      setModalData(data);\n      toggleModalOn(MODAL_TYPE_ENUM.REVISION);\n    }\n  };\n\n  const openConfirmationModal = () => {\n    if (hasEmptyValues(formData)) {\n      setInvalid(true);\n    } else if (isEqual(formData, oldFormData)) {\n      setInvalid(true);\n      setModalData({\n        operation: EDITION,\n        messageType: ERROR,\n        message: \"Não há alterações a serem salvas para este Carro de Polícia!\"\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    } else {\n      setInvalid(false);\n      setModalData({\n        entity: \"e Carro de Polícia\",\n        operation: EDITION\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION);\n    }\n  };\n\n  const openDeleteModal = (id, name) => {\n    if (id) {\n      setFormData({ ...formData,\n        \"police_car_id\": id\n      });\n      setModalData({\n        entity: \"e Carro de Pol\\xEDcia \".concat(id),\n        operation: EXCLUSION,\n        id: id\n      });\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION);\n    }\n  };\n\n  const createReadHttpRequestBody = () => {\n    let orderBy = createOrderByClause(\"police_car_id\", \"asc\");\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy);\n    console.log(\"httpRequestBody \", httpRequestBody);\n    return httpRequestBody;\n  };\n\n  const createCountHttpRequestBody = () => {\n    let httpRequestBody = createBaseHttpRequestBody();\n    httpRequestBody['filters'] = filters;\n    return httpRequestBody;\n  };\n\n  const createPoliceCar = () => {\n    const httpRequestBody = createEditionHttpRequestBody();\n    httpRequestBody['police_car_id'] = formData.police_car_id;\n    httpRequestBody['police_car_name'] = formData.police_car_name;\n    httpRequestBody['police_car_description'] = formData.police_car_description;\n    httpRequestBody['police_car_modification_date'] = new Date().toISOString();\n    setSpinner(true);\n    let entity = \"do Carro de Polícia\";\n    axios.post(\"\".concat(env.apiAddress, \"/police_car/create\"), httpRequestBody).then(res => {\n      treatResponse(entity, CREATION, 'police_car_id', res, setModalData, refresh);\n    }).catch(err => {\n      setModalData(treatError(err, entity, CREATION));\n      console.log(err);\n    }).finally(() => {\n      cleanInputs();\n      setSpinner(false);\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n    });\n  };\n\n  const deletePoliceCar = id => {\n    let httpRequestBody = createEditionHttpRequestBody();\n    setSpinner(true);\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n\n    if (isEditionModalActive) {\n      toggleEditionModal();\n    }\n\n    let entity = \"do Carro de Polícia\";\n    axios.delete(\"\".concat(env.apiAddress, \"/police_car/delete/\").concat(id), {\n      data: httpRequestBody\n    }).then(res => {\n      treatResponse(entity, EXCLUSION, 'police_car_id', res, setModalData, refresh);\n    }).catch(err => {\n      setModalData(treatError(err, entity, EXCLUSION));\n    }).finally(() => {\n      setSpinner(false);\n    });\n  };\n\n  const updatePoliceCar = () => {\n    if (hasEmptyValues(formData)) setInvalid(true);else {\n      setSpinner(true);\n      toggleEditionModal();\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE);\n      const httpRequestBody = createEditionHttpRequestBody();\n      httpRequestBody['police_car_id'] = formData.police_car_id;\n      httpRequestBody['police_car_name'] = formData.police_car_name;\n      httpRequestBody['police_car_description'] = formData.police_car_description;\n      httpRequestBody['police_car_modification_date'] = new Date().toISOString();\n      let entity = \"do Carro de Polícia\";\n      axios.patch(\"\".concat(env.apiAddress, \"/police_car/update/\").concat(formData.police_car_id), httpRequestBody).then(res => {\n        treatResponse(entity, EDITION, 'police_car_id', res, setModalData, refresh);\n      }).catch(err => {\n        setModalData(treatError(err, entity, EDITION));\n      }).finally(() => {\n        setSpinner(false);\n        cleanInputs();\n      });\n    }\n  };\n\n  const isDisabled = () => {\n    return !isAdmin();\n  };\n\n  const EditionForm = props => {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: \"5px 0px 10px 0px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        row: true,\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"id\",\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: formData.police_car_id,\n            maxLength: \"10\",\n            readOnly: modalReadonlyMode,\n            onChange: e => setFormData({ ...formData,\n              'police_car_id': e.target.value\n            }),\n            invalid: invalid && formData.police_car_id.trim() === \"\"\n          }, \"A0\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        row: true,\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"name\",\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: formData.police_car_name,\n            maxLength: \"20\",\n            readOnly: modalReadonlyMode,\n            onKeyPress: event => {\n              NumericFilter(event);\n            },\n            onChange: e => setFormData({ ...formData,\n              'police_car_name': e.target.value\n            }),\n            invalid: invalid && formData.police_car_name.trim() === \"\"\n          }, \"A1\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        row: true,\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"name\",\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Descri\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: formData.police_car_description,\n            readOnly: modalReadonlyMode,\n            maxLength: \"60\",\n            onKeyPress: event => {\n              NumericFilter(event);\n            },\n            onChange: e => setFormData({ ...formData,\n              'police_car_description': e.target.value\n            }),\n            invalid: invalid && formData.police_car_description.trim() === \"\"\n          }, \"A2\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 6\n      }, this), props.isCreationForm ? /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: () => {\n          openRevisionModal();\n        },\n        style: {\n          marginTop: '2rem'\n        },\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(ModalEditionButtons, {\n        id: formData.user_id,\n        data: formData,\n        modalReadonlyMode: modalReadonlyMode,\n        setModalReadonlyMode: setModalReadonlyMode,\n        isDisabled: isDisabled,\n        editionAction: setModalReadonlyMode,\n        deleteAction: openDeleteModal,\n        saveAction: openConfirmationModal,\n        cancelAction: toggleEditionModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, \"A\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        names: ['Cadastrar Novo Carro de Polícia', 'Gerenciamento de Carros de Polícia'],\n        index: [tabIndex, setTabIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card\",\n        style: {\n          borderTopLeftRadius: '0px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [tabIndex === 0 && EditionForm({\n            isCreationForm: true,\n            isModal: false\n          }), tabIndex === 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TagsInput, {\n              tagsState: [auditorsFilters, setAuditorsFilters],\n              setQuery: setFilters,\n              columns: {\n                \"Nome\": {\n                  field: \"police_car_name\",\n                  column_type: \"char\",\n                  size: 20\n                },\n                \"ID\": {\n                  field: \"police_car_id\",\n                  column_type: \"char\",\n                  size: 10\n                },\n                \"Descrição\": {\n                  field: \"police_car_description\",\n                  column_type: \"char\",\n                  size: 60\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataUrl: \"/police_car/read_all\",\n              countUrl: \"\",\n              count: \"17\",\n              requestBody: createReadHttpRequestBody,\n              countRequestBody: createCountHttpRequestBody,\n              tags: filters,\n              fillData: true,\n              retrieveData: data => data,\n              refresh: refreshFlag,\n              trProps: row => {\n                return {\n                  onDoubleClick: e => {\n                    openEditionModal(row, true);\n                  }\n                };\n              },\n              loading: [isloading, setIsLoading],\n              columns: {\n                \"ID\": {\n                  args: \"police_car_id\",\n                  tdStyle: {\n                    wordBreak: 'break-word'\n                  }\n                },\n                \"Nome\": {\n                  args: \"police_car_name\",\n                  tdStyle: {\n                    wordBreak: 'break-word'\n                  }\n                },\n                \"Descrição\": {\n                  args: \"police_car_description\",\n                  tdStyle: {\n                    wordBreak: 'break-word'\n                  }\n                },\n                \"Última Modificação\": {\n                  args: \"police_car_modification_date\",\n                  tdStyle: {\n                    wordBreak: 'break-word'\n                  }\n                },\n                \"Ações\": {\n                  args: [\"police_car_id\", \"police_car_name\"],\n                  tdStyle: {\n                    textAlign: 'center'\n                  },\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  Func: _ref => {\n                    let {\n                      data,\n                      row_data\n                    } = _ref;\n                    return /*#__PURE__*/_jsxDEV(EditionButtons, {\n                      isModal: false,\n                      data: row_data,\n                      id: data[0],\n                      modalReadonlyMode: modalReadonlyMode,\n                      setModalReadonlyMode: setModalReadonlyMode,\n                      isDisabled: isDisabled,\n                      editionAction: openEditionModal,\n                      deleteAction: openDeleteModal\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 457,\n                      columnNumber: 53\n                    }, this);\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), isEditionModalActive && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isEditionModalActive,\n      toggle: () => {\n        cleanInputs();\n        toggleEditionModal();\n      },\n      style: {\n        maxWidth: '70%'\n      },\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => {\n          cleanInputs();\n          toggleEditionModal();\n        },\n        children: \"Auditor Fiscal Cadastrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        style: {\n          justifyContent: 'center',\n          alignContent: 'center',\n          padding: '0.5rem'\n        },\n        children: EditionForm({\n          isCreationForm: false,\n          isModal: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 9\n    }, this), modalType === MODAL_TYPE_ENUM.CONFIRMATION && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      actionMethods: [undefined, updatePoliceCar, deletePoliceCar]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 54\n    }, this), modalType === MODAL_TYPE_ENUM.MESSAGE && /*#__PURE__*/_jsxDEV(MessageModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 49\n    }, this), modalType === MODAL_TYPE_ENUM.REVISION && /*#__PURE__*/_jsxDEV(RevisionModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData,\n      actionMethod: createPoliceCar,\n      spinner: spinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 50\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Auditors, \"Fb1HvlRvdlZ8laZMIRJ1fi2aN1w=\", false, function () {\n  return [useHistory];\n});\n\n_c = Auditors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auditors\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/views/PoliceCars.js"],"names":["React","Card","CardBody","Form","FormGroup","Label","Input","Button","Modal","ModalBody","ModalHeader","Col","axios","useHistory","NavigationContext","WarningsContext","env","MODAL_TYPE_ENUM","GROUP_TYPE_ENUM","Tabs","TagsInput","Table","EditionButtons","ModalEditionButtons","ConfirmationModal","MessageModal","RevisionModal","NumericFilter","isAdmin","isLoggedIn","createRevisionModalData","ERROR","EXCLUSION","CREATION","EDITION","createBaseHttpRequestBody","createEditionHttpRequestBody","createQueryHttpRequestBody","createOrderByClause","createSimpleFilterClause","ViewsContext","createCompositeFilterClause","OR_FILTER","treatResponse","treatError","BLANK_FORM_DATA","GERENCIA_OPTIONS","Auditors","history","refresh","refreshFlag","auditorsFilters","setAuditorsFilters","useContext","startSSE","wasReloaded","setWasReloaded","setIsMap","spinner","setSpinner","useState","isloading","setIsLoading","pageIndex","setPageIndex","tabIndex","setTabIndex","filters","setFilters","formData","setFormData","oldFormData","setOldFormData","invalid","setInvalid","modalReadonlyMode","setModalReadonlyMode","modalType","setModalType","isModalActive","setIsModalActive","modalData","setModalData","toggleModalOn","type","toggleModalOff","NONE","isEditionModalActive","setEditionModal","toggleEditionModal","prev","groupsOptions","setGroupsOptions","mountRetrievalFilters","orClauses","push","INSTITUCIONAL","SIGILOSO","groupsFilter","useEffect","orderBy","httpRequestBody","length","cleanInputs","hasEmptyValues","obj","Object","values","some","x","trim","isEqual","obj1","obj2","key","openEditionModal","data","readOnlyMode","openRevisionModal","police_car_id","police_car_name","police_car_description","REVISION","openConfirmationModal","operation","messageType","message","MESSAGE","entity","CONFIRMATION","openDeleteModal","id","name","createReadHttpRequestBody","console","log","createCountHttpRequestBody","createPoliceCar","Date","toISOString","post","apiAddress","then","res","catch","err","finally","deletePoliceCar","delete","updatePoliceCar","patch","isDisabled","EditionForm","props","margin","e","target","value","event","isCreationForm","marginTop","user_id","borderTopLeftRadius","isModal","field","column_type","size","row","onDoubleClick","args","tdStyle","wordBreak","textAlign","thStyle","Func","row_data","maxWidth","justifyContent","alignContent","padding","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Col,\r\n} from 'reactstrap';\r\n\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { NavigationContext } from 'context/NavigationContext'\r\nimport { WarningsContext } from 'context/WarningsContext';\r\n\r\nimport env from 'common/enviroment'\r\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\r\nimport GROUP_TYPE_ENUM from 'common/enumerators/GroupTypeEnum'\r\n\r\nimport Tabs from 'components/Tabs';\r\nimport TagsInput from 'components/tags/TagsInput';\r\nimport Table from 'components/tables/Table';\r\nimport EditionButtons from 'components/buttons/EditionButtons';\r\nimport ModalEditionButtons from 'components/buttons/ModalEditionButtons';\r\n\r\nimport ConfirmationModal from 'components/modals/ConfirmationModal ';\r\nimport MessageModal from 'components/modals/MessageModal';\r\nimport RevisionModal from 'components/modals/RevisionModal';\r\n\r\nimport { NumericFilter } from 'common/utils/filters';\r\nimport { isAdmin, isLoggedIn } from 'common/SessionUtils';\r\nimport { createRevisionModalData } from 'components/modals/RevisionModal';\r\nimport { ERROR, EXCLUSION, CREATION, EDITION } from 'components/modals/ModalConsts';\r\nimport { createBaseHttpRequestBody, createBaseHttpRequestBody as createEditionHttpRequestBody, createQueryHttpRequestBody, createOrderByClause, createSimpleFilterClause} from 'axios/AxiosUtils';\r\nimport { ViewsContext } from 'context/ViewsContext';\r\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\r\nimport { OR_FILTER } from 'axios/AxiosUtils';\r\n// Não usado pois, não há campo opcional no Form\r\n// import { isEmpty } from 'common/utils/collections'; \r\nimport { treatResponse } from 'common/utils/errorTreatment';\r\nimport treatError from 'common/utils/errorTreatment';\r\n\r\nconst BLANK_FORM_DATA = {\r\n  \"police_car_id\": \"\",\r\n  \"police_car_name\": \"\",\r\n  \"police_car_description\": \"\",\r\n}\r\n\r\nconst GERENCIA_OPTIONS = {\r\n  \"Selecione uma opção\": \"\",\r\n  \"GR1 - JOÃO PESSOA\": \"2\",\r\n  \"GR2 - GUARABIRA\": \"3\",\r\n  \"GR3 - CAMPINA GRANDE\": \"4\",\r\n  \"GR4 - PATOS\": \"5\",\r\n  \"GR5 - CAJAZEIRAS\": \"6\",\r\n  \"COE\": \"7\",\r\n  \"GECOF\": \"GECOF\",\r\n  \"GEOFMT\": \"GEOFMT\",\r\n  \"SEFAZ\": \"SEFAZ\",\r\n  \"---------------------\": \"  \",\r\n  \"USUÁRIO EXTERNO\": \"USUÁRIO EXTERNO\",\r\n}\r\n\r\nexport default function Auditors() {\r\n  const history = useHistory()\r\n\r\n  const { refresh, refreshFlag, auditorsFilters, setAuditorsFilters } = React.useContext(ViewsContext)\r\n  const { startSSE, wasReloaded, setWasReloaded } = React.useContext(WarningsContext);\r\n  const { setIsMap } = React.useContext(NavigationContext);\r\n\r\n  const [spinner, setSpinner] = React.useState(false)\r\n  const [isloading, setIsLoading] = React.useState(false)\r\n  const [pageIndex, setPageIndex] = React.useState(0)\r\n  const [tabIndex, setTabIndex] = React.useState(0)\r\n\r\n  const [filters, setFilters] = React.useState([])\r\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA)\r\n  const [oldFormData, setOldFormData] = React.useState(BLANK_FORM_DATA)\r\n  const [invalid, setInvalid] = React.useState(false)\r\n\r\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\r\n  const [modalType, setModalType] = React.useState(-1);\r\n  const [isModalActive, setIsModalActive] = React.useState(false);\r\n  const [modalData, setModalData] = React.useState({});\r\n  const toggleModalOn = (type) => { setModalType(type); setIsModalActive(true); };\r\n  const toggleModalOff = () => { setModalType(MODAL_TYPE_ENUM.NONE); setIsModalActive(false); }\r\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\r\n  const toggleEditionModal = () => setEditionModal(prev => !prev);\r\n  const [groupsOptions, setGroupsOptions] = React.useState(GERENCIA_OPTIONS)\r\n\r\n  const mountRetrievalFilters = (filters) => {\r\n    let orClauses = []\r\n    \r\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.INSTITUCIONAL))\r\n    orClauses.push(createSimpleFilterClause(\"group_type\", \"int\", \"equal\", GROUP_TYPE_ENUM.SIGILOSO))\r\n    \r\n    let groupsFilter = createCompositeFilterClause(\"group_type\", OR_FILTER, orClauses)\r\n    filters.push(groupsFilter)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    let filters = [] \r\n    mountRetrievalFilters(filters)\r\n\r\n    let orderBy = createOrderByClause('police_car_name', \"asc\")\r\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy)\r\n\r\n    // Request para obter as opções de gerência\r\n    // DESATIVADO POR: Não há informações de GRE envolvendo Carros de Polícia\r\n    // axios.post(`${env.apiAddress}/group/read_all`, httpRequestBody)\r\n    //   .then(res => {\r\n    //     let create_options  = {}\r\n    //     create_options['0'] = {group_id: 0, group_description: \"SEFAZ\", group_name: \"SEFAZ\"}\r\n        \r\n    //     for (let group in res.data){\r\n    //       create_options[res.data[group].group_id] = {group_id: res.data[group].group_id, group_description: res.data[group].group_description, group_name: res.data[group].group_name}\r\n    //     }\r\n    //     setGroupsOptions(create_options)\r\n    //   }).catch(err => {})\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      setIsMap(false);\r\n      refresh()\r\n      if (wasReloaded) {\r\n        startSSE()\r\n        setWasReloaded(false)\r\n      }\r\n\r\n      if (tabIndex === 1) {\r\n        if (filters && filters.length > 0)\r\n          setIsLoading(true)\r\n\r\n        setPageIndex(() => (0))\r\n      } else if (tabIndex === 0) {\r\n        cleanInputs();\r\n        setModalReadonlyMode(false);\r\n      }\r\n\r\n    } else {\r\n      history.push('/login')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filters, pageIndex])\r\n\r\n  const hasEmptyValues = (obj) => Object.values({ ...obj, \"user_id\": 1, \"user_phone\" : '1' }).some(x => typeof x === 'string' && x.trim() === \"\")\r\n\r\n  const isEqual = (obj1, obj2) => {\r\n    for (let key in obj1) {\r\n      if (obj1[key] !== obj2[key])\r\n        return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const cleanInputs = () => {\r\n    setFormData(BLANK_FORM_DATA)\r\n    setOldFormData(BLANK_FORM_DATA)\r\n  }\r\n\r\n  const openEditionModal = (data, readOnlyMode = false) => {\r\n    if (data) {\r\n      setOldFormData(data)\r\n      setFormData(data)\r\n      setInvalid(false);\r\n\r\n      setModalReadonlyMode(readOnlyMode);\r\n      setEditionModal(true)\r\n    }\r\n  }\r\n\r\n  const openRevisionModal = () => {\r\n    if (hasEmptyValues(formData)) {\r\n      setInvalid(true)\r\n    }\r\n    else {\r\n      setInvalid(false)\r\n\r\n      let data = createRevisionModalData(\"Revise os Dados do Carro de Polícia\",\r\n        [\r\n          \"Id\",\r\n          \"Nome\",\r\n          \"Descrição\",\r\n        ],\r\n        [\r\n          formData.police_car_id,\r\n          formData.police_car_name,\r\n          formData.police_car_description,\r\n        ]\r\n        )\r\n      setModalData(data)\r\n      toggleModalOn(MODAL_TYPE_ENUM.REVISION)\r\n    }\r\n  };\r\n\r\n  const openConfirmationModal = () => {\r\n    if (hasEmptyValues(formData)) {\r\n      setInvalid(true)\r\n    }\r\n    else if (isEqual(formData, oldFormData)) {\r\n      setInvalid(true)\r\n      setModalData({ \r\n        operation: EDITION,\r\n        messageType: ERROR,\r\n        message: \"Não há alterações a serem salvas para este Carro de Polícia!\"\r\n      });\r\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n    }\r\n    else {\r\n      setInvalid(false)\r\n      setModalData({ entity: \"e Carro de Polícia\", operation: EDITION });\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n    }\r\n  }\r\n\r\n  const openDeleteModal = (id, name) => {\r\n    if (id) {\r\n      setFormData({ ...formData, \"police_car_id\": id });\r\n      setModalData({ entity: `e Carro de Polícia ${id}`, operation: EXCLUSION, id: id });\r\n      toggleModalOn(MODAL_TYPE_ENUM.CONFIRMATION)\r\n    }\r\n  }\r\n\r\n  const createReadHttpRequestBody = () => {\r\n    let orderBy = createOrderByClause(\"police_car_id\", \"asc\")\r\n    let httpRequestBody = createQueryHttpRequestBody(filters, orderBy)\r\n\r\n    console.log(\"httpRequestBody \", httpRequestBody);\r\n    return httpRequestBody\r\n  }\r\n\r\n  const createCountHttpRequestBody = () => {\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n    httpRequestBody['filters'] = filters\r\n\r\n    return httpRequestBody\r\n  }\r\n\r\n  const createPoliceCar = () => {\r\n    const httpRequestBody = createEditionHttpRequestBody()\r\n\r\n    httpRequestBody['police_car_id'] = formData.police_car_id\r\n    httpRequestBody['police_car_name'] = formData.police_car_name\r\n    httpRequestBody['police_car_description'] = formData.police_car_description\r\n    httpRequestBody['police_car_modification_date'] = new Date().toISOString()\r\n\r\n    setSpinner(true)\r\n    let entity = \"do Carro de Polícia\"\r\n    axios.post(`${env.apiAddress}/police_car/create`, httpRequestBody)\r\n      .then(res => {\r\n        treatResponse(entity, CREATION, 'police_car_id', res,  setModalData, refresh)\r\n      }).catch(err => {\r\n        setModalData(treatError(err, entity, CREATION));\r\n        console.log(err)\r\n      }).finally(() => {\r\n        cleanInputs();\r\n        setSpinner(false)\r\n        toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n      })\r\n  }\r\n\r\n  const deletePoliceCar = (id) => {\r\n    let httpRequestBody = createEditionHttpRequestBody()\r\n\r\n    setSpinner(true)\r\n    toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n\r\n    if (isEditionModalActive) {\r\n      toggleEditionModal()\r\n    }\r\n\r\n    let entity = \"do Carro de Polícia\"\r\n\r\n    axios.delete(`${env.apiAddress}/police_car/delete/${id}`, { data: httpRequestBody })\r\n      .then(res => {\r\n        treatResponse(entity, EXCLUSION, 'police_car_id', res,  setModalData, refresh)\r\n\r\n      }).catch(err => {\r\n        setModalData(treatError(err, entity, EXCLUSION));\r\n      }).finally(() => {\r\n        setSpinner(false)\r\n      })\r\n  }\r\n\r\n  const updatePoliceCar = () => {\r\n    if (hasEmptyValues(formData))\r\n      setInvalid(true)\r\n    else {\r\n      setSpinner(true)\r\n      toggleEditionModal()\r\n      toggleModalOn(MODAL_TYPE_ENUM.MESSAGE)\r\n\r\n      const httpRequestBody = createEditionHttpRequestBody()\r\n\r\n      httpRequestBody['police_car_id'] = formData.police_car_id\r\n      httpRequestBody['police_car_name'] = formData.police_car_name\r\n      httpRequestBody['police_car_description'] = formData.police_car_description\r\n      httpRequestBody['police_car_modification_date'] = new Date().toISOString()\r\n\r\n      let entity = \"do Carro de Polícia\"\r\n      axios.patch(`${env.apiAddress}/police_car/update/${formData.police_car_id}`, httpRequestBody)\r\n        .then(res => {\r\n          treatResponse(entity, EDITION, 'police_car_id', res,  setModalData, refresh)\r\n        }).catch(err => {\r\n          setModalData(treatError(err, entity, EDITION));\r\n        }).finally(() => {\r\n          setSpinner(false)\r\n          cleanInputs()\r\n        })\r\n    }\r\n  }\r\n\r\n  const isDisabled = () => {\r\n    return !isAdmin()\r\n  }\r\n\r\n  const EditionForm = (props) => {\r\n    return (<Form key={\"A\"} style={{ margin: \"5px 0px 10px 0px\" }} >\r\n\r\n      <FormGroup row>\r\n        <Label for=\"id\" sm={6}>\r\n          <b>ID</b>\r\n        </Label>\r\n        <Col sm={12}>\r\n          <Input key={\"A0\"}\r\n            value={formData.police_car_id}\r\n            maxLength=\"10\"\r\n            readOnly={modalReadonlyMode}\r\n            onChange={e => setFormData({ ...formData, 'police_car_id': e.target.value })}\r\n            invalid={invalid && (formData.police_car_id.trim() === \"\")}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n\r\n      <FormGroup row>\r\n        <Label for=\"name\" sm={6}>\r\n          <b>Nome</b>\r\n        </Label>\r\n        <Col sm={12}>\r\n          <Input key={\"A1\"}\r\n            value={formData.police_car_name}\r\n            maxLength=\"20\"\r\n            readOnly={modalReadonlyMode}\r\n            onKeyPress={event => {NumericFilter(event) }}\r\n            onChange={e => setFormData({ ...formData, 'police_car_name': e.target.value })}\r\n            invalid={invalid && (formData.police_car_name.trim() === \"\")}\r\n          />\r\n        </Col >\r\n      </FormGroup >\r\n\r\n     <FormGroup row>\r\n        <Label for=\"name\" sm={6}>\r\n          <b>Descrição</b>\r\n        </Label>\r\n        <Col sm={12}>\r\n          <Input key={\"A2\"}\r\n            value={formData.police_car_description}\r\n            readOnly={modalReadonlyMode}\r\n            maxLength=\"60\"\r\n            onKeyPress={event => { NumericFilter(event) }}\r\n            onChange={e => setFormData({ ...formData, 'police_car_description': e.target.value })}\r\n            invalid={invalid && (formData.police_car_description.trim() === \"\")}\r\n          />\r\n        </Col >\r\n      </FormGroup >\r\n\r\n      {(props.isCreationForm) ?\r\n        <Button color=\"primary\" onClick={() => { openRevisionModal() }} style={{ marginTop: '2rem' }}>Cadastrar</Button>\r\n        : <ModalEditionButtons\r\n          id={formData.user_id} data={formData}\r\n          modalReadonlyMode={modalReadonlyMode} setModalReadonlyMode={setModalReadonlyMode} isDisabled={isDisabled}\r\n          editionAction={setModalReadonlyMode} deleteAction={openDeleteModal}\r\n          saveAction={openConfirmationModal} cancelAction={toggleEditionModal}\r\n        />\r\n      }\r\n    </Form >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <Tabs names={[\r\n          'Cadastrar Novo Carro de Polícia',\r\n          'Gerenciamento de Carros de Polícia'\r\n        ]} \r\n        index={[tabIndex, setTabIndex]} />\r\n        <Card className=\"card\" style={{ borderTopLeftRadius: '0px' }}>\r\n          <CardBody>\r\n            {tabIndex === 0 &&\r\n              EditionForm({ isCreationForm: true, isModal: false })\r\n            }\r\n            {tabIndex === 1 &&\r\n              <>\r\n                <TagsInput\r\n                  tagsState={[auditorsFilters, setAuditorsFilters,]}\r\n                  setQuery={setFilters}\r\n                  columns={{\r\n                    \"Nome\": {\r\n                      field: \"police_car_name\",\r\n                      column_type: \"char\",\r\n                      size: 20,\r\n                    },\r\n                    \"ID\": {\r\n                      field: \"police_car_id\",\r\n                      column_type: \"char\",\r\n                      size: 10,\r\n                    },\r\n                    \"Descrição\": {\r\n                      field: \"police_car_description\",\r\n                      column_type: \"char\",\r\n                      size: 60\r\n                    }\r\n                  }} />\r\n\r\n                <Table\r\n                  dataUrl=\"/police_car/read_all\"\r\n                  countUrl=\"\"\r\n                  count=\"17\"\r\n                  requestBody={createReadHttpRequestBody}\r\n                  countRequestBody={createCountHttpRequestBody}\r\n                  tags={filters}\r\n                  fillData\r\n                  retrieveData={(data) => data}\r\n                  refresh={refreshFlag}\r\n                  trProps={row => { return { onDoubleClick: (e) => { openEditionModal(row, true) } } }}\r\n                  loading={[isloading, setIsLoading]}\r\n                  columns={{\r\n                    \"ID\": {\r\n                      args: \"police_car_id\",\r\n                      tdStyle: { wordBreak: 'break-word' }\r\n                    },\r\n                    \"Nome\": {\r\n                      args: \"police_car_name\",\r\n                      tdStyle: { wordBreak: 'break-word' }\r\n                    },\r\n                    \"Descrição\": {\r\n                      args: \"police_car_description\",\r\n                      tdStyle: { wordBreak: 'break-word' }\r\n                    },\r\n                    \"Última Modificação\": {\r\n                      args: \"police_car_modification_date\",\r\n                      tdStyle: { wordBreak: 'break-word' }\r\n                    },\r\n                    \"Ações\": {\r\n                      args: [\"police_car_id\", \"police_car_name\"],\r\n                      tdStyle: { textAlign: 'center' },\r\n                      thStyle: { textAlign: 'center' },\r\n                      Func: ({ data, row_data }) => <EditionButtons isModal={false} data={row_data} id={data[0]}\r\n                        modalReadonlyMode={modalReadonlyMode} setModalReadonlyMode={setModalReadonlyMode} isDisabled={isDisabled}\r\n                        editionAction={openEditionModal} deleteAction={openDeleteModal} />\r\n                    }\r\n                  }}\r\n                />\r\n              </>\r\n            }\r\n          </CardBody >\r\n        </Card >\r\n      </div >\r\n      {isEditionModalActive &&\r\n        <Modal\r\n          isOpen={isEditionModalActive} toggle={() => { cleanInputs(); toggleEditionModal() }}\r\n          style={{ maxWidth: '70%' }}\r\n          size=\"lg\"\r\n        >\r\n          <ModalHeader toggle={() => { cleanInputs(); toggleEditionModal() }}>Auditor Fiscal Cadastrado</ModalHeader>\r\n          <ModalBody style={{ justifyContent: 'center', alignContent: 'center', padding: '0.5rem' }}>\r\n            {EditionForm({ isCreationForm: false, isModal: true })}\r\n          </ModalBody>\r\n        </Modal>\r\n      }\r\n\r\n      {modalType === MODAL_TYPE_ENUM.CONFIRMATION && <ConfirmationModal show={isModalActive} toggle={toggleModalOff} data={modalData} actionMethods={[undefined, updatePoliceCar, deletePoliceCar]} />}\r\n\r\n      {modalType === MODAL_TYPE_ENUM.MESSAGE && <MessageModal show={isModalActive} toggle={toggleModalOff} data={modalData} spinner={spinner} />}\r\n\r\n      {modalType === MODAL_TYPE_ENUM.REVISION && <RevisionModal show={isModalActive} toggle={toggleModalOff} data={modalData} actionMethod={createPoliceCar} spinner={spinner} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}