{"ast":null,"code":"export function compressImage(base64String, resize) {\n  let maxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  let maxHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    img.onload = function () {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d'); //resize the image, but keep the aspect ration\n\n      let aspectRatio = img.width / img.height;\n      let newWidth, newHeight;\n\n      if ((img.width > maxWidth || img.height > maxHeight) && resize) {\n        if (aspectRatio > 1) {\n          newWidth = maxWidth;\n          newHeight = maxWidth / aspectRatio;\n        } else {\n          newWidth = maxHeight * aspectRatio;\n          newHeight = maxHeight;\n        }\n      } else {\n        newWidth = img.width;\n        newHeight = img.height;\n      }\n\n      canvas.width = newWidth;\n      canvas.height = newHeight;\n      ctx.drawImage(img, 0, 0, newWidth, newHeight);\n      const compressedBase64 = canvas.toDataURL('image/jpeg', 0.2);\n      resolve(compressedBase64);\n    };\n\n    img.onerror = function (error) {\n      reject(base64String);\n    };\n\n    img.src = base64String;\n  });\n}\n;\nexport function readFileAsBase64(file) {\n  let resize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = function (event) {\n      resolve(compressImage(event.target.result, resize));\n    };\n\n    reader.onerror = function (error) {\n      reject(error);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n;","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/components/modals/NotificationModal/utils/image.js"],"names":["compressImage","base64String","resize","maxWidth","maxHeight","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","ctx","getContext","aspectRatio","width","height","newWidth","newHeight","drawImage","compressedBase64","toDataURL","onerror","error","src","readFileAsBase64","file","reader","FileReader","event","target","result","readAsDataURL"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,YAAvB,EAAqCC,MAArC,EAAgF;AAAA,MAAnCC,QAAmC,uEAAxB,IAAwB;AAAA,MAAlBC,SAAkB,uEAAN,IAAM;AACnF,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AAEAD,IAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY;AACvB,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,YAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ,CAFuB,CAIvB;;AAEA,UAAIC,WAAW,GAAGR,GAAG,CAACS,KAAJ,GAAYT,GAAG,CAACU,MAAlC;AACA,UAAIC,QAAJ,EAAcC,SAAd;;AAEA,UAAI,CAACZ,GAAG,CAACS,KAAJ,GAAYd,QAAZ,IAAwBK,GAAG,CAACU,MAAJ,GAAad,SAAtC,KAAoDF,MAAxD,EAAgE;AAC9D,YAAIc,WAAW,GAAG,CAAlB,EAAqB;AACnBG,UAAAA,QAAQ,GAAGhB,QAAX;AACAiB,UAAAA,SAAS,GAAGjB,QAAQ,GAAGa,WAAvB;AACD,SAHD,MAGO;AACLG,UAAAA,QAAQ,GAAGf,SAAS,GAAGY,WAAvB;AACAI,UAAAA,SAAS,GAAGhB,SAAZ;AACD;AACF,OARD,MAQO;AACLe,QAAAA,QAAQ,GAAGX,GAAG,CAACS,KAAf;AACAG,QAAAA,SAAS,GAAGZ,GAAG,CAACU,MAAhB;AACD;;AAEDP,MAAAA,MAAM,CAACM,KAAP,GAAeE,QAAf;AACAR,MAAAA,MAAM,CAACO,MAAP,GAAgBE,SAAhB;AAEAN,MAAAA,GAAG,CAACO,SAAJ,CAAcb,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBW,QAAzB,EAAmCC,SAAnC;AAEA,YAAME,gBAAgB,GAAGX,MAAM,CAACY,SAAP,CAAiB,YAAjB,EAA+B,GAA/B,CAAzB;AACAjB,MAAAA,OAAO,CAACgB,gBAAD,CAAP;AACD,KA7BD;;AA+BAd,IAAAA,GAAG,CAACgB,OAAJ,GAAc,UAAUC,KAAV,EAAiB;AAC7BlB,MAAAA,MAAM,CAACN,YAAD,CAAN;AACD,KAFD;;AAIAO,IAAAA,GAAG,CAACkB,GAAJ,GAAUzB,YAAV;AACD,GAvCM,CAAP;AAwCD;AAAA;AAED,OAAO,SAAS0B,gBAAT,CAA0BC,IAA1B,EAA+C;AAAA,MAAf1B,MAAe,uEAAN,IAAM;AACpD,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMsB,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,IAAAA,MAAM,CAACnB,MAAP,GAAgB,UAAUqB,KAAV,EAAiB;AAC/BzB,MAAAA,OAAO,CAACN,aAAa,CAAC+B,KAAK,CAACC,MAAN,CAAaC,MAAd,EAAsB/B,MAAtB,CAAd,CAAP;AACD,KAFD;;AAIA2B,IAAAA,MAAM,CAACL,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAChClB,MAAAA,MAAM,CAACkB,KAAD,CAAN;AACD,KAFD;;AAIAI,IAAAA,MAAM,CAACK,aAAP,CAAqBN,IAArB;AACD,GAZM,CAAP;AAaD;AAAA","sourcesContent":["export function compressImage(base64String, resize, maxWidth = 1000, maxHeight = 1000) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n  \r\n      img.onload = function () {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n  \r\n        //resize the image, but keep the aspect ration\r\n  \r\n        let aspectRatio = img.width / img.height;\r\n        let newWidth, newHeight;\r\n  \r\n        if ((img.width > maxWidth || img.height > maxHeight) && resize) {\r\n          if (aspectRatio > 1) {\r\n            newWidth = maxWidth;\r\n            newHeight = maxWidth / aspectRatio;\r\n          } else {\r\n            newWidth = maxHeight * aspectRatio;\r\n            newHeight = maxHeight;\r\n          }\r\n        } else {\r\n          newWidth = img.width;\r\n          newHeight = img.height;\r\n        }\r\n  \r\n        canvas.width = newWidth;\r\n        canvas.height = newHeight;\r\n  \r\n        ctx.drawImage(img, 0, 0, newWidth, newHeight);\r\n  \r\n        const compressedBase64 = canvas.toDataURL('image/jpeg', 0.2);\r\n        resolve(compressedBase64);\r\n      };\r\n  \r\n      img.onerror = function (error) {\r\n        reject(base64String);\r\n      };\r\n  \r\n      img.src = base64String;\r\n    });\r\n  };\r\n\r\n  export function readFileAsBase64(file, resize = true) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n  \r\n      reader.onload = function (event) {\r\n        resolve(compressImage(event.target.result, resize));\r\n      };\r\n  \r\n      reader.onerror = function (error) {\r\n        reject(error);\r\n      };\r\n  \r\n      reader.readAsDataURL(file);\r\n    });\r\n  };"]},"metadata":{},"sourceType":"module"}