{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\context\\\\DashboardContext.js\";\nimport React from \"react\"; // import axios from 'axios';\n// import env from \"common/enviroment.js\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DashboardContext = /*#__PURE__*/React.createContext();\nexport function DashboardProvider(_ref) {\n  let {\n    children\n  } = _ref;\n\n  // const [cards, setCards] = React.useState({\n  //     documentos: \"...\",\n  //     arrecadacao: \"...\",\n  //     alertas: \"...\",\n  //     passagens: \"...\"\n  // });\n  // const [barChartData, setBarChartData] = React.useState();\n  // const [lineChartData, setLineChartData] = React.useState();\n  // const [pieChartData, setPieChartData] = React.useState();\n  // const [isDashboardActive, setIsDashboardActive] = React.useState(true);\n  //const currencyFormatter = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });\n  //const months = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\n  const getCardData = () => {\n    /*\r\n    axios.get(`${env.apiAddress}/info/cards`).then(res => {\r\n        setCards({\r\n            documentos: res.data.documentos,\r\n            arrecadacao: currencyFormatter.format(res.data.arrecadacao),\r\n            alertas: res.data.alertas,\r\n            passagens: res.data.passagens\r\n        })\r\n    });\r\n    */\n  };\n\n  const getBarChartData = () => {\n    /*\r\n    axios.get(`${env.apiAddress}/info/bar_chart`).then(res => {\r\n        let labels = [];\r\n        let data_in = [];\r\n        let data_out = [];\r\n          res.data.forEach(element => {\r\n            labels.push(element.local);\r\n            data_in.push(element.entrada);\r\n            data_out.push(element.saida);\r\n        });\r\n          setBarChartData({\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Entrada\",\r\n                    data: data_in,\r\n                    borderColor: \"#6bd098\",\r\n                    backgroundColor: \"#6bd098\",\r\n                    pointRadius: 0,\r\n                    pointHoverRadius: 0,\r\n                    borderWidth: 3\r\n                },\r\n                {\r\n                    label: \"Saída\",\r\n                    data: data_out,\r\n                    borderColor: \"#f17e5d\",\r\n                    backgroundColor: \"#f17e5d\",\r\n                    pointRadius: 0,\r\n                    pointHoverRadius: 0,\r\n                    borderWidth: 3\r\n                }\r\n            ]\r\n        });\r\n    });\r\n    */\n  };\n\n  const getLineChartData = () => {\n    /*\r\n    axios.get(`${env.apiAddress}/info/line_chart`).then(res => {\r\n        let labels = [];\r\n        let data_active = [];\r\n        let data_inactive = [];\r\n          res.data.forEach(element => {\r\n            labels.push(months[element.mes]);\r\n            data_active.push(element.ativo);\r\n            data_inactive.push(element.inativo);\r\n        });\r\n          setLineChartData({\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Ativo\",\r\n                    data: data_active,\r\n                    fill: false,\r\n                    borderColor: \"#fbc658\",\r\n                    backgroundColor: \"transparent\",\r\n                    pointBorderColor: \"#fbc658\",\r\n                    pointRadius: 4,\r\n                    pointHoverRadius: 4,\r\n                    pointBorderWidth: 8\r\n                },\r\n                {\r\n                    label: \"Inativo\",\r\n                    data: data_inactive,\r\n                    fill: false,\r\n                    borderColor: \"#51CACF\",\r\n                    backgroundColor: \"transparent\",\r\n                    pointBorderColor: \"#51CACF\",\r\n                    pointRadius: 4,\r\n                    pointHoverRadius: 4,\r\n                    pointBorderWidth: 8\r\n                }\r\n            ]\r\n        });\r\n    });\r\n    */\n  };\n\n  const getPieChartData = () => {\n    /*\r\n    axios.get(`${env.apiAddress}/info/pie_chart`).then(res => {\r\n        let labels = [];\r\n        let amount = [];\r\n          res.data.forEach(element => {\r\n            labels.push(element.local);\r\n            amount.push(element.quantidade);\r\n        });\r\n          setPieChartData({\r\n            labels: labels,\r\n            datasets: [{\r\n                data: amount,\r\n                backgroundColor: [\"#e3e3e3\", \"#4acccd\", \"#fcc468\", \"#ef8157\"], //não se sabe a quantidade ao certo\r\n                pointRadius: 0,\r\n                pointHoverRadius: 0,\r\n                borderWidth: 0,\r\n            }],\r\n        })\r\n    })\r\n    */\n  };\n\n  const getDashboardData = () => {\n    getCardData();\n    getBarChartData();\n    getLineChartData();\n    getPieChartData();\n  };\n\n  const getData = () => getDashboardData();\n\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: {\n      getDashboardData,\n      getData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n_c = DashboardProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardProvider\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/context/DashboardContext.js"],"names":["React","DashboardContext","createContext","DashboardProvider","children","getCardData","getBarChartData","getLineChartData","getPieChartData","getDashboardData","getData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;;AAGA,OAAO,MAAMC,gBAAgB,gBAAGD,KAAK,CAACE,aAAN,EAAzB;AAEP,OAAO,SAASC,iBAAT,OAAyC;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;;AAC5C;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,GAXD;;AAaA,QAAMC,eAAe,GAAG,MAAM;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGK,GAtCD;;AAwCA,QAAMC,gBAAgB,GAAG,MAAM;AAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGK,GA1CD;;AA4CA,QAAMC,eAAe,GAAG,MAAM;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGK,GAvBD;;AAyBA,QAAMC,gBAAgB,GAAG,MAAM;AAC3BJ,IAAAA,WAAW;AACXC,IAAAA,eAAe;AACfC,IAAAA,gBAAgB;AAChBC,IAAAA,eAAe;AAClB,GALD;;AAOA,QAAME,OAAO,GAAG,MAAMD,gBAAgB,EAAtC;;AAEA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEA,MAAAA,gBAAF;AAAoBC,MAAAA;AAApB,KAAlC;AAAA,cACKN;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAxJeD,iB","sourcesContent":["import React from \"react\";\r\n// import axios from 'axios';\r\n// import env from \"common/enviroment.js\"\r\n\r\n\r\nexport const DashboardContext = React.createContext();\r\n\r\nexport function DashboardProvider({ children }) {\r\n    // const [cards, setCards] = React.useState({\r\n    //     documentos: \"...\",\r\n    //     arrecadacao: \"...\",\r\n    //     alertas: \"...\",\r\n    //     passagens: \"...\"\r\n    // });\r\n\r\n    // const [barChartData, setBarChartData] = React.useState();\r\n    // const [lineChartData, setLineChartData] = React.useState();\r\n    // const [pieChartData, setPieChartData] = React.useState();\r\n    // const [isDashboardActive, setIsDashboardActive] = React.useState(true);\r\n\r\n    //const currencyFormatter = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });\r\n    //const months = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n\r\n    const getCardData = () => {\r\n        /*\r\n        axios.get(`${env.apiAddress}/info/cards`).then(res => {\r\n            setCards({\r\n                documentos: res.data.documentos,\r\n                arrecadacao: currencyFormatter.format(res.data.arrecadacao),\r\n                alertas: res.data.alertas,\r\n                passagens: res.data.passagens\r\n            })\r\n        });\r\n        */\r\n    }\r\n\r\n    const getBarChartData = () => {\r\n        /*\r\n        axios.get(`${env.apiAddress}/info/bar_chart`).then(res => {\r\n            let labels = [];\r\n            let data_in = [];\r\n            let data_out = [];\r\n\r\n            res.data.forEach(element => {\r\n                labels.push(element.local);\r\n                data_in.push(element.entrada);\r\n                data_out.push(element.saida);\r\n            });\r\n\r\n            setBarChartData({\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"Entrada\",\r\n                        data: data_in,\r\n                        borderColor: \"#6bd098\",\r\n                        backgroundColor: \"#6bd098\",\r\n                        pointRadius: 0,\r\n                        pointHoverRadius: 0,\r\n                        borderWidth: 3\r\n                    },\r\n                    {\r\n                        label: \"Saída\",\r\n                        data: data_out,\r\n                        borderColor: \"#f17e5d\",\r\n                        backgroundColor: \"#f17e5d\",\r\n                        pointRadius: 0,\r\n                        pointHoverRadius: 0,\r\n                        borderWidth: 3\r\n                    }\r\n                ]\r\n            });\r\n        });\r\n        */\r\n    }\r\n\r\n    const getLineChartData = () => {\r\n        /*\r\n        axios.get(`${env.apiAddress}/info/line_chart`).then(res => {\r\n            let labels = [];\r\n            let data_active = [];\r\n            let data_inactive = [];\r\n\r\n            res.data.forEach(element => {\r\n                labels.push(months[element.mes]);\r\n                data_active.push(element.ativo);\r\n                data_inactive.push(element.inativo);\r\n            });\r\n\r\n            setLineChartData({\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"Ativo\",\r\n                        data: data_active,\r\n                        fill: false,\r\n                        borderColor: \"#fbc658\",\r\n                        backgroundColor: \"transparent\",\r\n                        pointBorderColor: \"#fbc658\",\r\n                        pointRadius: 4,\r\n                        pointHoverRadius: 4,\r\n                        pointBorderWidth: 8\r\n                    },\r\n                    {\r\n                        label: \"Inativo\",\r\n                        data: data_inactive,\r\n                        fill: false,\r\n                        borderColor: \"#51CACF\",\r\n                        backgroundColor: \"transparent\",\r\n                        pointBorderColor: \"#51CACF\",\r\n                        pointRadius: 4,\r\n                        pointHoverRadius: 4,\r\n                        pointBorderWidth: 8\r\n                    }\r\n                ]\r\n            });\r\n        });\r\n        */\r\n    }\r\n\r\n    const getPieChartData = () => {\r\n        /*\r\n        axios.get(`${env.apiAddress}/info/pie_chart`).then(res => {\r\n            let labels = [];\r\n            let amount = [];\r\n\r\n            res.data.forEach(element => {\r\n                labels.push(element.local);\r\n                amount.push(element.quantidade);\r\n            });\r\n\r\n            setPieChartData({\r\n                labels: labels,\r\n                datasets: [{\r\n                    data: amount,\r\n                    backgroundColor: [\"#e3e3e3\", \"#4acccd\", \"#fcc468\", \"#ef8157\"], //não se sabe a quantidade ao certo\r\n                    pointRadius: 0,\r\n                    pointHoverRadius: 0,\r\n                    borderWidth: 0,\r\n                }],\r\n            })\r\n        })\r\n        */\r\n    }\r\n\r\n    const getDashboardData = () => {\r\n        getCardData();\r\n        getBarChartData();\r\n        getLineChartData();\r\n        getPieChartData();\r\n    }\r\n\r\n    const getData = () => getDashboardData()\r\n\r\n    return (\r\n        <DashboardContext.Provider value={{ getDashboardData, getData}}>\r\n            {children}\r\n        </DashboardContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}