{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createQueryHttpRequestBody, createSimpleFilterClause } from \"axios/AxiosUtils\";\nimport NOTIFICATION_STATUS_ENUM from \"common/enumerators/NotificationStatus\";\nimport NOTIFICATION_TYPE_ENUM from \"common/enumerators/NotificationTypeEnum\";\nimport { getUserLogin } from \"common/SessionUtils\";\nimport { isAdmin } from \"common/SessionUtils\";\nimport { isSubgerente } from \"common/SessionUtils\";\nimport { isComandoFiscal } from \"common/SessionUtils\";\nimport { hasUserLoggedData } from \"common/SessionUtils\";\nexport default function ReadNotificationPendingJobs() {\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const readPendingHomologationRequest = async () => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"char\", \"in\", [NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.REALIZADA]));\n    filters.push(createSimpleFilterClause(\"fiscal_action_homologation_date\", \"char\", \"null\", \"true\"));\n    filters.push(createSimpleFilterClause(\"fiscal_action_homologation_auditor\", \"char\", \"equal\", getUserLogin()));\n    let httpRequestBody = createQueryHttpRequestBody(filters);\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\n    return await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/warnings/read_all\"), httpRequestBody).then(response => response.data).catch(err => {\n      console.log(err);\n      return [];\n    });\n  };\n\n  const readPendingAwarenesRequest = async () => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"fiscal_notification_awareness_date\", \"char\", \"null\", \"true\"));\n    filters.push(createSimpleFilterClause(\"fiscal_notification_awareness_auditor\", \"char\", \"equal\", getUserLogin()));\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"int\", \"in\", [NOTIFICATION_STATUS_ENUM.DESIGNADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.REALIZADA, NOTIFICATION_STATUS_ENUM.HOMOLOGADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA]));\n    let httpRequestBody = createQueryHttpRequestBody(filters);\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\n    return await axios.post(\"\".concat(env.apiAddress, \"/warnings/read_all\"), httpRequestBody).then(response => response.data).catch(err => {\n      console.log(err);\n      return [];\n    });\n  };\n\n  const readPendingSupervisionRequest = async () => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"char\", \"in\", [NOTIFICATION_STATUS_ENUM.REALIZADA, NOTIFICATION_STATUS_ENUM.HOMOLOGADA]));\n    filters.push(createSimpleFilterClause(\"fiscal_action_supervision_date\", \"char\", \"null\", \"true\"));\n    filters.push(createSimpleFilterClause(\"fiscal_action_supervision_auditor\", \"char\", \"equal\", getUserLogin()));\n    let httpRequestBody = createQueryHttpRequestBody(filters);\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\n    return await axios.post(\"\".concat(env.apiAddress, \"/warnings/read_all\"), httpRequestBody).then(response => response.data).catch(err => {\n      console.log(err);\n      return [];\n    });\n  };\n\n  const readPendingFiscalActionReportRequest = async () => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(\"fiscal_action_auditors\", \"varying\", \"equal\", \"%\".concat(getUserLogin(), \"%\")));\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"int\", \"equal\", NOTIFICATION_STATUS_ENUM.DESIGNADA));\n    const httpRequestBody = createQueryHttpRequestBody(filters);\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\n\n    try {\n      const res = await axios.post(\"\".concat(env.apiAddress, \"/warnings/read_all\"), httpRequestBody);\n\n      if (Array.isArray(res.data)) {\n        return res.data;\n      } else {\n        return [];\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const countPendingJobs = (notifications, pendingJobs) => {\n    for (const warning of notifications) {\n      let id = warning['id'];\n      let pendingCount = 0;\n\n      if (id in pendingJobs) {\n        pendingCount = pendingJobs[id]['pending_count'];\n      }\n\n      warning['pending_count'] = pendingCount + 1;\n      pendingJobs[id] = warning;\n    }\n  };\n\n  const readNotificationPendingJobsRequest = async () => {\n    let res = null;\n\n    if (hasUserLoggedData()) {\n      if (isAdmin() || isSubgerente()) {\n        let pendingJobs = {};\n        const homologationResult = await readPendingHomologationRequest();\n        countPendingJobs(homologationResult, pendingJobs);\n        const awarenessResult = await readPendingAwarenesRequest();\n        countPendingJobs(awarenessResult, pendingJobs);\n        const supervisionResult = await readPendingSupervisionRequest();\n        countPendingJobs(supervisionResult, pendingJobs);\n        res = Object.values(pendingJobs);\n        return res;\n      } else if (isComandoFiscal()) {\n        res = await readPendingFiscalActionReportRequest().then(res => {\n          return res;\n        });\n      }\n    }\n\n    return res;\n  };\n\n  return {\n    readNotificationPendingJobsRequest\n  };\n}\n_c = ReadNotificationPendingJobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadNotificationPendingJobs\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/axios/ReadNotificationPendingJobs.js"],"names":["axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createQueryHttpRequestBody","createSimpleFilterClause","NOTIFICATION_STATUS_ENUM","NOTIFICATION_TYPE_ENUM","getUserLogin","isAdmin","isSubgerente","isComandoFiscal","hasUserLoggedData","ReadNotificationPendingJobs","axiosRetryProxy","create","readPendingHomologationRequest","filters","push","SEM_COMANDO","REALIZADA","httpRequestBody","NOTIFICATION","post","apiAddress","then","response","data","catch","err","console","log","readPendingAwarenesRequest","DESIGNADA","HOMOLOGADA","SEM_COMANDO_HOMOLOGADA","readPendingSupervisionRequest","readPendingFiscalActionReportRequest","res","Array","isArray","countPendingJobs","notifications","pendingJobs","warning","id","pendingCount","readNotificationPendingJobsRequest","homologationResult","awarenessResult","supervisionResult","Object","values"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,SAASC,0BAAT,EAAqCC,wBAArC,QAAqE,kBAArE;AAEA,OAAOC,wBAAP,MAAqC,uCAArC;AACA,OAAOC,sBAAP,MAAmC,yCAAnC;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,eAAe,SAASC,2BAAT,GAAuC;AAEpD,QAAMC,eAAe,GAAGf,KAAK,CAACgB,MAAN,CAAad,gBAAgB,EAA7B,CAAxB;AACAD,EAAAA,UAAU,CAACc,eAAD,EAAkBZ,cAAc,EAAhC,CAAV;;AAEA,QAAMc,8BAA8B,GAAG,YAAY;AAEjD,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,4BAAD,EAA+B,MAA/B,EAAuC,IAAvC,EAA6C,CAACC,wBAAwB,CAACa,WAA1B,EAAuCb,wBAAwB,CAACc,SAAhE,CAA7C,CAArC;AACAH,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,iCAAD,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,MAApD,CAArC;AACAY,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,oCAAD,EAAuC,MAAvC,EAA+C,OAA/C,EAAwDG,YAAY,EAApE,CAArC;AACA,QAAIa,eAAe,GAAGjB,0BAA0B,CAACa,OAAD,CAAhD;AACAI,IAAAA,eAAe,CAAC,0BAAD,CAAf,GAA8Cd,sBAAsB,CAACe,YAArE;AAEA,WAAO,MAAMR,eAAe,CAACS,IAAhB,WAAwBpB,GAAG,CAACqB,UAA5B,yBAA4DH,eAA5D,EACNI,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IADpB,EAERC,KAFQ,CAEFC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAO,EAAP;AACL,KALU,CAAb;AAMD,GAfD;;AAiBA,QAAMG,0BAA0B,GAAG,YAAY;AAE7C,QAAIf,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,oCAAD,EAAuC,MAAvC,EAA+C,MAA/C,EAAuD,MAAvD,CAArC;AACAY,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,uCAAD,EAA0C,MAA1C,EAAkD,OAAlD,EAA2DG,YAAY,EAAvE,CAArC;AACAS,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,4BAAD,EAA+B,KAA/B,EAAsC,IAAtC,EAA4C,CAACC,wBAAwB,CAAC2B,SAA1B,EAAqC3B,wBAAwB,CAACa,WAA9D,EAA2Eb,wBAAwB,CAACc,SAApG,EAA+Gd,wBAAwB,CAAC4B,UAAxI,EAAoJ5B,wBAAwB,CAAC6B,sBAA7K,CAA5C,CAArC;AAEA,QAAId,eAAe,GAAGjB,0BAA0B,CAACa,OAAD,CAAhD;AACAI,IAAAA,eAAe,CAAC,0BAAD,CAAf,GAA8Cd,sBAAsB,CAACe,YAArE;AAEA,WAAO,MAAMvB,KAAK,CAACwB,IAAN,WAAcpB,GAAG,CAACqB,UAAlB,yBAAkDH,eAAlD,EACRI,IADQ,CACHC,QAAQ,IAAIA,QAAQ,CAACC,IADlB,EAERC,KAFQ,CAEFC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAO,EAAP;AACP,KALY,CAAb;AAMD,GAhBD;;AAmBA,QAAMO,6BAA6B,GAAG,YAAY;AAEhD,QAAInB,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,4BAAD,EAA+B,MAA/B,EAAuC,IAAvC,EAA6C,CAACC,wBAAwB,CAACc,SAA1B,EAAqCd,wBAAwB,CAAC4B,UAA9D,CAA7C,CAArC;AACAjB,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,gCAAD,EAAmC,MAAnC,EAA2C,MAA3C,EAAmD,MAAnD,CAArC;AACAY,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,mCAAD,EAAsC,MAAtC,EAA8C,OAA9C,EAAuDG,YAAY,EAAnE,CAArC;AAEA,QAAIa,eAAe,GAAGjB,0BAA0B,CAACa,OAAD,CAAhD;AACAI,IAAAA,eAAe,CAAC,0BAAD,CAAf,GAA8Cd,sBAAsB,CAACe,YAArE;AAEA,WAAO,MAAMvB,KAAK,CAACwB,IAAN,WAAcpB,GAAG,CAACqB,UAAlB,yBAAkDH,eAAlD,EACNI,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IADpB,EAERC,KAFQ,CAEFC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAO,EAAP;AACL,KALU,CAAb;AAMD,GAhBD;;AAkBA,QAAMQ,oCAAoC,GAAG,YAAY;AACvD,QAAIpB,OAAO,GAAG,EAAd;AAEAA,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,wBAAD,EAA2B,SAA3B,EAAsC,OAAtC,aAAmDG,YAAY,EAA/D,OAArC;AACAS,IAAAA,OAAO,CAACC,IAAR,CAAab,wBAAwB,CAAC,4BAAD,EAA+B,KAA/B,EAAsC,OAAtC,EAA+CC,wBAAwB,CAAC2B,SAAxE,CAArC;AAEA,UAAMZ,eAAe,GAAGjB,0BAA0B,CAACa,OAAD,CAAlD;AACAI,IAAAA,eAAe,CAAC,0BAAD,CAAf,GAA8Cd,sBAAsB,CAACe,YAArE;;AAEA,QAAI;AACF,YAAMgB,GAAG,GAAG,MAAMvC,KAAK,CAACwB,IAAN,WAAcpB,GAAG,CAACqB,UAAlB,yBAAkDH,eAAlD,CAAlB;;AACA,UAAIkB,KAAK,CAACC,OAAN,CAAcF,GAAG,CAACX,IAAlB,CAAJ,EAA6B;AAC3B,eAAOW,GAAG,CAACX,IAAX;AACD,OAFD,MAEM;AACJ,eAAO,EAAP;AACD;AACF,KAPD,CAOE,OAAOE,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAnBD;;AAsBA,QAAMY,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;AACvD,SAAK,MAAMC,OAAX,IAAsBF,aAAtB,EAAqC;AACnC,UAAIG,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AACA,UAAIE,YAAY,GAAG,CAAnB;;AACA,UAAID,EAAE,IAAIF,WAAV,EAAuB;AACrBG,QAAAA,YAAY,GAAGH,WAAW,CAACE,EAAD,CAAX,CAAgB,eAAhB,CAAf;AACD;;AACDD,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2BE,YAAY,GAAG,CAA1C;AACAH,MAAAA,WAAW,CAACE,EAAD,CAAX,GAAkBD,OAAlB;AACD;AACF,GAVD;;AAYA,QAAMG,kCAAkC,GAAG,YAAY;AAErD,QAAIT,GAAG,GAAG,IAAV;;AACA,QAAI1B,iBAAiB,EAArB,EAAyB;AACvB,UAAIH,OAAO,MAAMC,YAAY,EAA7B,EAAiC;AAC/B,YAAIiC,WAAW,GAAG,EAAlB;AACA,cAAMK,kBAAkB,GAAG,MAAMhC,8BAA8B,EAA/D;AACAyB,QAAAA,gBAAgB,CAACO,kBAAD,EAAqBL,WAArB,CAAhB;AAEA,cAAMM,eAAe,GAAG,MAAMjB,0BAA0B,EAAxD;AACAS,QAAAA,gBAAgB,CAACQ,eAAD,EAAkBN,WAAlB,CAAhB;AAEA,cAAMO,iBAAiB,GAAG,MAAMd,6BAA6B,EAA7D;AACAK,QAAAA,gBAAgB,CAACS,iBAAD,EAAoBP,WAApB,CAAhB;AAGAL,QAAAA,GAAG,GAAGa,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAN;AAEA,eAAOL,GAAP;AAED,OAhBD,MAiBK,IAAI3B,eAAe,EAAnB,EAAuB;AAC1B2B,QAAAA,GAAG,GAAG,MAAMD,oCAAoC,GAAGZ,IAAvC,CAA4Ca,GAAG,IAAI;AAC7D,iBAAOA,GAAP;AACD,SAFW,CAAZ;AAGD;AACF;;AACD,WAAOA,GAAP;AACD,GA5BD;;AA+BE,SAAO;AAAES,IAAAA;AAAF,GAAP;AACD;KA7HqBlC,2B","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\n\r\nimport { createQueryHttpRequestBody, createSimpleFilterClause } from \"axios/AxiosUtils\";\r\n\r\nimport NOTIFICATION_STATUS_ENUM from \"common/enumerators/NotificationStatus\";\r\nimport NOTIFICATION_TYPE_ENUM from \"common/enumerators/NotificationTypeEnum\";\r\n\r\nimport { getUserLogin } from \"common/SessionUtils\";\r\nimport { isAdmin } from \"common/SessionUtils\";\r\nimport { isSubgerente } from \"common/SessionUtils\";\r\nimport { isComandoFiscal } from \"common/SessionUtils\";\r\nimport { hasUserLoggedData } from \"common/SessionUtils\";\r\n\r\nexport default function ReadNotificationPendingJobs() {\r\n  \r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const readPendingHomologationRequest = async () => {\r\n\r\n    let filters = [];\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"char\", \"in\", [NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.REALIZADA]));\r\n    filters.push(createSimpleFilterClause(\"fiscal_action_homologation_date\", \"char\", \"null\", \"true\"));\r\n    filters.push(createSimpleFilterClause(\"fiscal_action_homologation_auditor\", \"char\", \"equal\", getUserLogin()));\r\n    let httpRequestBody = createQueryHttpRequestBody(filters);\r\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\r\n\r\n    return await axiosRetryProxy.post(`${env.apiAddress}/warnings/read_all`, httpRequestBody)\r\n          .then(response => response.data)\r\n        .catch(err => {\r\n            console.log(err);\r\n            return [];\r\n      });\r\n  }\r\n\r\n  const readPendingAwarenesRequest = async () => {\r\n\r\n    let filters = [];\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_awareness_date\", \"char\", \"null\", \"true\"));\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_awareness_auditor\", \"char\", \"equal\", getUserLogin()));\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"int\", \"in\", [NOTIFICATION_STATUS_ENUM.DESIGNADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.REALIZADA, NOTIFICATION_STATUS_ENUM.HOMOLOGADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA]));\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters);\r\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\r\n\r\n    return await axios.post(`${env.apiAddress}/warnings/read_all`, httpRequestBody)\r\n        .then(response => response.data)\r\n        .catch(err => {\r\n            console.log(err);\r\n            return [];\r\n    });\r\n  }\r\n\r\n\r\n  const readPendingSupervisionRequest = async () => {\r\n\r\n    let filters = [];\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"char\", \"in\", [NOTIFICATION_STATUS_ENUM.REALIZADA, NOTIFICATION_STATUS_ENUM.HOMOLOGADA]));\r\n    filters.push(createSimpleFilterClause(\"fiscal_action_supervision_date\", \"char\", \"null\", \"true\"));\r\n    filters.push(createSimpleFilterClause(\"fiscal_action_supervision_auditor\", \"char\", \"equal\", getUserLogin()));\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters);\r\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\r\n\r\n    return await axios.post(`${env.apiAddress}/warnings/read_all`, httpRequestBody)\r\n          .then(response => response.data)\r\n        .catch(err => {\r\n            console.log(err);\r\n            return [];\r\n      });\r\n  }\r\n\r\n  const readPendingFiscalActionReportRequest = async () => {\r\n    let filters = [];\r\n\r\n    filters.push(createSimpleFilterClause(\"fiscal_action_auditors\", \"varying\", \"equal\", `%${getUserLogin()}%`));\r\n    filters.push(createSimpleFilterClause(\"fiscal_notification_status\", \"int\", \"equal\", NOTIFICATION_STATUS_ENUM.DESIGNADA));\r\n\r\n    const httpRequestBody = createQueryHttpRequestBody(filters);\r\n    httpRequestBody['fiscal_notification_type'] = NOTIFICATION_TYPE_ENUM.NOTIFICATION;\r\n\r\n    try {\r\n      const res = await axios.post(`${env.apiAddress}/warnings/read_all`, httpRequestBody);\r\n      if (Array.isArray(res.data)) {\r\n        return res.data;\r\n      } else{\r\n        return []\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n\r\n  const countPendingJobs = (notifications, pendingJobs) => {\r\n    for (const warning of notifications) {\r\n      let id = warning['id']\r\n      let pendingCount = 0\r\n      if (id in pendingJobs) {\r\n        pendingCount = pendingJobs[id]['pending_count']\r\n      }\r\n      warning['pending_count'] = pendingCount + 1\r\n      pendingJobs[id] = warning\r\n    }\r\n  }\r\n\r\n  const readNotificationPendingJobsRequest = async () => {\r\n\r\n    let res = null\r\n    if (hasUserLoggedData()) {\r\n      if (isAdmin() || isSubgerente()) {\r\n        let pendingJobs = {};\r\n        const homologationResult = await readPendingHomologationRequest();\r\n        countPendingJobs(homologationResult, pendingJobs);\r\n\r\n        const awarenessResult = await readPendingAwarenesRequest();\r\n        countPendingJobs(awarenessResult, pendingJobs);\r\n\r\n        const supervisionResult = await readPendingSupervisionRequest();\r\n        countPendingJobs(supervisionResult, pendingJobs);\r\n\r\n\r\n        res = Object.values(pendingJobs);\r\n\r\n        return res;\r\n        \r\n      }\r\n      else if (isComandoFiscal()) {\r\n        res = await readPendingFiscalActionReportRequest().then(res => {\r\n          return res\r\n        })\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n\r\n    return { readNotificationPendingJobsRequest }\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}