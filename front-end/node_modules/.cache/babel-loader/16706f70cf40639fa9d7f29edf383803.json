{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport env from 'common/enviroment';\nimport { createOrderByClause, createQueryHttpRequestBody } from \"./AxiosUtils\";\nexport default function ReadPoliceCarLocations() {\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n\n  const readPoliceCarLocationsRequest = async plate => {\n    let policeOrderBy = createOrderByClause(\"police_car_id\", \"asc\");\n    const policeCarHttpRequestBody = createQueryHttpRequestBody([], policeOrderBy);\n    const policeCarUrl = \"\".concat(env.apiAddress, \"/police_car/read_all\");\n\n    try {\n      let response = await axiosRetryProxy.post(policeCarUrl, policeCarHttpRequestBody);\n      return response.data;\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  };\n\n  return {\n    readPoliceCarLocationsRequest\n  };\n}\n_c = ReadPoliceCarLocations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPoliceCarLocations\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/axios/ReadPoliceCarLocations.js"],"names":["axios","axiosRetry","getTimeoutConfig","getRetryConfig","env","createOrderByClause","createQueryHttpRequestBody","ReadPoliceCarLocations","axiosRetryProxy","create","readPoliceCarLocationsRequest","plate","policeOrderBy","policeCarHttpRequestBody","policeCarUrl","apiAddress","response","post","data","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,SAASC,mBAAT,EAA8BC,0BAA9B,QAAgE,cAAhE;AAEA,eAAe,SAASC,sBAAT,GAAkC;AAE/C,QAAMC,eAAe,GAAGR,KAAK,CAACS,MAAN,CAAaP,gBAAgB,EAA7B,CAAxB;AACAD,EAAAA,UAAU,CAACO,eAAD,EAAkBL,cAAc,EAAhC,CAAV;;AAEA,QAAMO,6BAA6B,GAAG,MAAOC,KAAP,IAAiB;AAErD,QAAIC,aAAa,GAAGP,mBAAmB,CAAC,eAAD,EAAkB,KAAlB,CAAvC;AACA,UAAMQ,wBAAwB,GAAGP,0BAA0B,CAAC,EAAD,EAAKM,aAAL,CAA3D;AACA,UAAME,YAAY,aAAMV,GAAG,CAACW,UAAV,yBAAlB;;AAGA,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAMR,eAAe,CAACS,IAAhB,CAAqBH,YAArB,EAAmCD,wBAAnC,CAArB;AACA,aAAOG,QAAQ,CAACE,IAAhB;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAP;AACD;AAEF,GAfD;;AAiBA,SAAO;AAAET,IAAAA;AAAF,GAAP;AACD;KAvBuBH,sB","sourcesContent":["import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport env from 'common/enviroment';\r\n\r\nimport { createOrderByClause, createQueryHttpRequestBody } from \"./AxiosUtils\";\r\n\r\nexport default function ReadPoliceCarLocations() {\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const readPoliceCarLocationsRequest = async (plate) => {\r\n\r\n    let policeOrderBy = createOrderByClause(\"police_car_id\", \"asc\")\r\n    const policeCarHttpRequestBody = createQueryHttpRequestBody([], policeOrderBy)\r\n    const policeCarUrl = `${env.apiAddress}/police_car/read_all`\r\n  \r\n\r\n    try {\r\n      let response = await axiosRetryProxy.post(policeCarUrl, policeCarHttpRequestBody)\r\n      return response.data\r\n    } catch (err) {\r\n      console.log(err)\r\n      return err\r\n    }\r\n\r\n  }\r\n\r\n  return { readPoliceCarLocationsRequest }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}