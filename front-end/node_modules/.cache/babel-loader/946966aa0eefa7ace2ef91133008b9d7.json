{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\components\\\\group\\\\Group.js\",\n    _s = $RefreshSig$();\n\nimport GROUP_TYPE_ENUM from \"common/enumerators/GroupTypeEnum\";\nimport { GroupsContext } from \"context/GroupsContext\";\nimport React from \"react\";\nimport GroupModal from \"../modals/GroupsModal\";\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Group(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const warningConfigObj = data;\n  const {\n    modalData,\n    isModalActive,\n    modalType,\n    toggleModalOn,\n    toggleModalOff\n  } = useModalWithData();\n  const {\n    getGroupRegistry,\n    groupsNameMap\n  } = React.useContext(GroupsContext);\n\n  function mountGroupsElements() {\n    let groups = [];\n    let groupIdList = null;\n    let groupsID = warningConfigObj.getPlainGroupsIds();\n\n    if (groupsID) {\n      groupIdList = groupsID.split(\",\");\n    } else {\n      groupIdList = warningConfigObj.getPlainGroupsIdsSSE(); // O SSE usado na view de mapas monta os dados de uma warning de forma diferente. Ele não quebra em colunas. Por isso é necessário este condicional\n    }\n\n    if (groupIdList) {\n      for (var i = 0; i < groupIdList.length; i++) {\n        var groupID = groupIdList[i];\n        var groupData = getGroupRegistry(groupID);\n        var groupName = groupsNameMap[groupID];\n\n        if (groupData) {\n          groupName = groupData['group_name'];\n\n          if (groupData['group_type'] === GROUP_TYPE_ENUM.OPERACIONAL) {\n            groups.push( /*#__PURE__*/_jsxDEV(GroupElement, {\n              data: groupData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 25\n            }, this));\n          } else {\n            groups.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              children: groupName\n            }, \"\".concat(i), false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 25\n            }, this));\n          }\n        } else {\n          groups.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: groupName\n          }, \"\".concat(i), false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 23\n          }, this));\n        }\n      }\n    }\n\n    return groups;\n  }\n\n  function openGroupModal(groupData) {\n    toggleModalOn(MODAL_TYPE_ENUM.GROUP, groupData);\n  }\n\n  const GroupElement = props => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: props.type !== null && \"underlined_text\",\n        style: {\n          textAlign: 'left',\n          maxWidth: 110,\n          color: '#2322c8',\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          openGroupModal(props.data);\n        },\n        children: props.data === null ? 'Grupo Não Cadastrado' : props.data['group_name'] ? props.data['group_name'] : \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      style: {\n        whiteSpace: 'pre',\n        padding: '6px 7px 6px 12px',\n        margin: '8px'\n      },\n      children: mountGroupsElements().map(item => {\n        return item;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), modalType === MODAL_TYPE_ENUM.GROUP && /*#__PURE__*/_jsxDEV(GroupModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      data: modalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 47\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Group, \"HQRZH7MuTxsTCGo162pMWun/kVI=\", false, function () {\n  return [useModalWithData];\n});\n\n_c = Group;\n\nvar _c;\n\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/group/Group.js"],"names":["GROUP_TYPE_ENUM","GroupsContext","React","GroupModal","MODAL_TYPE_ENUM","useModalWithData","Group","data","warningConfigObj","modalData","isModalActive","modalType","toggleModalOn","toggleModalOff","getGroupRegistry","groupsNameMap","useContext","mountGroupsElements","groups","groupIdList","groupsID","getPlainGroupsIds","split","getPlainGroupsIdsSSE","i","length","groupID","groupData","groupName","OPERACIONAL","push","openGroupModal","GROUP","GroupElement","props","type","textAlign","maxWidth","color","cursor","whiteSpace","padding","margin","map","item"],"mappings":"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","sourcesContent":["import GROUP_TYPE_ENUM from \"common/enumerators/GroupTypeEnum\";\r\nimport { GroupsContext } from \"context/GroupsContext\";\r\nimport React from \"react\";\r\nimport GroupModal from \"../modals/GroupsModal\";\r\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\r\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\r\n\r\n\r\nexport default function Group({ data }) {\r\n\r\n  const warningConfigObj = data\r\n\r\n\r\n  const { modalData, isModalActive, modalType, toggleModalOn, toggleModalOff } = useModalWithData()\r\n\r\n\r\n  const { getGroupRegistry, groupsNameMap } = React.useContext(GroupsContext);\r\n\r\n\r\n  function mountGroupsElements() {\r\n    let groups = []\r\n    let groupIdList = null\r\n\r\n    let groupsID = warningConfigObj.getPlainGroupsIds()\r\n    if (groupsID) {\r\n      groupIdList = groupsID.split(\",\")\r\n    } else {\r\n      groupIdList = warningConfigObj.getPlainGroupsIdsSSE() // O SSE usado na view de mapas monta os dados de uma warning de forma diferente. Ele não quebra em colunas. Por isso é necessário este condicional\r\n    }\r\n\r\n    if (groupIdList) {\r\n\r\n      for (var i = 0; i < groupIdList.length; i++) {\r\n        var groupID = groupIdList[i]\r\n\r\n        var groupData = getGroupRegistry(groupID)\r\n        var groupName = groupsNameMap[groupID]\r\n\r\n        if (groupData) {\r\n          groupName = groupData['group_name']\r\n          if (groupData['group_type'] === GROUP_TYPE_ENUM.OPERACIONAL) {\r\n            groups.push(<GroupElement data={groupData} />)\r\n          }\r\n          else {\r\n            groups.push(<div key={`${i}`} >{groupName}</div>)\r\n          }\r\n        } else {\r\n          groups.push(<div key={`${i}`} >{groupName}</div>)\r\n        }\r\n      }\r\n    }\r\n    return groups\r\n  }\r\n\r\n  function openGroupModal(groupData) {\r\n    toggleModalOn(MODAL_TYPE_ENUM.GROUP, groupData)\r\n  }\r\n\r\n\r\n  const GroupElement = (props) => {\r\n    return (\r\n      <>\r\n        <div\r\n          className={props.type !== null && \"underlined_text\"}\r\n          style={{ textAlign: 'left', maxWidth: 110, color: '#2322c8', cursor: \"pointer\" }}\r\n          onClick={() => { openGroupModal(props.data) }}>\r\n          {props.data === null ? 'Grupo Não Cadastrado' : (props.data['group_name'] ? props.data['group_name'] : \"-\")}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"form-control\" style={{ whiteSpace: 'pre', padding: '6px 7px 6px 12px', margin: '8px' }}>\r\n        {mountGroupsElements().map(item => {\r\n          return item\r\n        })}\r\n      </div>\r\n      {modalType === MODAL_TYPE_ENUM.GROUP && <GroupModal show={isModalActive} toggle={toggleModalOff} data={modalData} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}