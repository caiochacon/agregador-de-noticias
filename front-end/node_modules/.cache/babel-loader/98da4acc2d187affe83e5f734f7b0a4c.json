{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useEffect, useCallback } from 'react';\nexport const useAbortController = () => {\n  _s();\n\n  const abortControllersRef = useRef([]);\n  const getAbortController = useCallback(() => {\n    const abortController = new AbortController();\n    abortControllersRef.current.push(abortController);\n    return abortController;\n  }, []); // Gera um novo signal a cada chamada\n\n  const getSignal = useCallback(() => {\n    return getAbortController().signal;\n  }, [getAbortController]); // Cancela todas as requisições pendentes\n\n  const abortAll = useCallback(() => {\n    abortControllersRef.current.forEach(controller => {\n      controller.abort();\n      console.log('Requisição cancelada pelo useAbortController!');\n    });\n    abortControllersRef.current = [];\n  }, []);\n  useEffect(() => {\n    // Chamada quando o componente for desmontado\n    return () => {\n      abortAll();\n    };\n  }, []);\n  return {\n    getSignal,\n    abortAll\n  };\n};\n\n_s(useAbortController, \"LVvSOal2nzj1rj4owduRDpNc0d4=\");","map":{"version":3,"sources":["C:/aria/cicc-app/front-end/src/common/hooks/useAbortController.js"],"names":["useRef","useEffect","useCallback","useAbortController","abortControllersRef","getAbortController","abortController","AbortController","current","push","getSignal","signal","abortAll","forEach","controller","abort","console","log"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,WAA5B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMC,mBAAmB,GAAGJ,MAAM,CAAC,EAAD,CAAlC;AAEA,QAAMK,kBAAkB,GAAGH,WAAW,CAAC,MAAM;AAC3C,UAAMI,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAH,IAAAA,mBAAmB,CAACI,OAApB,CAA4BC,IAA5B,CAAiCH,eAAjC;AACA,WAAOA,eAAP;AACD,GAJqC,EAInC,EAJmC,CAAtC,CAHsC,CAStC;;AACA,QAAMI,SAAS,GAAGR,WAAW,CAAC,MAAM;AAClC,WAAOG,kBAAkB,GAAGM,MAA5B;AACD,GAF4B,EAE1B,CAACN,kBAAD,CAF0B,CAA7B,CAVsC,CActC;;AACA,QAAMO,QAAQ,GAAGV,WAAW,CAAC,MAAM;AACjCE,IAAAA,mBAAmB,CAACI,OAApB,CAA4BK,OAA5B,CACEC,UAAU,IAAI;AACZA,MAAAA,UAAU,CAACC,KAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CACE,+CADF;AAGD,KANH;AAQAb,IAAAA,mBAAmB,CAACI,OAApB,GAA8B,EAA9B;AACD,GAV2B,EAUzB,EAVyB,CAA5B;AAYAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,WAAO,MAAM;AACXW,MAAAA,QAAQ;AACT,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAO;AAAEF,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACD,CAnCM;;GAAMT,kB","sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\r\n\r\nexport const useAbortController = () => {\r\n  const abortControllersRef = useRef([]);\r\n\r\n  const getAbortController = useCallback(() => {\r\n    const abortController = new AbortController();\r\n    abortControllersRef.current.push(abortController);\r\n    return abortController;\r\n  }, []);\r\n\r\n  // Gera um novo signal a cada chamada\r\n  const getSignal = useCallback(() => {\r\n    return getAbortController().signal;\r\n  }, [getAbortController]);\r\n\r\n  // Cancela todas as requisições pendentes\r\n  const abortAll = useCallback(() => {\r\n    abortControllersRef.current.forEach(\r\n      controller => {\r\n        controller.abort();\r\n        console.log(\r\n          'Requisição cancelada pelo useAbortController!'\r\n        );\r\n      }\r\n    );\r\n    abortControllersRef.current = [];\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Chamada quando o componente for desmontado\r\n    return () => {\r\n      abortAll();\r\n    };\r\n  }, []);\r\n\r\n  return { getSignal, abortAll };\r\n};"]},"metadata":{},"sourceType":"module"}