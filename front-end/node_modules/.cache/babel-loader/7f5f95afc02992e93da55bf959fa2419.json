{"ast":null,"code":"import MASK_ENUM from \"common/enumerators/MaskEnum\";\nimport { gambMask } from \"common/utils/mask\";\nimport { applyMask } from \"common/utils/mask\";\nimport { CONFIG_TYPE_CONDITIONS_REVERSE, SEVERITY_CONDITIONS, TAGS_ENUM } from \"../../../common/rules/WarningConfigRules\";\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\";\nimport { isClosed } from \"common/enumerators/StatusEnum\";\nimport { convertUtcToBrazilianDate } from \"common/utils/validate\";\nimport { isEmpty } from \"common/utils/collections\";\nimport { CLOSING_DATE } from \"common/model/WarningConfig\";\nimport { TYPE } from \"common/model/WarningConfig\";\nimport { SEVERITY } from \"common/model/WarningConfig\";\nimport { STATUS } from \"common/model/WarningConfig\";\nimport { LOG_TIMESTAMP } from \"common/model/Notification\";\nimport { MODIFICATION_USER } from \"common/model/WarningConfig\";\nimport { PAUSE_TIMESTAMP } from \"common/model/WarningConfig\";\nimport { PAUSE_USER } from \"common/model/WarningConfig\";\nexport const formatWarningHistoryText = (warningHistoryData, warningCurrentData) => {\n  let result = [];\n\n  for (let log of warningHistoryData) {\n    const dataCriacao = convertUtcToBrazilianDate(warningHistoryData[0].data_criacao);\n    const dataFechamento = convertUtcToBrazilianDate(log[CLOSING_DATE]);\n    const configType = CONFIG_TYPE_CONDITIONS_REVERSE[log[TYPE]];\n    const severidade = Object.keys(SEVERITY_CONDITIONS).find(key => SEVERITY_CONDITIONS[key] === log[SEVERITY]);\n    const configStatus = log[STATUS];\n\n    if (configStatus === STATUS_ENUM.CRIADO) {\n      result.push(\" \".concat(dataCriacao, \" - ALERTA CRIADO POR \").concat(warningHistoryData[0].criador, \" COM DATA DE FECHAMENTO EM \").concat(dataFechamento, \" COM TIPO DE CONFIGURA\\xC7\\xC3O \").concat(configType, \" E SEVERIDADE \").concat(severidade, \" \\n\"));\n    } else if (configStatus === STATUS_ENUM.ATUALIZADO) {\n      result.push(\"\".concat(convertUtcToBrazilianDate(log[LOG_TIMESTAMP]), \"  -   ALERTA EDITADO POR \").concat(log[MODIFICATION_USER], \" COM DATA DE FECHAMENTO EM \").concat(dataFechamento, \" COM TIPO DE CONFIGURA\\xC7\\xC3O \").concat(configType, \" E SEVERIDADE \").concat(severidade, \" \\n\"));\n    } else if (configStatus === STATUS_ENUM.REMOVIDO) {\n      result.push(\"\".concat(convertUtcToBrazilianDate(log[LOG_TIMESTAMP]), \"  -   ALERTA REMOVIDO POR \").concat(log[MODIFICATION_USER], \" COM DATA DE FECHAMENTO EM \").concat(dataFechamento, \" COM TIPO DE CONFIGURA\\xC7\\xC3O \").concat(configType, \" E SEVERIDADE \").concat(severidade, \" \\n\"));\n    } else if (configStatus === STATUS_ENUM.PAUSED) {\n      result.push(\"\".concat(convertUtcToBrazilianDate(log[LOG_TIMESTAMP]), \"  -   ALERTA SUSPENSO AT\\xC9  \").concat(convertUtcToBrazilianDate(log[PAUSE_TIMESTAMP]), \" POR \").concat(log[PAUSE_USER], \" \\n\"));\n    } else if (configStatus === STATUS_ENUM.ACTIVE) {\n      result.push(\"\".concat(convertUtcToBrazilianDate(log[LOG_TIMESTAMP]), \"  -   ALERTA REATIVADO POR \").concat(log[PAUSE_USER], \" \\n\"));\n    }\n  }\n\n  if (isClosed(warningCurrentData)) {\n    result.push(\"\".concat(convertUtcToBrazilianDate(warningCurrentData[CLOSING_DATE]), \"  -   ALERTA ENCERRADO \\n\"));\n  }\n\n  return result.map(item => item.toUpperCase()).join(\"\\n\");\n};\nexport const formatConditionsText = function (config, currentAvailableConditions) {\n  let applyMaskEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let result = [];\n\n  for (const [key, value] of Object.entries(config)) {\n    if (!isEmpty(value)) {\n      let tag = currentAvailableConditions[key];\n      let display = tag['display'] + \": \";\n      let label = value;\n\n      if (applyMaskEnabled) {\n        label = applyMask(tag['mask'], gambMask(value, tag['mask']));\n      }\n\n      if (tag['mask'] === MASK_ENUM.MONEY && Array.isArray(value) && value.length > 1) {\n        label = label.join(\" --- \");\n      } else if (Array.isArray(value) && value.length > 1) {\n        label = label.join(\" ou \");\n      }\n\n      result.push(display + label + \"\\n\");\n    }\n  }\n\n  return result;\n}; //O componente tagsinput registra outros metadadados tais como display name e outros valores. \n//Estas informações não são necessárias para salvar no banco de dados. Assim, este método serve para retirar \n//estas \"impurezas\". \n//TODO jogar este tratamento dentro do próprio newtagsinput. \n\nexport function cleanTagsInput(tagsInput) {\n  let result = {};\n\n  for (const [key, value] of Object.entries(tagsInput)) {\n    let column = TAGS_ENUM[key].column;\n    let tagValue = value[0];\n\n    if (isEmpty(tagValue)) {\n      continue;\n    } //TODO colocar estas regras dentro de um objeto próprio para tags\n\n\n    if (value && value.length > 1 && !Array.isArray(value[0])) {\n      tagValue = value;\n    }\n\n    result[column] = tagValue;\n  }\n\n  return result;\n}\nexport const formatDateTimeString = date => {\n  const americanDateTime = \"\".concat(date[0], \"T\").concat(date[1]);\n  return convertUtcToBrazilianDate(americanDateTime + \"00:00:00\".substring(americanDateTime.length));\n};","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/views/Warnings/utils/format-data.js"],"names":["MASK_ENUM","gambMask","applyMask","CONFIG_TYPE_CONDITIONS_REVERSE","SEVERITY_CONDITIONS","TAGS_ENUM","STATUS_ENUM","isClosed","convertUtcToBrazilianDate","isEmpty","CLOSING_DATE","TYPE","SEVERITY","STATUS","LOG_TIMESTAMP","MODIFICATION_USER","PAUSE_TIMESTAMP","PAUSE_USER","formatWarningHistoryText","warningHistoryData","warningCurrentData","result","log","dataCriacao","data_criacao","dataFechamento","configType","severidade","Object","keys","find","key","configStatus","CRIADO","push","criador","ATUALIZADO","REMOVIDO","PAUSED","ACTIVE","map","item","toUpperCase","join","formatConditionsText","config","currentAvailableConditions","applyMaskEnabled","value","entries","tag","display","label","MONEY","Array","isArray","length","cleanTagsInput","tagsInput","column","tagValue","formatDateTimeString","date","americanDateTime","substring"],"mappings":"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","sourcesContent":["import MASK_ENUM from \"common/enumerators/MaskEnum\"\r\nimport { gambMask } from \"common/utils/mask\"\r\nimport { applyMask } from \"common/utils/mask\"\r\nimport {  CONFIG_TYPE_CONDITIONS_REVERSE,  SEVERITY_CONDITIONS, TAGS_ENUM, } from \"../../../common/rules/WarningConfigRules\"\r\nimport STATUS_ENUM from \"common/enumerators/StatusEnum\"\r\nimport { isClosed } from \"common/enumerators/StatusEnum\"\r\nimport { convertUtcToBrazilianDate } from \"common/utils/validate\"\r\nimport { isEmpty } from \"common/utils/collections\"\r\nimport { CLOSING_DATE } from \"common/model/WarningConfig\"\r\nimport { TYPE } from \"common/model/WarningConfig\"\r\nimport { SEVERITY } from \"common/model/WarningConfig\"\r\nimport { STATUS } from \"common/model/WarningConfig\"\r\nimport { LOG_TIMESTAMP } from \"common/model/Notification\"\r\nimport { MODIFICATION_USER } from \"common/model/WarningConfig\"\r\nimport { PAUSE_TIMESTAMP } from \"common/model/WarningConfig\"\r\nimport { PAUSE_USER } from \"common/model/WarningConfig\"\r\n\r\n\r\nexport const formatWarningHistoryText = (warningHistoryData, warningCurrentData) => {\r\n\r\n  let result = []\r\n\r\n  for (let log of warningHistoryData) {\r\n\r\n    const dataCriacao = convertUtcToBrazilianDate(warningHistoryData[0].data_criacao);\r\n    const dataFechamento = convertUtcToBrazilianDate(log[CLOSING_DATE]);\r\n    const configType = CONFIG_TYPE_CONDITIONS_REVERSE[log[TYPE]];\r\n    const severidade = Object.keys(SEVERITY_CONDITIONS).find(key => SEVERITY_CONDITIONS[key] === log[SEVERITY]);\r\n    const configStatus = log[STATUS];\r\n\r\n    if (configStatus === STATUS_ENUM.CRIADO) {\r\n      result.push(` ${dataCriacao} - ALERTA CRIADO POR ${warningHistoryData[0].criador} COM DATA DE FECHAMENTO EM ${dataFechamento} COM TIPO DE CONFIGURAÇÃO ${configType} E SEVERIDADE ${severidade} \\n`);\r\n    } else if (configStatus === STATUS_ENUM.ATUALIZADO) {\r\n      result.push(`${convertUtcToBrazilianDate(log[LOG_TIMESTAMP])}  -   ALERTA EDITADO POR ${log[MODIFICATION_USER]} COM DATA DE FECHAMENTO EM ${dataFechamento} COM TIPO DE CONFIGURAÇÃO ${configType} E SEVERIDADE ${severidade} \\n`)\r\n    } else if (configStatus === STATUS_ENUM.REMOVIDO) {\r\n      result.push(`${convertUtcToBrazilianDate(log[LOG_TIMESTAMP])}  -   ALERTA REMOVIDO POR ${log[MODIFICATION_USER]} COM DATA DE FECHAMENTO EM ${dataFechamento} COM TIPO DE CONFIGURAÇÃO ${configType} E SEVERIDADE ${severidade} \\n`)\r\n    } else if (configStatus === STATUS_ENUM.PAUSED) {\r\n      result.push(`${convertUtcToBrazilianDate(log[LOG_TIMESTAMP])}  -   ALERTA SUSPENSO ATÉ  ${convertUtcToBrazilianDate(log[PAUSE_TIMESTAMP])} POR ${log[PAUSE_USER]} \\n`)\r\n    } else if (configStatus === STATUS_ENUM.ACTIVE) {\r\n      result.push(`${convertUtcToBrazilianDate(log[LOG_TIMESTAMP])}  -   ALERTA REATIVADO POR ${log[PAUSE_USER]} \\n`)\r\n    }\r\n  }\r\n\r\n  if (isClosed(warningCurrentData)) {\r\n    result.push(`${convertUtcToBrazilianDate(warningCurrentData[CLOSING_DATE])}  -   ALERTA ENCERRADO \\n`)\r\n  }\r\n\r\n  return result.map(item => item.toUpperCase()).join(\"\\n\");\r\n}\r\n\r\n\r\nexport const formatConditionsText = (config, currentAvailableConditions, applyMaskEnabled=false) => {\r\n    let result = []\r\n    for (const [key, value] of Object.entries(config)) {\r\n      if (!isEmpty(value)) {\r\n        let tag = currentAvailableConditions[key]\r\n        let display = tag['display'] + \": \"\r\n        let label = value\r\n        if (applyMaskEnabled) {\r\n          label = applyMask(tag['mask'], gambMask(value, tag['mask']))\r\n        }\r\n        if (tag['mask'] === MASK_ENUM.MONEY && Array.isArray(value) && value.length > 1) {\r\n          label = label.join(\" --- \")\r\n        } else if (Array.isArray(value) && value.length > 1) {\r\n          label = label.join(\" ou \")\r\n        }\r\n\r\n        result.push(display + label + \"\\n\")\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  //O componente tagsinput registra outros metadadados tais como display name e outros valores. \r\n  //Estas informações não são necessárias para salvar no banco de dados. Assim, este método serve para retirar \r\n  //estas \"impurezas\". \r\n  //TODO jogar este tratamento dentro do próprio newtagsinput. \r\nexport  function cleanTagsInput(tagsInput) {\r\n\r\n    let result = {}\r\n\r\n    for (const [key, value] of Object.entries(tagsInput)) {\r\n      let column = TAGS_ENUM[key].column\r\n      let tagValue = value[0]\r\n\r\n      if (isEmpty(tagValue)){\r\n        continue\r\n      }\r\n      //TODO colocar estas regras dentro de um objeto próprio para tags\r\n      if (value && value.length > 1 && !Array.isArray(value[0])) {\r\n        tagValue = value\r\n      }\r\n\r\n      result[column] = tagValue\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n\r\n  export const formatDateTimeString = (date) => {\r\n    const americanDateTime = `${date[0]}T${date[1]}`\r\n    return convertUtcToBrazilianDate(americanDateTime + \"00:00:00\".substring(americanDateTime.length))\r\n  }\r\n\r\n\r\n  "]},"metadata":{},"sourceType":"module"}