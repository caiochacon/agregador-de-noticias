{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\components\\\\modals\\\\NotificationPendingModal.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Modal, ModalBody, ModalHeader, Row, Spinner } from \"reactstrap\";\nimport Table from \"components/tables/Table\";\nimport { Notification } from 'common/model/Notification';\nimport { WarningsUpdateContext } from \"context/WarningsUpdateContext\";\nimport useAsync from \"common/hooks/useAsync\";\nimport readNotificationPendingJobs from \"axios/ReadNotificationPendingJobs\";\nimport { ID } from \"common/model/Notification\";\nimport { ID_CONFIG } from \"common/model/Notification\";\nimport { NAME } from \"common/model/WarningConfig\";\nimport { FISCAL_NOTIFICATION_STATUS } from \"common/model/Notification\";\nimport { CLOSING_DATE } from \"common/model/WarningConfig\";\nimport { ViewsContext } from \"context/ViewsContext\";\nimport { NotificationActionButtons } from \"components/buttons/NoficationActionButtons\";\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\nimport HomologationModal from \"./HomologationModal\";\nimport { EVENT_VEHICLE_PLATE } from \"common/model/Event\";\nimport { EVENT_VEHICLE_TYPE } from \"common/model/Event\";\nimport { EVENT_VEHICLE_MODEL } from \"common/model/Event\";\nimport { EVENT_VEHICLE_COLOUR } from \"common/model/Event\";\nimport { EVENT_CREATION_TIMESTAMP } from \"common/model/Event\";\nimport { EVENT_LOCAL } from \"common/model/Event\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HOMOLOGATION_MODE = 0;\nexport const AWARENESS_MODE = 1;\nexport default function NotificationPendingModal(_ref) {\n  _s();\n\n  let {\n    show,\n    toggle,\n    fetchData,\n    actionMethods,\n    disabledMethods,\n    refresh\n  } = _ref;\n  const {\n    readNotificationPendingJobsRequest\n  } = readNotificationPendingJobs();\n  const {\n    warningsViewed\n  } = React.useContext(WarningsUpdateContext);\n  const {\n    setPendingNewNotifications\n  } = React.useContext(ViewsContext);\n  const [data, setData] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const {\n    modalData,\n    isModalActive,\n    modalType,\n    toggleModalOn,\n    toggleModalOff\n  } = useModalWithData(); //TODO Resolver o problema em caso de error. Não está sendo tratado. \n\n  const {\n    loading\n  } = useAsync(async () => {\n    let notificationPendings = await readNotificationPendingJobsRequest();\n    setPendingNewNotifications(true);\n    setData(notificationPendings);\n    return notificationPendings;\n  }, [fetchData]);\n\n  const openHomologationModal = (mode, notificationObj, index, popHomologatedNotification, raw_data) => {\n    let modalData = {\n      homologationType: mode,\n      notification_id: notificationObj.getId(),\n      notification: notificationObj,\n      index: index,\n      popHomologatedNotification: popHomologatedNotification,\n      raw_data\n    };\n    toggleModalOn(MODAL_TYPE_ENUM.HOMOLOGATION, modalData);\n  };\n\n  const customActionMethods = { ...actionMethods,\n    homologationMethod: openHomologationModal\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: show,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        style: {\n          padding: \"10px 15px\"\n        },\n        children: \"Homologa\\xE7\\xF5es/Ci\\xEAncias Pendentes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        style: {\n          alignContent: 'center',\n          paddingTop: \"4px\"\n        },\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          color: \"info\",\n          style: {\n            width: \"4.0rem\",\n            height: \"4.0rem\",\n            margin: '4.0rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 20\n        }, this) : \"\", !loading && Array.isArray(data) && data.length > 0 ? /*#__PURE__*/_jsxDEV(Row, {\n          style: {\n            margin: '0 0 20px 0'\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            data: data,\n            fillData: true,\n            hideTopBar: true,\n            loading: [isLoading, setIsLoading],\n            columns: {\n              \"Nº Ocorrência\": {\n                args: ID,\n                thStyle: {\n                  textAlign: 'right'\n                },\n                tdStyle: {\n                  textAlign: 'right'\n                }\n              },\n              \"Nº Alerta\": {\n                args: ID_CONFIG,\n                thStyle: {\n                  textAlign: 'right'\n                },\n                tdStyle: {\n                  textAlign: 'right'\n                }\n              },\n              \"Alerta\": {\n                args: NAME,\n                thStyle: {\n                  textAlign: 'center'\n                },\n                tdStyle: {\n                  textAlign: 'center'\n                }\n              },\n              \"Data/Hora\": {\n                args: EVENT_CREATION_TIMESTAMP,\n                tdStyle: {\n                  whiteSpace: 'pre',\n                  textAlign: 'center'\n                },\n                func: date => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\n              },\n              \"Local\": EVENT_LOCAL,\n              \"Veículo/Modelo/Cor\": {\n                args: [EVENT_VEHICLE_TYPE, EVENT_VEHICLE_MODEL, EVENT_VEHICLE_COLOUR],\n                tdStyle: {\n                  whiteSpace: 'pre'\n                },\n                func: _ref2 => {\n                  let [vehicle, model, color] = _ref2;\n                  return \"\".concat(vehicle, \"\\n\").concat(model, \"\\n\").concat(color);\n                }\n              },\n              \"Placa\": EVENT_VEHICLE_PLATE,\n              \"Situação\": {\n                args: [ID, FISCAL_NOTIFICATION_STATUS, CLOSING_DATE],\n                thStyle: {\n                  textAlign: 'center'\n                },\n                tdStyle: {\n                  textAlign: 'center',\n                  whiteSpace: 'pre'\n                },\n                Func: _ref3 => {\n                  let {\n                    row_data\n                  } = _ref3;\n                  const notificationObj = new Notification(row_data);\n                  return notificationObj.getNotificationStatusLabel(warningsViewed);\n                }\n              },\n              \"Ações\": {\n                args: ID,\n                tdStyle: {\n                  textAlign: 'center'\n                },\n                thStyle: {\n                  textAlign: 'center'\n                },\n                Func: _ref4 => {\n                  let {\n                    row_data,\n                    index\n                  } = _ref4;\n                  return /*#__PURE__*/_jsxDEV(NotificationActionButtons, {\n                    data: {\n                      notificationObj: new Notification(row_data),\n                      notificationIndex: index,\n                      raw_data: row_data\n                    },\n                    mode: {\n                      editionMode: false,\n                      popHomologatedNotificationEnabled: true\n                    },\n                    actionMethods: customActionMethods,\n                    disabledMethods: disabledMethods\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 23\n                  }, this);\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this) : !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"N\\xE3o h\\xE1 homologa\\xE7\\xF5es ou declara\\xE7\\xF5es de ci\\xEAncia pendentes para o usu\\xE1rio logado!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 26\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), modalType === MODAL_TYPE_ENUM.HOMOLOGATION && /*#__PURE__*/_jsxDEV(HomologationModal, {\n      show: isModalActive,\n      toggle: toggleModalOff,\n      parentData: data,\n      setParentData: setData,\n      data: modalData,\n      refresh: refresh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 52\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NotificationPendingModal, \"7X9UV3ChV3CTsERrrCnnUhUnm44=\", false, function () {\n  return [useModalWithData, useAsync];\n});\n\n_c = NotificationPendingModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationPendingModal\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/modals/NotificationPendingModal.js"],"names":["React","Modal","ModalBody","ModalHeader","Row","Spinner","Table","Notification","WarningsUpdateContext","useAsync","readNotificationPendingJobs","ID","ID_CONFIG","NAME","FISCAL_NOTIFICATION_STATUS","CLOSING_DATE","ViewsContext","NotificationActionButtons","useModalWithData","MODAL_TYPE_ENUM","HomologationModal","EVENT_VEHICLE_PLATE","EVENT_VEHICLE_TYPE","EVENT_VEHICLE_MODEL","EVENT_VEHICLE_COLOUR","EVENT_CREATION_TIMESTAMP","EVENT_LOCAL","HOMOLOGATION_MODE","AWARENESS_MODE","NotificationPendingModal","show","toggle","fetchData","actionMethods","disabledMethods","refresh","readNotificationPendingJobsRequest","warningsViewed","useContext","setPendingNewNotifications","data","setData","useState","isLoading","setIsLoading","modalData","isModalActive","modalType","toggleModalOn","toggleModalOff","loading","notificationPendings","openHomologationModal","mode","notificationObj","index","popHomologatedNotification","raw_data","homologationType","notification_id","getId","notification","HOMOLOGATION","customActionMethods","homologationMethod","padding","alignContent","paddingTop","width","height","margin","Array","isArray","length","args","thStyle","textAlign","tdStyle","whiteSpace","func","date","Date","toLocaleString","replace","vehicle","model","color","Func","row_data","getNotificationStatusLabel","notificationIndex","editionMode","popHomologatedNotificationEnabled"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal, ModalBody, ModalHeader,\r\n  Row, Spinner\r\n} from \"reactstrap\";\r\nimport Table from \"components/tables/Table\";\r\nimport { Notification } from 'common/model/Notification';\r\nimport { WarningsUpdateContext } from \"context/WarningsUpdateContext\";\r\n\r\nimport useAsync from \"common/hooks/useAsync\";\r\nimport readNotificationPendingJobs from \"axios/ReadNotificationPendingJobs\";\r\nimport { ID } from \"common/model/Notification\";\r\nimport { ID_CONFIG } from \"common/model/Notification\";\r\nimport { NAME } from \"common/model/WarningConfig\";\r\nimport { FISCAL_NOTIFICATION_STATUS } from \"common/model/Notification\";\r\nimport { CLOSING_DATE } from \"common/model/WarningConfig\";\r\nimport { ViewsContext } from \"context/ViewsContext\";\r\nimport { NotificationActionButtons } from \"components/buttons/NoficationActionButtons\";\r\nimport { useModalWithData } from \"common/hooks/useModalWithData\";\r\nimport MODAL_TYPE_ENUM from \"common/enumerators/ModalTypeEnum\";\r\nimport HomologationModal from \"./HomologationModal\";\r\nimport { EVENT_VEHICLE_PLATE } from \"common/model/Event\";\r\nimport { EVENT_VEHICLE_TYPE } from \"common/model/Event\";\r\nimport { EVENT_VEHICLE_MODEL } from \"common/model/Event\";\r\nimport { EVENT_VEHICLE_COLOUR } from \"common/model/Event\";\r\nimport { EVENT_CREATION_TIMESTAMP } from \"common/model/Event\";\r\nimport { EVENT_LOCAL } from \"common/model/Event\";\r\n\r\nexport const HOMOLOGATION_MODE = 0\r\nexport const AWARENESS_MODE = 1\r\n\r\nexport default function NotificationPendingModal({ show, toggle, fetchData, actionMethods, disabledMethods, refresh  }) {\r\n\r\n  const { readNotificationPendingJobsRequest } = readNotificationPendingJobs()\r\n  const { warningsViewed } = React.useContext(WarningsUpdateContext)\r\n  const { setPendingNewNotifications} = React.useContext(ViewsContext)\r\n\r\n  const [data, setData] = React.useState([])\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  \r\n\r\n  const {modalData, isModalActive, modalType,  toggleModalOn, toggleModalOff } = useModalWithData()\r\n\r\n  //TODO Resolver o problema em caso de error. Não está sendo tratado. \r\n  const { loading } = useAsync(async () => {\r\n    \r\n    let notificationPendings = await readNotificationPendingJobsRequest()\r\n    setPendingNewNotifications(true)\r\n    \r\n    setData(notificationPendings)\r\n\r\n\r\n    return notificationPendings\r\n  }, [fetchData]);\r\n\r\n  const openHomologationModal = (mode, notificationObj,  index, popHomologatedNotification, raw_data) => {\r\n    let modalData = { homologationType: mode, notification_id: notificationObj.getId(), notification: notificationObj, index:index, popHomologatedNotification: popHomologatedNotification, raw_data }\r\n    toggleModalOn(MODAL_TYPE_ENUM.HOMOLOGATION, modalData)\r\n  }\r\n\r\n\r\n  const customActionMethods = {\r\n      ...actionMethods,\r\n      homologationMethod : openHomologationModal   \r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n    <Modal isOpen={show} toggle={toggle}>\r\n      <ModalHeader toggle={toggle} style={{ padding: \"10px 15px\" }}>\r\n        Homologações/Ciências Pendentes.\r\n      </ModalHeader>\r\n      <ModalBody style={{ alignContent: 'center', paddingTop: \"4px\" }}>\r\n        {loading ? <Spinner color=\"info\" style={{ width: \"4.0rem\", height: \"4.0rem\", margin: '4.0rem' }} /> : \"\"}\r\n        {!loading && Array.isArray(data) && data.length > 0 ?\r\n          <Row style={{ margin: '0 0 20px 0' }}>\r\n            <Table\r\n              data={data}\r\n              fillData\r\n              hideTopBar\r\n              loading={[isLoading, setIsLoading]}\r\n              columns={{\r\n                \"Nº Ocorrência\": {\r\n                  args: ID,\r\n                  thStyle: { textAlign: 'right' },\r\n                  tdStyle: { textAlign: 'right' }\r\n                },\r\n                \"Nº Alerta\": {\r\n                  args: ID_CONFIG,\r\n                  thStyle: { textAlign: 'right' },\r\n                  tdStyle: { textAlign: 'right' }\r\n                },\r\n                \"Alerta\": {\r\n                  args: NAME,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center' }\r\n                },\r\n                \"Data/Hora\": {\r\n                  args: EVENT_CREATION_TIMESTAMP,\r\n                  tdStyle: { whiteSpace: 'pre', textAlign: 'center' },\r\n                  func: (date) => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\r\n                },\r\n                \"Local\": EVENT_LOCAL,\r\n                \"Veículo/Modelo/Cor\": {\r\n                  args: [EVENT_VEHICLE_TYPE, EVENT_VEHICLE_MODEL, EVENT_VEHICLE_COLOUR],\r\n                  tdStyle: { whiteSpace: 'pre' },\r\n                  func: ([vehicle, model, color]) => `${vehicle}\\n${model}\\n${color}`\r\n                },\r\n                \"Placa\": EVENT_VEHICLE_PLATE,\r\n                \"Situação\": {\r\n                  args: [ID, FISCAL_NOTIFICATION_STATUS, CLOSING_DATE],\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  Func: ({ row_data}) => {\r\n                    const notificationObj = new Notification(row_data)\r\n                    return notificationObj.getNotificationStatusLabel(warningsViewed)\r\n                  }\r\n                },\r\n                \"Ações\": {\r\n                  args: ID,\r\n                  tdStyle: { textAlign: 'center' },\r\n                  thStyle: {\r\n                     textAlign: 'center' },\r\n                  Func: ({ row_data, index }) => \r\n                      <NotificationActionButtons \r\n                        data={{\r\n                          notificationObj : new Notification(row_data),\r\n                          notificationIndex : index,\r\n                          raw_data : row_data\r\n                        }}\r\n                        mode ={{\r\n                          editionMode : false,\r\n                          popHomologatedNotificationEnabled : true\r\n                        }}\r\n                        actionMethods={customActionMethods} disabledMethods={disabledMethods}\r\n\r\n                    />\r\n                }\r\n              }} />\r\n          </Row>\r\n\r\n          : (!loading) ? <div><h3>Não há homologações ou declarações de ciência pendentes para o usuário logado!</h3></div> : \"\"\r\n        }\r\n\r\n      </ModalBody>\r\n    </Modal>\r\n    {modalType === MODAL_TYPE_ENUM.HOMOLOGATION && <HomologationModal show={isModalActive} toggle={toggleModalOff} parentData={data}  setParentData={setData} data={modalData} refresh={refresh} />}\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}