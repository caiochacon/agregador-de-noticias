{"ast":null,"code":"import MASK_ENUM from \"common/enumerators/MaskEnum\";\nimport { isEmpty } from \"./collections\";\nimport { removeUnicode } from \"./validate\"; //Esta função usa recursão. \n\nfunction applyMoneyMask(input) {\n  let result = [];\n\n  if (typeof input === \"object\" || Array.isArray(input)) {\n    for (const value of input) {\n      result.push(applyMoneyMask(value));\n    }\n\n    let value = result.join(\" <= valor <= \");\n    return value.toUpperCase();\n  } else {\n    let value = input + '';\n    value = value.replaceAll(\",\", \"\").replaceAll(\".\", \"\") + '';\n    value = parseInt(value.replace(/[\\D]+/g, ''));\n    value = value + '';\n    value = value.replace(/([0-9]{2})$/g, \",$1\");\n\n    if (value.length > 6 && value.length <= 9) {\n      value = value.replaceAll(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\n    } else if (value.length > 9) {\n      let aux = Number(value.replaceAll(\".\", \"\").replaceAll(\",\", \".\"));\n      value = aux.toLocaleString('pt-br', {\n        minimumFractionDigits: 2\n      });\n    }\n\n    return value === 'NaN' ? \"\" : \"R$ \" + value;\n  }\n}\n\nexport function applyMask(mask, input) {\n  //Recursão para o caso do input ser array\n  if (Array.isArray(input)) {\n    let result = [];\n\n    for (const element of input) {\n      result.push(applyMask(mask, element));\n    }\n\n    return result;\n  } else {\n    if (mask === MASK_ENUM.CNPJ) {\n      return input.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, \"$1.$2.$3/$4-$5\");\n    } else if (mask === MASK_ENUM.CPF) {\n      return input.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\n    } else if (mask === MASK_ENUM.MONEY) {\n      return applyMoneyMask(input);\n    } else if (mask === MASK_ENUM.PLATE) {\n      if (typeof input !== \"string\") {\n        let valor = input.join(\" ou \");\n        return valor.toUpperCase();\n      } else {\n        return input.toUpperCase();\n      }\n    } else {\n      return input;\n    }\n  }\n}\n\nfunction removeNumberMask(value) {\n  if (typeof value === \"object\" || Array.isArray(value)) {\n    let result = [];\n\n    for (const aux of value) {\n      result.push(removeNumberMask(aux));\n    }\n\n    return result;\n  } else {\n    if (typeof value === \"number\") {\n      value = value.toString();\n    }\n\n    value = value.replaceAll(\"R$\", \"\").replaceAll(\" \", \"\");\n\n    if (value.indexOf(\".\") === value.length - 3) {\n      /*caros, por alguma razão que não consegui explicar,\r\n      os valores monetários estão chegando aqui com formato diferente.\r\n      Hora vem com vírgula como casa decimal, hora vem com ponto. Quando vem com ponto,\r\n      não há o que fazer. Então precisei deste if trevoso.  */\n      return value;\n    } else {\n      value = value.replaceAll(\".\", \"\").replaceAll(\",\", \".\");\n\n      if (value.indexOf(\".\") === -1) {\n        let aux = value + \".00\";\n        return aux.replaceAll(\" \", \"\");\n      } else {\n        return value.replaceAll(\" \", \"\");\n      }\n    }\n  }\n} //Esta função usa recursão\n\n\nfunction removePlateMask(value) {\n  if (typeof value === \"object\" || Array.isArray(value)) {\n    let index = 0;\n\n    for (const aux of value) {\n      value[index] = removePlateMask(aux);\n      index += 1;\n    }\n\n    return value;\n  } else {\n    return value.replaceAll(\"-\", \"\").toUpperCase().replaceAll(\" \", \"\");\n  }\n}\n\nexport function removeMask(value, mask) {\n  if (!isEmpty(value)) {\n    if (Array.isArray(value)) {\n      let result = [];\n\n      for (const element of value) {\n        result.push(removeMask(element, mask));\n      }\n\n      return result;\n    } else {\n      value = removeUnicode(value, true);\n\n      if (isEmpty(mask)) {\n        return value.replace(/\\D/g, '');\n      } else if (mask === MASK_ENUM.MONEY) {\n        return removeNumberMask(value);\n      } else if (mask === MASK_ENUM.CPF || mask === MASK_ENUM.CNPJ) {\n        return value.replaceAll(\".\", \"\").replaceAll(\"/\", \"\").replaceAll(\"-\", \"\").replaceAll(\",\", \"\").replaceAll(\" \", \"\");\n      } else if (mask === MASK_ENUM.PLATE) {\n        return removePlateMask(value);\n      }\n    }\n  }\n\n  return value;\n} //TODO remover esta porcaria urgentemente. :-(\n\nexport function gambMaskAux(value, mask) {\n  var aux = value;\n\n  if (typeof value === \"number\") {\n    aux = value.toString();\n  }\n\n  if (aux.indexOf(\".\") === -1) {\n    return aux + \".00\";\n  } else {\n    return aux;\n  }\n}\nexport function gambMask(value, mask) {\n  if (mask === MASK_ENUM.MONEY && value !== null && value !== '') {\n    if (typeof value === \"object\" || Array.isArray(value)) {\n      let result = [];\n\n      for (const aux of value) {\n        result.push(gambMaskAux(aux));\n      }\n\n      return result;\n    } else {\n      return gambMaskAux(value);\n    }\n  } else {\n    return value;\n  }\n}","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/common/utils/mask.js"],"names":["MASK_ENUM","isEmpty","removeUnicode","applyMoneyMask","input","result","Array","isArray","value","push","join","toUpperCase","replaceAll","parseInt","replace","length","aux","Number","toLocaleString","minimumFractionDigits","applyMask","mask","element","CNPJ","CPF","MONEY","PLATE","valor","removeNumberMask","toString","indexOf","removePlateMask","index","removeMask","gambMaskAux","gambMask"],"mappings":"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","sourcesContent":["import MASK_ENUM from \"common/enumerators/MaskEnum\";\r\nimport { isEmpty } from \"./collections\";\r\nimport { removeUnicode } from \"./validate\";\r\n\r\n//Esta função usa recursão. \r\nfunction applyMoneyMask(input){\r\n    let result = []\r\n      if (typeof input === \"object\" || Array.isArray(input)) {\r\n        \r\n        for (const value of input){\r\n          result.push(applyMoneyMask(value))\r\n        }\r\n        let value = result.join(\" <= valor <= \")      \r\n        return value.toUpperCase()\r\n  \r\n      }  else {\r\n        let value = input + '';\r\n        value = value.replaceAll(\",\",\"\").replaceAll(\".\",\"\") + '';\r\n        value = parseInt(value.replace(/[\\D]+/g, ''));\r\n        value = value + '';\r\n        value = value.replace(/([0-9]{2})$/g, \",$1\");\r\n  \r\n        if (value.length > 6 && value.length <=9 ) {\r\n          value = value.replaceAll(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n        } else if (value.length > 9){\r\n          let aux = Number(value.replaceAll(\".\",\"\").replaceAll(\",\",\".\"))\r\n          value = aux.toLocaleString('pt-br', {minimumFractionDigits: 2});\r\n        }\r\n  \r\n        return value === 'NaN'? \"\": \"R$ \" + value;\r\n  \r\n      }\r\n    \r\n  }\r\n  \r\n  export function applyMask(mask, input) {\r\n  \r\n    //Recursão para o caso do input ser array\r\n    if(Array.isArray(input)){\r\n      let result = []\r\n      for (const element of input){\r\n        result.push(applyMask(mask,element))\r\n      } \r\n      return result\r\n  \r\n    } else {\r\n  \r\n      if(mask === MASK_ENUM.CNPJ){\r\n        return input.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, \"$1.$2.$3/$4-$5\")\r\n      }\r\n      else if (mask === MASK_ENUM.CPF){\r\n        return input.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\")\r\n      }\r\n      else if (mask === MASK_ENUM.MONEY){\r\n        return applyMoneyMask(input)\r\n      } else if (mask === MASK_ENUM.PLATE){\r\n        \r\n        if (typeof input !== \"string\") {\r\n          let valor = input.join(\" ou \")\r\n          return valor.toUpperCase()\r\n        } else {\r\n          return input.toUpperCase()\r\n        }\r\n        \r\n      }else{\r\n        return input\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  function removeNumberMask(value){\r\n  \r\n    if (typeof value === \"object\" || Array.isArray(value)) {\r\n      let result = []\r\n      for (const aux of value) {\r\n        result.push(removeNumberMask(aux))\r\n      }\r\n      return result\r\n    } else {\r\n      if (typeof value === \"number\"){\r\n        value = value.toString()\r\n      }\r\n    \r\n      value = value.replaceAll(\"R$\", \"\").replaceAll(\" \", \"\")\r\n    \r\n      if (value.indexOf(\".\") === value.length - 3){\r\n        /*caros, por alguma razão que não consegui explicar,\r\n        os valores monetários estão chegando aqui com formato diferente.\r\n        Hora vem com vírgula como casa decimal, hora vem com ponto. Quando vem com ponto,\r\n        não há o que fazer. Então precisei deste if trevoso.  */\r\n        return value;\r\n      } else {\r\n        value = value.replaceAll(\".\",\"\").replaceAll(\",\",\".\");\r\n    \r\n        if (value.indexOf(\".\") === -1){\r\n          let aux = value + \".00\"\r\n          return aux.replaceAll(\" \", \"\");        \r\n        } else {        \r\n          return value.replaceAll(\" \", \"\");\r\n        }\r\n      }\r\n    }\r\n    \r\n  }\r\n  \r\n  \r\n  //Esta função usa recursão\r\n  function removePlateMask(value){\r\n    if (typeof value === \"object\" || Array.isArray(value)) {\r\n      let index = 0\r\n      for (const aux of value){\r\n        value[index] = removePlateMask(aux)\r\n        index+=1\r\n      }        \r\n      return value\r\n    } else {\r\n      return value.replaceAll(\"-\",\"\").toUpperCase().replaceAll(\" \", \"\");\r\n    }\r\n  }\r\n  \r\n  \r\n  export function removeMask(value, mask) {\r\n  \r\n    if (!isEmpty(value)) {\r\n  \r\n      if (Array.isArray(value)) {\r\n        let result = []\r\n        for (const element of value) {\r\n          result.push(removeMask(element, mask))\r\n        }\r\n        return result\r\n      } else {\r\n  \r\n        value = removeUnicode(value, true)\r\n  \r\n        if (isEmpty(mask)) {\r\n          \r\n          return value.replace(/\\D/g, '')\r\n        } else if (mask === MASK_ENUM.MONEY) {\r\n          \r\n          return removeNumberMask(value)\r\n        } else if (mask === MASK_ENUM.CPF || mask === MASK_ENUM.CNPJ) {\r\n  \r\n          return value.replaceAll(\".\", \"\").replaceAll(\"/\", \"\").replaceAll(\"-\", \"\").replaceAll(\",\", \"\").replaceAll(\" \", \"\");\r\n        } else if (mask === MASK_ENUM.PLATE) {\r\n  \r\n          return removePlateMask(value)\r\n        }\r\n      }\r\n    }\r\n  \r\n    return value;\r\n  }\r\n  \r\n  //TODO remover esta porcaria urgentemente. :-(\r\n  export function gambMaskAux (value, mask) {\r\n    var aux = value;\r\n    if (typeof value === \"number\"){\r\n        aux = value.toString();\r\n    }\r\n    if (aux.indexOf(\".\") === -1){\r\n      return aux + \".00\";\r\n    } else {\r\n      return aux;\r\n    }\r\n  }\r\n  \r\n  export function gambMask (value, mask) {\r\n  \r\n    if (mask === MASK_ENUM.MONEY && value !== null && value !== '' ) {\r\n      if (typeof value === \"object\" || Array.isArray(value)){\r\n        let result = []\r\n        for (const aux  of value) {\r\n          result.push(gambMaskAux(aux))\r\n        }\r\n        return result\r\n      } else {\r\n        return gambMaskAux(value)\r\n      }\r\n    } else {\r\n      return value;\r\n    }\r\n  \r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}