{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\OneDrive\\\\Documentos\\\\cicc-app\\\\front-end\\\\src\\\\views\\\\Notification\\\\Notifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Card, CardBody, Button } from 'reactstrap';\nimport { useHistory } from \"react-router-dom\";\nimport env from 'common/enviroment';\nimport Table from \"components/tables/Table\";\nimport TagsInput from 'components/tags/TagsInput';\nimport NotificationModal from 'components/modals/NotificationModal/NotificationModal';\nimport HomologationModal from 'components/modals/HomologationModal';\nimport ClosingModal from 'components/modals/WarningClosingModal';\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\nimport { isAdmin, isSubgerente } from 'common/SessionUtils';\nimport { useModalWithData } from 'common/hooks/useModalWithData';\nimport { ViewsContext } from 'context/ViewsContext';\nimport NotificationPendingModal from 'components/modals/NotificationPendingModal';\nimport { createQueryHttpRequestBody } from 'axios/AxiosUtils';\nimport { createOrderByClause } from 'axios/AxiosUtils';\nimport NOTIFICATION_TYPE_ENUM from 'common/enumerators/NotificationTypeEnum';\nimport { createBaseHttpRequestBody } from 'axios/AxiosUtils';\nimport { isComandoFiscal } from 'common/SessionUtils';\nimport { cloneFilters } from 'axios/AxiosUtils';\nimport { mountGroupsFilterClause } from 'axios/AxiosUtils';\nimport { hasUserLoggedData } from 'common/SessionUtils';\nimport { createSimpleFilterClause } from 'axios/AxiosUtils';\nimport { getUserLogin } from 'common/SessionUtils';\nimport { OR_FILTER } from 'axios/AxiosUtils';\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\nimport { WarningsUpdateContext } from 'context/WarningsUpdateContext';\nimport { WarningsContext } from 'context/WarningsContext';\nimport { AuditorsContext } from 'context/AuditorsContext';\nimport { GroupsContext } from 'context/GroupsContext';\nimport { NavigationContext } from 'context/NavigationContext';\nimport { isLoggedIn } from 'common/SessionUtils';\nimport NOTIFICATION_STATUS_ENUM from 'common/enumerators/NotificationStatus';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\nimport { getRetryConfig } from \"axios/AxiosUtils\";\nimport { NotificationActionButtons } from 'components/buttons/NoficationActionButtons';\nimport SimpleMapModal from 'components/modals/SimpleMapModal';\nimport { Notification } from 'common/model/Notification';\nimport useToggle from 'common/hooks/useToogle';\nimport { BLANK_FORM_DATA, conditionalHomologationFormat, mountWarningHistoryText } from './utils/format-data';\nimport { TAGS_INPUT_FILTERS } from './utils/filters';\nimport { ID_CONFIG } from 'common/model/WarningConfig';\nimport { NAME } from 'common/model/WarningConfig';\nimport { FISCAL_ACTION } from 'common/model/WarningConfig';\nimport { FISCAL_ACTION_REPORT } from 'common/model/Notification';\nimport { FISCAL_ACTION_DATE } from 'common/model/Notification';\nimport { DESIGNATION_AUDITOR } from 'common/model/Notification';\nimport { FISCAL_ACTION_AUDITORS } from 'common/model/Notification';\nimport { SUPERVISION_AUDITOR } from 'common/model/Notification';\nimport { HOMOLOGATION_AUDITOR } from 'common/model/Notification';\nimport { SUPERVISION_DATE } from 'common/model/Notification';\nimport { AWARENESS_AUDITOR } from 'common/model/Notification';\nimport { AWARENESS_DATE } from 'common/model/Notification';\nimport { ID } from 'common/model/Notification';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { EVENT_CREATION_TIMESTAMP } from 'common/model/Event';\nimport { EVENT_VEHICLE_TYPE } from 'common/model/Event';\nimport { EVENT_VEHICLE_MODEL } from 'common/model/Event';\nimport { EVENT_VEHICLE_COLOUR } from 'common/model/Event';\nimport { EVENT_VEHICLE_PLATE } from 'common/model/Event';\nimport { EVENT_LOCAL } from 'common/model/Event';\nimport SuspensionModal from 'components/modals/SuspensionModal/SuspensionModal';\nimport { REACTIVATION_MODE } from 'components/modals/SuspensionModal/SuspensionModal';\nimport { SUSPENSION_MODE } from 'components/modals/SuspensionModal/SuspensionModal';\nimport { FISCAL_NOTIFICATION_TYPE } from 'common/model/Notification';\nimport { GROUP_IDS_SSE } from 'common/model/WarningConfig';\nimport { FILTERS } from 'axios/AxiosUtils';\nimport { ROLE } from 'axios/AxiosUtils';\nimport { QUERY } from 'axios/AxiosUtils';\nimport { ADMIN } from 'common/SessionUtils';\nimport useNotification from 'common/hooks/useNotification';\nimport { isEmpty } from 'common/utils/collections';\nimport { trimText } from 'common/utils/forms';\nimport { toUpperCase } from 'common/utils/validate';\nimport { treatNullValue } from 'common/utils/collections';\nimport { ID_NOTIFICATION } from 'common/model/Notification';\nimport { ID_LOG } from 'common/model/Notification';\nimport { INT } from 'axios/AxiosUtils';\nimport { EQUAL } from 'axios/AxiosUtils';\nimport { VARCHAR } from 'axios/AxiosUtils';\nimport { ASC } from 'axios/AxiosUtils';\nimport { setNotificationHistory } from 'common/SessionUtils';\nimport { setNotification } from 'common/SessionUtils';\nimport useAsync from 'common/hooks/useAsync';\nimport { reloadVisibilityGroups } from 'common/SessionUtils';\nimport { delay } from 'common/utils/forms';\nimport LoadingPage from 'layouts/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Notifications() {\n  _s();\n\n  const history = useHistory();\n  const {\n    refresh,\n    refreshFlag,\n    notificationFilters,\n    setNotificationFilters,\n    notificationTags,\n    setNotificationTags\n  } = React.useContext(ViewsContext);\n  const {\n    startWarningsViewedSSE,\n    warningsViewed\n  } = React.useContext(WarningsUpdateContext);\n  const {\n    startSSE,\n    wasReloaded,\n    setWasReloaded\n  } = React.useContext(WarningsContext);\n  const {\n    auditorsData,\n    getAuditorsData,\n    getAuditorRegistry\n  } = React.useContext(AuditorsContext);\n  const {\n    groupsDataMap,\n    fetchGroupsData,\n    getMonitoringGroupOwner,\n    getGroupOwnerData,\n    getGroupSupervisorData,\n    groupsSimpleMap,\n    fetchGroupsName\n  } = React.useContext(GroupsContext);\n  const {\n    setIsMap\n  } = React.useContext(NavigationContext);\n  const {\n    modalData,\n    setModalData,\n    isModalActive,\n    modalType,\n    toggleModalOn,\n    toggleModalOff\n  } = useModalWithData();\n  const {\n    mountEditionData\n  } = useNotification(getAuditorRegistry, getMonitoringGroupOwner, getGroupOwnerData, getGroupSupervisorData);\n  const [pendingNotificationFlag, fetchPendingNotification] = useToggle(false);\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\n\n  const toggleEditionModalOn = () => {\n    setEditionModal(true);\n  };\n\n  const toggleEditionModalOff = () => {\n    setEditionModal(false);\n    cleanInputs();\n  };\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA); // Hook para guardar dados antigos de um grupo, para impedir que a atualização de um grupo que não possui modificação\n\n  const axiosRetryProxy = axios.create(getTimeoutConfig());\n  axiosRetry(axiosRetryProxy, getRetryConfig());\n  const {\n    isLoaded: googleMapLoaded,\n    loadError: googleMapError\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: env.googleApiKey\n  });\n  const {\n    loading\n  } = useAsync(async () => {\n    if (wasReloaded && isLoggedIn()) {\n      setIsMap(false);\n      reloadVisibilityGroups();\n\n      if (isEmpty(groupsDataMap)) {\n        await fetchGroupsData();\n      }\n\n      if (isEmpty(groupsSimpleMap)) {\n        await fetchGroupsName();\n      }\n\n      if (isEmpty(auditorsData)) {\n        await getAuditorsData();\n      }\n\n      startWarningsViewedSSE();\n      startSSE();\n\n      if (hasUserLoggedData()) {\n        openPendingNotifications(false);\n      }\n\n      await delay(2000);\n      setWasReloaded(false);\n    }\n  }, [wasReloaded]);\n  React.useEffect(() => {\n    if (!isLoggedIn()) {\n      history.push('/login');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const cleanInputs = () => {\n    setFormData({ ...BLANK_FORM_DATA,\n      fiscal_action_auditors: {},\n      fiscal_action_homologation_auditor: \"\"\n    });\n  };\n\n  const readWarningHistory = async warningId => {\n    let filters = [];\n    filters.push(createSimpleFilterClause(ID_NOTIFICATION, INT, EQUAL, warningId));\n    let httpRequestBody = createQueryHttpRequestBody(filters, createOrderByClause(ID_LOG, ASC));\n\n    try {\n      const res = await axiosRetryProxy.post(\"\".concat(env.apiAddress, \"/warnings/read_warning_history\"), httpRequestBody);\n      return res.data;\n    } catch (error) {\n      console.log(\"XXX\", error);\n    }\n\n    return httpRequestBody;\n  };\n\n  const isEditionButtonDisabled = warning => {\n    //Se a notificação foi homologada ou não possuia comando fiscal, não deve permitir edição\n    let notAllowedStatus = [NOTIFICATION_STATUS_ENUM.HOMOLOGADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA];\n    if (notAllowedStatus.includes(warning.getStatus())) return true;\n\n    if (isAdmin() || isSubgerente()) {\n      return false;\n    }\n\n    return !hasUserLoggedData();\n  };\n\n  const isPauseButtonDisabled = criador => {\n    let user = getUserLogin();\n\n    if (user && criador === user || isAdmin() || isSubgerente()) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const createFilters = () => {\n    let filtersClone = cloneFilters(notificationFilters);\n    let groups = mountGroupsFilterClause(notificationFilters); //Se o usuário for do comando fiscal é muito provavel que ele não pertença a um dos grupos criadores do alerta.\n    //Por isso, é necessário instanciar o groups com um array vazio = []\n\n    if (hasUserLoggedData() && filtersClone && isComandoFiscal()) {\n      filtersClone.push(createSimpleFilterClause(FISCAL_ACTION_AUDITORS, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"));\n      groups = [];\n    }\n\n    if (hasUserLoggedData() && isSubgerente()) {\n      let orClauses = [];\n      orClauses.push(createSimpleFilterClause(HOMOLOGATION_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"));\n      orClauses.push(createSimpleFilterClause(AWARENESS_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"));\n      orClauses.push(createSimpleFilterClause(SUPERVISION_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"));\n      filtersClone.push(createCompositeFilterClause(HOMOLOGATION_AUDITOR, OR_FILTER, orClauses));\n      groups = [];\n    }\n\n    return {\n      filters: filtersClone,\n      groups: groups\n    };\n  };\n\n  const createCountHttpRequestBody = () => {\n    let filters = createFilters();\n    let httpRequestBody = createBaseHttpRequestBody();\n    httpRequestBody[GROUP_IDS_SSE] = filters.groups;\n    httpRequestBody[FILTERS] = filters.filters;\n    httpRequestBody[FISCAL_NOTIFICATION_TYPE] = NOTIFICATION_TYPE_ENUM.NOTIFICATION; // Por fins de otimização, esta tela precisa acessar uma view diferente.\n\n    if (isComandoFiscal()) {\n      httpRequestBody[ROLE] = ADMIN; //TODO retirar esta gambiarra. E tratar isso no back.\n    }\n\n    return httpRequestBody;\n  };\n\n  const createWarningsHttpRequestBody = () => {\n    let filters = createFilters();\n    let httpRequestBody = createQueryHttpRequestBody(filters.filters, []);\n    httpRequestBody[FISCAL_NOTIFICATION_TYPE] = NOTIFICATION_TYPE_ENUM.NOTIFICATION; // Por fins de otimização, esta tela precisa acessar uma view diferente.\n\n    httpRequestBody[QUERY][GROUP_IDS_SSE] = filters.groups;\n\n    if (isComandoFiscal()) {\n      httpRequestBody[ROLE] = ADMIN; //TODO retirar esta gambiarra. E tratar isso no back.\n    }\n\n    return httpRequestBody;\n  };\n\n  const openEditionModal = async function (notificationObj) {\n    let readonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    cleanInputs();\n    let historyData = await readWarningHistory(notificationObj.getId());\n    let warningHistoryText = mountWarningHistoryText(notificationObj.getRawData(), historyData);\n    setNotificationHistory(historyData);\n    setNotification(notificationObj.getRawData());\n    setFormData(mountEditionData(notificationObj, warningHistoryText));\n    setModalReadonlyMode(readonly);\n    toggleEditionModalOn();\n  };\n\n  const openMapModal = warning => {\n    setModalData({\n      warning: warning\n    });\n    toggleModalOn(MODAL_TYPE_ENUM.MAP);\n  };\n\n  const openHomologationModal = (mode, notificationObj, index, popHomologatedNotification) => {\n    let modalData = {\n      homologationType: mode,\n      notification_id: notificationObj.getId(),\n      raw_data: notificationObj.getRawData(),\n      index: index,\n      popHomologatedNotification: popHomologatedNotification\n    };\n    toggleModalOn(MODAL_TYPE_ENUM.HOMOLOGATION, modalData);\n  };\n\n  const openReactivationModal = warningConfigObj => {\n    let modalData = {\n      mode: REACTIVATION_MODE,\n      warningConfig: warningConfigObj\n    };\n    toggleModalOn(MODAL_TYPE_ENUM.WARNING_PAUSE, modalData);\n  };\n\n  const openSuspensionModal = warningConfigObj => {\n    let modalData = {\n      mode: SUSPENSION_MODE,\n      warningConfig: warningConfigObj\n    };\n    toggleModalOn(MODAL_TYPE_ENUM.WARNING_PAUSE, modalData);\n  };\n\n  const openPendingNotifications = () => {\n    fetchPendingNotification();\n    toggleModalOn(MODAL_TYPE_ENUM.PENDING_HOMOLOGATION, {});\n  };\n\n  const openClosingModal = warningConfigObj => {\n    let modalData = {\n      id_config: warningConfigObj.getIdConfig(),\n      config_name: warningConfigObj.getName(),\n      groups: warningConfigObj.getGroupsIds()\n    };\n    toggleModalOn(MODAL_TYPE_ENUM.CLOSING_WARNING, modalData);\n  };\n\n  const actionMethods = {\n    editionMethod: openEditionModal,\n    homologationMethod: openHomologationModal,\n    suspensionMethod: openSuspensionModal,\n    reactivationMethod: openReactivationModal,\n    warningClosingMethod: openClosingModal\n  };\n  const disabledMethods = {\n    isEditionButtonDisabled: isEditionButtonDisabled,\n    isPauseButtonDisabled: isPauseButtonDisabled\n  }; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const createMapModal = useMemo(() => /*#__PURE__*/_jsxDEV(SimpleMapModal, {\n    show: isModalActive,\n    googleMapLoaded: googleMapLoaded,\n    googleMapError: googleMapError,\n    toggle: toggleModalOff,\n    data: modalData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 40\n  }, this), [modalData]);\n\n  if (loading && wasReloaded) {\n    return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(CardBody, {\n            style: {\n              minHeight: '51em'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TagsInput, {\n              tagsState: [notificationTags, setNotificationTags],\n              setQuery: setNotificationFilters,\n              columns: TAGS_INPUT_FILTERS,\n              children: (isSubgerente() || isAdmin()) && /*#__PURE__*/_jsxDEV(Button, {\n                size: \"md\",\n                className: \"btn btn-primary\",\n                onClick: () => openPendingNotifications(),\n                style: {\n                  height: \"2.5rem\",\n                  width: \"16rem\",\n                  marginBottom: \"4px\",\n                  padding: \"0px\",\n                  justifySelf: \"center\"\n                },\n                children: \"Homologa\\xE7\\xE3o/Ci\\xEAncia Pendente\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              dataUrl: \"/warnings/read_all\",\n              countUrl: \"/warnings/count_warnings\",\n              timeout: 10000,\n              requestBody: createWarningsHttpRequestBody,\n              countRequestBody: createCountHttpRequestBody,\n              tags: notificationFilters,\n              fillData: true,\n              trProps: row => {\n                return {\n                  onDoubleClick: () => {\n                    openEditionModal(new Notification(row), true);\n                  },\n                  style: conditionalHomologationFormat(row, warningsViewed)\n                };\n              },\n              refresh: refreshFlag,\n              loading: [isLoading, setIsLoading],\n              columns: {\n                \"Nº Alerta\": {\n                  args: ID_CONFIG,\n                  thStyle: {\n                    textAlign: 'right'\n                  },\n                  tdStyle: {\n                    textAlign: 'right'\n                  }\n                },\n                \"Alerta\": {\n                  args: NAME,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center'\n                  }\n                },\n                \"Data/Hora\": {\n                  args: EVENT_CREATION_TIMESTAMP,\n                  tdStyle: {\n                    whiteSpace: 'pre',\n                    textAlign: 'center'\n                  },\n                  func: date => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\n                },\n                \"Local\": {\n                  args: EVENT_LOCAL,\n                  Func: props => /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"links-table\",\n                    onClick: () => {\n                      openMapModal(props.row_data);\n                    },\n                    children: props.data\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 21\n                  }, this)\n                },\n                \"Veículo/Modelo/Cor\": {\n                  args: [EVENT_VEHICLE_TYPE, EVENT_VEHICLE_MODEL, EVENT_VEHICLE_COLOUR],\n                  tdStyle: {\n                    whiteSpace: 'pre'\n                  },\n                  func: _ref => {\n                    let [vehicle, model, color] = _ref;\n                    return \"\".concat(vehicle, \"\\n\").concat(model, \"\\n\").concat(color);\n                  }\n                },\n                \"Placa\": EVENT_VEHICLE_PLATE,\n                \"Ação Fiscal\": {\n                  args: FISCAL_ACTION,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    whiteSpace: 'pre',\n                    textAlign: 'justify'\n                  },\n                  func: value => trimText(value)\n                },\n                \"Ação Realizada\": {\n                  args: FISCAL_ACTION_REPORT,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    whiteSpace: 'pre',\n                    textAlign: 'justify'\n                  },\n                  func: value => trimText(value)\n                },\n                \"Data/Hora da Ação Fiscal\": {\n                  args: FISCAL_ACTION_DATE,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    whiteSpace: 'pre',\n                    textAlign: 'center'\n                  },\n                  func: date => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\n                },\n                \"Responsável pelo Monitoramento\": {\n                  args: DESIGNATION_AUDITOR,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  func: value => toUpperCase(value)\n                },\n                \"Responsável pela Ação Fiscal\": {\n                  args: FISCAL_ACTION_AUDITORS,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  func: value => toUpperCase(value).replace(\",\", \", \")\n                },\n                \"Responsável pela Supervisão\": {\n                  args: SUPERVISION_AUDITOR,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  func: value => toUpperCase(treatNullValue(value, \"NA\"))\n                },\n                \"Responsável pela Homologação\": {\n                  args: HOMOLOGATION_AUDITOR,\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  func: value => toUpperCase(value)\n                },\n                \"Supervisão\": {\n                  args: [SUPERVISION_AUDITOR, SUPERVISION_DATE],\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  defaultValue: \"\",\n                  Func: _ref2 => {\n                    let {\n                      row_data\n                    } = _ref2;\n                    const notificationObj = new Notification(row_data);\n                    return notificationObj.getSupervisionStatusLabel();\n                  }\n                },\n                \"Ciência\": {\n                  args: [AWARENESS_AUDITOR, AWARENESS_DATE],\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  defaultValue: \"\",\n                  Func: _ref3 => {\n                    let {\n                      row_data\n                    } = _ref3;\n                    const notificationObj = new Notification(row_data);\n                    return notificationObj.getAwarenessStatusLabel();\n                  }\n                },\n                \"Situação\": {\n                  args: [ID],\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  tdStyle: {\n                    textAlign: 'center',\n                    whiteSpace: 'pre'\n                  },\n                  Func: _ref4 => {\n                    let {\n                      row_data\n                    } = _ref4;\n                    const notificationObj = new Notification(row_data);\n                    return notificationObj.getNotificationStatusLabel(warningsViewed);\n                  }\n                },\n                \"Ações\": {\n                  args: ID,\n                  tdStyle: {\n                    textAlign: 'center'\n                  },\n                  thStyle: {\n                    textAlign: 'center'\n                  },\n                  Func: _ref5 => {\n                    let {\n                      row_data,\n                      index\n                    } = _ref5;\n                    return /*#__PURE__*/_jsxDEV(NotificationActionButtons, {\n                      data: {\n                        notificationObj: new Notification(row_data),\n                        notificationIndex: index,\n                        raw_data: row_data\n                      },\n                      mode: {\n                        editionMode: true,\n                        popHomologatedNotificationEnabled: false\n                      },\n                      actionMethods: actionMethods,\n                      disabledMethods: disabledMethods\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 491,\n                      columnNumber: 50\n                    }, this);\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 7\n      }, this), isEditionModalActive && /*#__PURE__*/_jsxDEV(NotificationModal, {\n        show: isEditionModalActive,\n        toggle: toggleEditionModalOff,\n        data: formData,\n        refresh: refresh,\n        initialReadOnlyState: modalReadonlyMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 32\n      }, this), modalType === MODAL_TYPE_ENUM.MAP && createMapModal, modalType === MODAL_TYPE_ENUM.PENDING_HOMOLOGATION && /*#__PURE__*/_jsxDEV(NotificationPendingModal, {\n        fetchData: pendingNotificationFlag,\n        show: isModalActive,\n        toggle: toggleModalOff,\n        actionMethods: actionMethods,\n        disabledMethods: disabledMethods,\n        refresh: refresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 62\n      }, this), modalType === MODAL_TYPE_ENUM.WARNING_PAUSE && /*#__PURE__*/_jsxDEV(SuspensionModal, {\n        show: isModalActive,\n        toggle: toggleModalOff,\n        data: modalData,\n        setData: setModalData,\n        refresh: refresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 55\n      }, this), modalType === MODAL_TYPE_ENUM.CLOSING_WARNING && /*#__PURE__*/_jsxDEV(ClosingModal, {\n        show: isModalActive,\n        toggle: toggleModalOff,\n        data: modalData,\n        refresh: refresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 57\n      }, this), modalType === MODAL_TYPE_ENUM.HOMOLOGATION && /*#__PURE__*/_jsxDEV(HomologationModal, {\n        show: isModalActive,\n        toggle: toggleModalOff,\n        data: modalData,\n        toggleEditionModalOff: toggleEditionModalOff,\n        refresh: refresh\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 54\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Notifications, \"zhgoKDmM4o/7Iq89Eszg5jr05fk=\", false, function () {\n  return [useHistory, useModalWithData, useNotification, useToggle, useJsApiLoader, useAsync];\n});\n\n_c = Notifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/views/Notification/Notifications.js"],"names":["React","useMemo","Card","CardBody","Button","useHistory","env","Table","TagsInput","NotificationModal","HomologationModal","ClosingModal","MODAL_TYPE_ENUM","isAdmin","isSubgerente","useModalWithData","ViewsContext","NotificationPendingModal","createQueryHttpRequestBody","createOrderByClause","NOTIFICATION_TYPE_ENUM","createBaseHttpRequestBody","isComandoFiscal","cloneFilters","mountGroupsFilterClause","hasUserLoggedData","createSimpleFilterClause","getUserLogin","OR_FILTER","createCompositeFilterClause","WarningsUpdateContext","WarningsContext","AuditorsContext","GroupsContext","NavigationContext","isLoggedIn","NOTIFICATION_STATUS_ENUM","axios","axiosRetry","getTimeoutConfig","getRetryConfig","NotificationActionButtons","SimpleMapModal","Notification","useToggle","BLANK_FORM_DATA","conditionalHomologationFormat","mountWarningHistoryText","TAGS_INPUT_FILTERS","ID_CONFIG","NAME","FISCAL_ACTION","FISCAL_ACTION_REPORT","FISCAL_ACTION_DATE","DESIGNATION_AUDITOR","FISCAL_ACTION_AUDITORS","SUPERVISION_AUDITOR","HOMOLOGATION_AUDITOR","SUPERVISION_DATE","AWARENESS_AUDITOR","AWARENESS_DATE","ID","useJsApiLoader","EVENT_CREATION_TIMESTAMP","EVENT_VEHICLE_TYPE","EVENT_VEHICLE_MODEL","EVENT_VEHICLE_COLOUR","EVENT_VEHICLE_PLATE","EVENT_LOCAL","SuspensionModal","REACTIVATION_MODE","SUSPENSION_MODE","FISCAL_NOTIFICATION_TYPE","GROUP_IDS_SSE","FILTERS","ROLE","QUERY","ADMIN","useNotification","isEmpty","trimText","toUpperCase","treatNullValue","ID_NOTIFICATION","ID_LOG","INT","EQUAL","VARCHAR","ASC","setNotificationHistory","setNotification","useAsync","reloadVisibilityGroups","delay","LoadingPage","Notifications","history","refresh","refreshFlag","notificationFilters","setNotificationFilters","notificationTags","setNotificationTags","useContext","startWarningsViewedSSE","warningsViewed","startSSE","wasReloaded","setWasReloaded","auditorsData","getAuditorsData","getAuditorRegistry","groupsDataMap","fetchGroupsData","getMonitoringGroupOwner","getGroupOwnerData","getGroupSupervisorData","groupsSimpleMap","fetchGroupsName","setIsMap","modalData","setModalData","isModalActive","modalType","toggleModalOn","toggleModalOff","mountEditionData","pendingNotificationFlag","fetchPendingNotification","isEditionModalActive","setEditionModal","useState","toggleEditionModalOn","toggleEditionModalOff","cleanInputs","isLoading","setIsLoading","modalReadonlyMode","setModalReadonlyMode","formData","setFormData","axiosRetryProxy","create","isLoaded","googleMapLoaded","loadError","googleMapError","id","googleMapsApiKey","googleApiKey","loading","openPendingNotifications","useEffect","push","fiscal_action_auditors","fiscal_action_homologation_auditor","readWarningHistory","warningId","filters","httpRequestBody","res","post","apiAddress","data","error","console","log","isEditionButtonDisabled","warning","notAllowedStatus","HOMOLOGADA","SEM_COMANDO","SEM_COMANDO_HOMOLOGADA","includes","getStatus","isPauseButtonDisabled","criador","user","createFilters","filtersClone","groups","orClauses","createCountHttpRequestBody","NOTIFICATION","createWarningsHttpRequestBody","openEditionModal","notificationObj","readonly","historyData","getId","warningHistoryText","getRawData","openMapModal","MAP","openHomologationModal","mode","index","popHomologatedNotification","homologationType","notification_id","raw_data","HOMOLOGATION","openReactivationModal","warningConfigObj","warningConfig","WARNING_PAUSE","openSuspensionModal","PENDING_HOMOLOGATION","openClosingModal","id_config","getIdConfig","config_name","getName","getGroupsIds","CLOSING_WARNING","actionMethods","editionMethod","homologationMethod","suspensionMethod","reactivationMethod","warningClosingMethod","disabledMethods","createMapModal","minHeight","height","width","marginBottom","padding","justifySelf","row","onDoubleClick","style","args","thStyle","textAlign","tdStyle","whiteSpace","func","date","Date","toLocaleString","replace","Func","props","row_data","vehicle","model","color","value","defaultValue","getSupervisionStatusLabel","getAwarenessStatusLabel","getNotificationStatusLabel","notificationIndex","editionMode","popHomologatedNotificationEnabled"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,MAHF,QAIO,YAJP;AAKA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,iBAAP,MAA8B,uDAA9B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,qBAAtC;AAEA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,OAAOC,sBAAP,MAAmC,yCAAnC;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,wBAAT,QAAyC,kBAAzC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,2BAAT,QAA4C,kBAA5C;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,wBAAP,MAAqC,uCAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,yBAAT,QAA0C,4CAA1C;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,eAAT,EAA0BC,6BAA1B,EAAyDC,uBAAzD,QAAwF,qBAAxF;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,IAAT,QAAqB,4BAArB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,EAAT,QAAmB,2BAAnB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AACA,SAASC,iBAAT,QAAkC,mDAAlC;AACA,SAASC,eAAT,QAAgC,mDAAhC;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;;;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAEtC,QAAMC,OAAO,GAAG3F,UAAU,EAA1B;AACA,QAAM;AAAE4F,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA,mBAAxB;AAA6CC,IAAAA,sBAA7C;AAAqEC,IAAAA,gBAArE;AAAuFC,IAAAA;AAAvF,MAA8GtG,KAAK,CAACuG,UAAN,CAAiBvF,YAAjB,CAApH;AACA,QAAM;AAAEwF,IAAAA,sBAAF;AAA0BC,IAAAA;AAA1B,MAA6CzG,KAAK,CAACuG,UAAN,CAAiBzE,qBAAjB,CAAnD;AACA,QAAM;AAAE4E,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAA4C5G,KAAK,CAACuG,UAAN,CAAiBxE,eAAjB,CAAlD;AACA,QAAM;AAAE8E,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,MAAwD/G,KAAK,CAACuG,UAAN,CAAiBvE,eAAjB,CAA9D;AACA,QAAM;AAAEgF,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA,uBAAlC;AAA2DC,IAAAA,iBAA3D;AAA8EC,IAAAA,sBAA9E;AAAsGC,IAAAA,eAAtG;AAAuHC,IAAAA;AAAvH,MAA2ItH,KAAK,CAACuG,UAAN,CAAiBtE,aAAjB,CAAjJ;AACA,QAAM;AAAEsF,IAAAA;AAAF,MAAevH,KAAK,CAACuG,UAAN,CAAiBrE,iBAAjB,CAArB;AAGA,QAAM;AAACsF,IAAAA,SAAD;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,aAA1B;AAAyCC,IAAAA,SAAzC;AAAqDC,IAAAA,aAArD;AAAoEC,IAAAA;AAApE,MAAuF9G,gBAAgB,EAA7G;AACA,QAAM;AAAC+G,IAAAA;AAAD,MAAqBhD,eAAe,CAACiC,kBAAD,EAAqBG,uBAArB,EAA8CC,iBAA9C,EAAiEC,sBAAjE,CAA1C;AACA,QAAM,CAACW,uBAAD,EAA0BC,wBAA1B,IAAsDpF,SAAS,CAAC,KAAD,CAArE;AAEA,QAAM,CAACqF,oBAAD,EAAuBC,eAAvB,IAA0ClI,KAAK,CAACmI,QAAN,CAAe,KAAf,CAAhD;;AACA,QAAMC,oBAAoB,GAAG,MAAM;AAAEF,IAAAA,eAAe,CAAC,IAAD,CAAf;AAAsB,GAA3D;;AACA,QAAMG,qBAAqB,GAAG,MAAM;AAAEH,IAAAA,eAAe,CAAC,KAAD,CAAf;AAAwBI,IAAAA,WAAW;AAAG,GAA5E;;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BxI,KAAK,CAACmI,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4C1I,KAAK,CAACmI,QAAN,CAAe,IAAf,CAAlD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0B5I,KAAK,CAACmI,QAAN,CAAetF,eAAf,CAAhC,CArBsC,CAqB0B;;AAEhE,QAAMgG,eAAe,GAAGxG,KAAK,CAACyG,MAAN,CAAavG,gBAAgB,EAA7B,CAAxB;AACAD,EAAAA,UAAU,CAACuG,eAAD,EAAkBrG,cAAc,EAAhC,CAAV;AAEA,QAAM;AAAEuG,IAAAA,QAAQ,EAAEC,eAAZ;AAA6BC,IAAAA,SAAS,EAAGC;AAAzC,MAA4DpF,cAAc,CAAC;AAC/EqF,IAAAA,EAAE,EAAE,mBAD2E;AAE/EC,IAAAA,gBAAgB,EAAE9I,GAAG,CAAC+I;AAFyD,GAAD,CAAhF;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAc3D,QAAQ,CAAC,YAAY;AAEvC,QAAIgB,WAAW,IAAIxE,UAAU,EAA7B,EAAiC;AAC/BoF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACA3B,MAAAA,sBAAsB;;AAEtB,UAAIb,OAAO,CAACiC,aAAD,CAAX,EAA4B;AAC1B,cAAMC,eAAe,EAArB;AACD;;AAED,UAAIlC,OAAO,CAACsC,eAAD,CAAX,EAA8B;AAC5B,cAAMC,eAAe,EAArB;AACD;;AAED,UAAIvC,OAAO,CAAC8B,YAAD,CAAX,EAA2B;AACzB,cAAMC,eAAe,EAArB;AACD;;AAEDN,MAAAA,sBAAsB;AACtBE,MAAAA,QAAQ;;AAER,UAAIjF,iBAAiB,EAArB,EAAyB;AACvB8H,QAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD;;AAED,YAAM1D,KAAK,CAAC,IAAD,CAAX;AACAe,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GA5B2B,EA4BzB,CAACD,WAAD,CA5ByB,CAA5B;AA+BA3G,EAAAA,KAAK,CAACwJ,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACrH,UAAU,EAAf,EAAmB;AACjB6D,MAAAA,OAAO,CAACyD,IAAR,CAAa,QAAb;AACD,KAHmB,CAIpB;;AACD,GALD,EAKG,EALH;;AASA,QAAMnB,WAAW,GAAG,MAAM;AACxBM,IAAAA,WAAW,CAAC,EAAE,GAAG/F,eAAL;AAAsB6G,MAAAA,sBAAsB,EAAE,EAA9C;AAAkDC,MAAAA,kCAAkC,EAAE;AAAtF,KAAD,CAAX;AACD,GAFD;;AAKA,QAAMC,kBAAkB,GAAG,MAAOC,SAAP,IAAqB;AAE9C,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACL,IAAR,CAAa/H,wBAAwB,CAACyD,eAAD,EAAkBE,GAAlB,EAAuBC,KAAvB,EAA8BuE,SAA9B,CAArC;AAEA,QAAIE,eAAe,GAAG7I,0BAA0B,CAAC4I,OAAD,EAAU3I,mBAAmB,CAACiE,MAAD,EAASI,GAAT,CAA7B,CAAhD;;AAEA,QAAI;AACF,YAAMwE,GAAG,GAAG,MAAMnB,eAAe,CAACoB,IAAhB,WAAwB3J,GAAG,CAAC4J,UAA5B,qCAAwEH,eAAxE,CAAlB;AACA,aAAOC,GAAG,CAACG,IAAX;AAED,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACD;;AAED,WAAOL,eAAP;AACD,GAhBD;;AAoBA,QAAMQ,uBAAuB,GAAIC,OAAD,IAAa;AAE3C;AACA,QAAIC,gBAAgB,GAAG,CAACrI,wBAAwB,CAACsI,UAA1B,EAAsCtI,wBAAwB,CAACuI,WAA/D,EAA4EvI,wBAAwB,CAACwI,sBAArG,CAAvB;AACA,QAAIH,gBAAgB,CAACI,QAAjB,CAA0BL,OAAO,CAACM,SAAR,EAA1B,CAAJ,EACE,OAAO,IAAP;;AAEF,QAAIjK,OAAO,MAAMC,YAAY,EAA7B,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,WAAO,CAACW,iBAAiB,EAAzB;AAED,GAbD;;AAeA,QAAMsJ,qBAAqB,GAAIC,OAAD,IAAa;AACzC,QAAIC,IAAI,GAAGtJ,YAAY,EAAvB;;AAEA,QAAKsJ,IAAI,IAAID,OAAO,KAAKC,IAArB,IAA8BpK,OAAO,EAArC,IAA2CC,YAAY,EAA3D,EAA+D;AAC7D,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GARD;;AAWA,QAAMoK,aAAa,GAAG,MAAM;AAE1B,QAAIC,YAAY,GAAG5J,YAAY,CAAC4E,mBAAD,CAA/B;AAEA,QAAIiF,MAAM,GAAG5J,uBAAuB,CAAC2E,mBAAD,CAApC,CAJ0B,CAM1B;AACA;;AACA,QAAI1E,iBAAiB,MAAM0J,YAAvB,IAAuC7J,eAAe,EAA1D,EAA8D;AAC5D6J,MAAAA,YAAY,CAAC1B,IAAb,CAAkB/H,wBAAwB,CAAC6B,sBAAD,EAAyBgC,OAAzB,EAAkCD,KAAlC,EAAyC,MAAM3D,YAAY,EAAlB,GAAuB,GAAhE,CAA1C;AACAyJ,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,QAAI3J,iBAAiB,MAAMX,YAAY,EAAvC,EAA2C;AACzC,UAAIuK,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,CAAC5B,IAAV,CAAe/H,wBAAwB,CAAC+B,oBAAD,EAAuB8B,OAAvB,EAAgCD,KAAhC,EAAuC,MAAM3D,YAAY,EAAlB,GAAuB,GAA9D,CAAvC;AACA0J,MAAAA,SAAS,CAAC5B,IAAV,CAAe/H,wBAAwB,CAACiC,iBAAD,EAAoB4B,OAApB,EAA6BD,KAA7B,EAAoC,MAAM3D,YAAY,EAAlB,GAAuB,GAA3D,CAAvC;AACA0J,MAAAA,SAAS,CAAC5B,IAAV,CAAe/H,wBAAwB,CAAC8B,mBAAD,EAAsB+B,OAAtB,EAA+BD,KAA/B,EAAsC,MAAM3D,YAAY,EAAlB,GAAuB,GAA7D,CAAvC;AAEAwJ,MAAAA,YAAY,CAAC1B,IAAb,CAAkB5H,2BAA2B,CAAC4B,oBAAD,EAAuB7B,SAAvB,EAAkCyJ,SAAlC,CAA7C;AACAD,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,WAAO;AAACtB,MAAAA,OAAO,EAAEqB,YAAV;AAAwBC,MAAAA,MAAM,EAAEA;AAAhC,KAAP;AAED,GAzBD;;AA4BA,QAAME,0BAA0B,GAAG,MAAM;AAEvC,QAAIxB,OAAO,GAAGoB,aAAa,EAA3B;AAEA,QAAInB,eAAe,GAAG1I,yBAAyB,EAA/C;AAEA0I,IAAAA,eAAe,CAACtF,aAAD,CAAf,GAAiCqF,OAAO,CAACsB,MAAzC;AACArB,IAAAA,eAAe,CAACrF,OAAD,CAAf,GAA2BoF,OAAO,CAACA,OAAnC;AACAC,IAAAA,eAAe,CAACvF,wBAAD,CAAf,GAA4CpD,sBAAsB,CAACmK,YAAnE,CARuC,CAQyC;;AAEhF,QAAIjK,eAAe,EAAnB,EAAuB;AACrByI,MAAAA,eAAe,CAACpF,IAAD,CAAf,GAAwBE,KAAxB,CADqB,CACS;AAC/B;;AAED,WAAOkF,eAAP;AACD,GAfD;;AAiBA,QAAMyB,6BAA6B,GAAG,MAAM;AAE1C,QAAI1B,OAAO,GAAGoB,aAAa,EAA3B;AAEA,QAAInB,eAAe,GAAG7I,0BAA0B,CAAC4I,OAAO,CAACA,OAAT,EAAkB,EAAlB,CAAhD;AAEAC,IAAAA,eAAe,CAACvF,wBAAD,CAAf,GAA4CpD,sBAAsB,CAACmK,YAAnE,CAN0C,CAMsC;;AAChFxB,IAAAA,eAAe,CAACnF,KAAD,CAAf,CAAuBH,aAAvB,IAAwCqF,OAAO,CAACsB,MAAhD;;AAEA,QAAI9J,eAAe,EAAnB,EAAuB;AACrByI,MAAAA,eAAe,CAACpF,IAAD,CAAf,GAAwBE,KAAxB,CADqB,CACS;AAC/B;;AAED,WAAOkF,eAAP;AACD,GAdD;;AAgBA,QAAM0B,gBAAgB,GAAG,gBAAOC,eAAP,EAA4C;AAAA,QAApBC,QAAoB,uEAAT,IAAS;AAEnErD,IAAAA,WAAW;AAEX,QAAIsD,WAAW,GAAG,MAAMhC,kBAAkB,CAAC8B,eAAe,CAACG,KAAhB,EAAD,CAA1C;AACA,QAAIC,kBAAkB,GAAG/I,uBAAuB,CAAC2I,eAAe,CAACK,UAAhB,EAAD,EAA+BH,WAA/B,CAAhD;AAEAnG,IAAAA,sBAAsB,CAACmG,WAAD,CAAtB;AACAlG,IAAAA,eAAe,CAACgG,eAAe,CAACK,UAAhB,EAAD,CAAf;AAEAnD,IAAAA,WAAW,CAACd,gBAAgB,CAAC4D,eAAD,EAAkBI,kBAAlB,CAAjB,CAAX;AAEApD,IAAAA,oBAAoB,CAACiD,QAAD,CAApB;AAEAvD,IAAAA,oBAAoB;AACrB,GAfD;;AAiBA,QAAM4D,YAAY,GAAIxB,OAAD,IAAa;AAChC/C,IAAAA,YAAY,CAAC;AAAE+C,MAAAA,OAAO,EAAEA;AAAX,KAAD,CAAZ;AACA5C,IAAAA,aAAa,CAAChH,eAAe,CAACqL,GAAjB,CAAb;AACD,GAHD;;AAKA,QAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOT,eAAP,EAAwBU,KAAxB,EAA+BC,0BAA/B,KAA8D;AAC1F,QAAI7E,SAAS,GAAG;AAAE8E,MAAAA,gBAAgB,EAAEH,IAApB;AAA0BI,MAAAA,eAAe,EAAEb,eAAe,CAACG,KAAhB,EAA3C;AAAoEW,MAAAA,QAAQ,EAAEd,eAAe,CAACK,UAAhB,EAA9E;AAA4GK,MAAAA,KAAK,EAACA,KAAlH;AAAyHC,MAAAA,0BAA0B,EAAEA;AAArJ,KAAhB;AACAzE,IAAAA,aAAa,CAAChH,eAAe,CAAC6L,YAAjB,EAA+BjF,SAA/B,CAAb;AACD,GAHD;;AAKA,QAAMkF,qBAAqB,GAAIC,gBAAD,IAAsB;AAClD,QAAInF,SAAS,GAAG;AAAC2E,MAAAA,IAAI,EAAG7H,iBAAR;AAA2BsI,MAAAA,aAAa,EAAED;AAA1C,KAAhB;AACA/E,IAAAA,aAAa,CAAChH,eAAe,CAACiM,aAAjB,EAAgCrF,SAAhC,CAAb;AACD,GAHD;;AAKA,QAAMsF,mBAAmB,GAAIH,gBAAD,IAAsB;AAChD,QAAInF,SAAS,GAAG;AAAC2E,MAAAA,IAAI,EAAG5H,eAAR;AAAyBqI,MAAAA,aAAa,EAAED;AAAxC,KAAhB;AACA/E,IAAAA,aAAa,CAAChH,eAAe,CAACiM,aAAjB,EAAgCrF,SAAhC,CAAb;AACD,GAHD;;AAKA,QAAM+B,wBAAwB,GAAI,MAAM;AACtCvB,IAAAA,wBAAwB;AACxBJ,IAAAA,aAAa,CAAChH,eAAe,CAACmM,oBAAjB,EAAuC,EAAvC,CAAb;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAIL,gBAAD,IAAsB;AAC7C,QAAInF,SAAS,GAAI;AAAEyF,MAAAA,SAAS,EAAEN,gBAAgB,CAACO,WAAjB,EAAb;AAA6CC,MAAAA,WAAW,EAAER,gBAAgB,CAACS,OAAjB,EAA1D;AAAsFhC,MAAAA,MAAM,EAAEuB,gBAAgB,CAACU,YAAjB;AAA9F,KAAjB;AACAzF,IAAAA,aAAa,CAAChH,eAAe,CAAC0M,eAAjB,EAAkC9F,SAAlC,CAAb;AACD,GAHD;;AAKA,QAAM+F,aAAa,GAAG;AACpBC,IAAAA,aAAa,EAAG/B,gBADI;AAEpBgC,IAAAA,kBAAkB,EAAGvB,qBAFD;AAGpBwB,IAAAA,gBAAgB,EAAGZ,mBAHC;AAIpBa,IAAAA,kBAAkB,EAAGjB,qBAJD;AAKpBkB,IAAAA,oBAAoB,EAAGZ;AALH,GAAtB;AAQA,QAAMa,eAAe,GAAG;AACtBtD,IAAAA,uBAAuB,EAAGA,uBADJ;AAEtBQ,IAAAA,qBAAqB,EAAGA;AAFF,GAAxB,CA/OsC,CAoPtC;;AACA,QAAM+C,cAAc,GAAG7N,OAAO,CAAC,mBAAM,QAAC,cAAD;AAAgB,IAAA,IAAI,EAAEyH,aAAtB;AAAsC,IAAA,eAAe,EAAEsB,eAAvD;AAAwE,IAAA,cAAc,EAAEE,cAAxF;AAAwG,IAAA,MAAM,EAAErB,cAAhH;AAAgI,IAAA,IAAI,EAAEL;AAAtI;AAAA;AAAA;AAAA;AAAA,UAAP,EAA4J,CAACA,SAAD,CAA5J,CAA9B;;AAEA,MAAI8B,OAAO,IAAI3C,WAAf,EAA4B;AAC1B,wBAAO,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACP,wBACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,KAAK,EAAE;AAAEoH,cAAAA,SAAS,EAAE;AAAb,aAAjB;AAAA,oCAEE,QAAC,SAAD;AACE,cAAA,SAAS,EAAE,CAAC1H,gBAAD,EAAmBC,mBAAnB,CADb;AAEE,cAAA,QAAQ,EAAEF,sBAFZ;AAGE,cAAA,OAAO,EAAEpD,kBAHX;AAAA,wBAKG,CAAClC,YAAY,MAAMD,OAAO,EAA1B,kBACC,QAAC,MAAD;AACE,gBAAA,IAAI,EAAC,IADP;AAEE,gBAAA,SAAS,EAAC,iBAFZ;AAGE,gBAAA,OAAO,EAAE,MAAM0I,wBAAwB,EAHzC;AAIE,gBAAA,KAAK,EAAE;AAAEyE,kBAAAA,MAAM,EAAE,QAAV;AAAoBC,kBAAAA,KAAK,EAAE,OAA3B;AAAoCC,kBAAAA,YAAY,EAAE,KAAlD;AAAyDC,kBAAAA,OAAO,EAAE,KAAlE;AAAyEC,kBAAAA,WAAW,EAAE;AAAtF,iBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,oBAFF,eAkBE,QAAC,KAAD;AACE,cAAA,OAAO,EAAC,oBADV;AAEE,cAAA,QAAQ,EAAC,0BAFX;AAGE,cAAA,OAAO,EAAE,KAHX;AAIE,cAAA,WAAW,EAAE5C,6BAJf;AAKE,cAAA,gBAAgB,EAAEF,0BALpB;AAME,cAAA,IAAI,EAAEnF,mBANR;AAOE,cAAA,QAAQ,MAPV;AAQE,cAAA,OAAO,EAAEkI,GAAG,IAAI;AAAE,uBAAO;AAAEC,kBAAAA,aAAa,EAAE,MAAM;AAAE7C,oBAAAA,gBAAgB,CAAC,IAAI9I,YAAJ,CAAiB0L,GAAjB,CAAD,EAAwB,IAAxB,CAAhB;AAAgD,mBAAzE;AAA2EE,kBAAAA,KAAK,EAAEzL,6BAA6B,CAACuL,GAAD,EAAM5H,cAAN;AAA/G,iBAAP;AAA+I,eARnK;AASE,cAAA,OAAO,EAAEP,WATX;AAUE,cAAA,OAAO,EAAE,CAACqC,SAAD,EAAYC,YAAZ,CAVX;AAWE,cAAA,OAAO,EAAE;AACP,6BAAa;AACXgG,kBAAAA,IAAI,EAAEvL,SADK;AAEXwL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFE;AAGXC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE;AAAb;AAHE,iBADN;AAMP,0BAAU;AACRF,kBAAAA,IAAI,EAAEtL,IADE;AAERuL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFD;AAGRC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE;AAAb;AAHD,iBANH;AAWP,6BAAa;AACXF,kBAAAA,IAAI,EAAEzK,wBADK;AAEX4K,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,UAAU,EAAE,KAAd;AAAqBF,oBAAAA,SAAS,EAAE;AAAhC,mBAFE;AAGXG,kBAAAA,IAAI,EAAGC,IAAD,IAAU,IAAIC,IAAJ,CAASD,IAAT,EAAeE,cAAf,CAA8B,OAA9B,EAAuCC,OAAvC,CAA+C,IAA/C,EAAqD,IAArD;AAHL,iBAXN;AAgBP,yBAAS;AACPT,kBAAAA,IAAI,EAAEpK,WADC;AAEP8K,kBAAAA,IAAI,EAAGC,KAAD,iBACJ;AACE,oBAAA,SAAS,EAAC,aADZ;AAEE,oBAAA,OAAO,EAAE,MAAM;AAAEnD,sBAAAA,YAAY,CAACmD,KAAK,CAACC,QAAP,CAAZ;AAA+B,qBAFlD;AAAA,8BAIGD,KAAK,CAAChF;AAJT;AAAA;AAAA;AAAA;AAAA;AAHK,iBAhBF;AA2BP,sCAAsB;AACpBqE,kBAAAA,IAAI,EAAE,CAACxK,kBAAD,EAAqBC,mBAArB,EAA0CC,oBAA1C,CADc;AAEpByK,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,UAAU,EAAE;AAAd,mBAFW;AAGpBC,kBAAAA,IAAI,EAAE;AAAA,wBAAC,CAACQ,OAAD,EAAUC,KAAV,EAAiBC,KAAjB,CAAD;AAAA,qCAAgCF,OAAhC,eAA4CC,KAA5C,eAAsDC,KAAtD;AAAA;AAHc,iBA3Bf;AAgCP,yBAASpL,mBAhCF;AAiCP,+BAAe;AACbqK,kBAAAA,IAAI,EAAErL,aADO;AAEbsL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFI;AAGbC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,UAAU,EAAE,KAAd;AAAqBF,oBAAAA,SAAS,EAAE;AAAhC,mBAHI;AAIbG,kBAAAA,IAAI,EAAGW,KAAD,IAAWxK,QAAQ,CAACwK,KAAD;AAJZ,iBAjCR;AAuCP,kCAAkB;AAChBhB,kBAAAA,IAAI,EAAEpL,oBADU;AAEhBqL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFO;AAGhBC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,UAAU,EAAE,KAAd;AAAqBF,oBAAAA,SAAS,EAAE;AAAhC,mBAHO;AAIhBG,kBAAAA,IAAI,EAAGW,KAAD,IAAWxK,QAAQ,CAACwK,KAAD;AAJT,iBAvCX;AA6CP,4CAA4B;AAC1BhB,kBAAAA,IAAI,EAAEnL,kBADoB;AAE1BoL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFiB;AAG1BC,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,UAAU,EAAE,KAAd;AAAqBF,oBAAAA,SAAS,EAAE;AAAhC,mBAHiB;AAI1BG,kBAAAA,IAAI,EAAGC,IAAD,IAAU,IAAIC,IAAJ,CAASD,IAAT,EAAeE,cAAf,CAA8B,OAA9B,EAAuCC,OAAvC,CAA+C,IAA/C,EAAqD,IAArD;AAJU,iBA7CrB;AAmDP,kDAAkC;AAChCT,kBAAAA,IAAI,EAAElL,mBAD0B;AAEhCmL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFuB;AAGhCC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHuB;AAIhCC,kBAAAA,IAAI,EAAGW,KAAD,IAAWvK,WAAW,CAACuK,KAAD;AAJI,iBAnD3B;AAyDP,gDAAgC;AAC9BhB,kBAAAA,IAAI,EAAEjL,sBADwB;AAE9BkL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFqB;AAG9BC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHqB;AAI9BC,kBAAAA,IAAI,EAAGW,KAAD,IAAWvK,WAAW,CAACuK,KAAD,CAAX,CAAmBP,OAAnB,CAA2B,GAA3B,EAAgC,IAAhC;AAJa,iBAzDzB;AA+DP,+CAA+B;AAC7BT,kBAAAA,IAAI,EAAEhL,mBADuB;AAE7BiL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFoB;AAG7BC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHoB;AAI7BC,kBAAAA,IAAI,EAAGW,KAAD,IAAWvK,WAAW,CAACC,cAAc,CAACsK,KAAD,EAAQ,IAAR,CAAf;AAJC,iBA/DxB;AAqEP,gDAAgC;AAC9BhB,kBAAAA,IAAI,EAAE/K,oBADwB;AAE9BgL,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFqB;AAG9BC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHqB;AAI9BC,kBAAAA,IAAI,EAAGW,KAAD,IAAWvK,WAAW,CAACuK,KAAD;AAJE,iBArEzB;AA2EP,8BAAc;AACZhB,kBAAAA,IAAI,EAAE,CAAChL,mBAAD,EAAsBE,gBAAtB,CADM;AAEZ+K,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFG;AAGZC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHG;AAIZa,kBAAAA,YAAY,EAAE,EAJF;AAKZP,kBAAAA,IAAI,EAAE,SAAiB;AAAA,wBAAhB;AAAEE,sBAAAA;AAAF,qBAAgB;AACrB,0BAAM1D,eAAe,GAAG,IAAI/I,YAAJ,CAAiByM,QAAjB,CAAxB;AACA,2BAAO1D,eAAe,CAACgE,yBAAhB,EAAP;AACD;AARW,iBA3EP;AAqFP,2BAAW;AACTlB,kBAAAA,IAAI,EAAE,CAAC7K,iBAAD,EAAoBC,cAApB,CADG;AAET6K,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFA;AAGTC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHA;AAITa,kBAAAA,YAAY,EAAE,EAJL;AAKTP,kBAAAA,IAAI,EAAE,SAAiB;AAAA,wBAAhB;AAAEE,sBAAAA;AAAF,qBAAgB;AACrB,0BAAM1D,eAAe,GAAG,IAAI/I,YAAJ,CAAiByM,QAAjB,CAAxB;AACA,2BAAO1D,eAAe,CAACiE,uBAAhB,EAAP;AACD;AARQ,iBArFJ;AAgGP,4BAAY;AACVnB,kBAAAA,IAAI,EAAE,CAAC3K,EAAD,CADI;AAEV4K,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAFC;AAGVC,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE,QAAb;AAAuBE,oBAAAA,UAAU,EAAE;AAAnC,mBAHC;AAIVM,kBAAAA,IAAI,EAAE,SAAiB;AAAA,wBAAhB;AAAEE,sBAAAA;AAAF,qBAAgB;AACrB,0BAAM1D,eAAe,GAAG,IAAI/I,YAAJ,CAAiByM,QAAjB,CAAxB;AACA,2BAAO1D,eAAe,CAACkE,0BAAhB,CAA2CnJ,cAA3C,CAAP;AACD;AAPS,iBAhGL;AAyGP,yBAAS;AACP+H,kBAAAA,IAAI,EAAE3K,EADC;AAEP8K,kBAAAA,OAAO,EAAE;AAAED,oBAAAA,SAAS,EAAE;AAAb,mBAFF;AAGPD,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb,mBAHF;AAIPQ,kBAAAA,IAAI,EAAE;AAAA,wBAAC;AAAEE,sBAAAA,QAAF;AAAYhD,sBAAAA;AAAZ,qBAAD;AAAA,wCAAyB,QAAC,yBAAD;AAC3B,sBAAA,IAAI,EAAE;AACJV,wBAAAA,eAAe,EAAG,IAAI/I,YAAJ,CAAiByM,QAAjB,CADd;AAEJS,wBAAAA,iBAAiB,EAAGzD,KAFhB;AAGJI,wBAAAA,QAAQ,EAAG4C;AAHP,uBADqB;AAM3B,sBAAA,IAAI,EAAG;AACLU,wBAAAA,WAAW,EAAG,IADT;AAELC,wBAAAA,iCAAiC,EAAG;AAF/B,uBANoB;AAU3B,sBAAA,aAAa,EAAExC,aAVY;AAUG,sBAAA,eAAe,EAAEM;AAVpB;AAAA;AAAA;AAAA;AAAA,4BAAzB;AAAA;AAJC;AAzGF;AAXX;AAAA;AAAA;AAAA;AAAA,oBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAkKG5F,oBAAoB,iBAAI,QAAC,iBAAD;AAAmB,QAAA,IAAI,EAAEA,oBAAzB;AAA+C,QAAA,MAAM,EAAEI,qBAAvD;AAA8E,QAAA,IAAI,EAAEM,QAApF;AAA+F,QAAA,OAAO,EAAE1C,OAAxG;AAAiH,QAAA,oBAAoB,EAAEwC;AAAvI;AAAA;AAAA;AAAA;AAAA,cAlK3B,EAmKGd,SAAS,KAAK/G,eAAe,CAACqL,GAA9B,IAAqC6B,cAnKxC,EAoKGnG,SAAS,KAAK/G,eAAe,CAACmM,oBAA9B,iBAAsD,QAAC,wBAAD;AAA2B,QAAA,SAAS,EAAEhF,uBAAtC;AAA+D,QAAA,IAAI,EAAEL,aAArE;AAAoF,QAAA,MAAM,EAAEG,cAA5F;AAA4G,QAAA,aAAa,EAAE0F,aAA3H;AAA0I,QAAA,eAAe,EAAEM,eAA3J;AAA4K,QAAA,OAAO,EAAE5H;AAArL;AAAA;AAAA;AAAA;AAAA,cApKzD,EAqKG0B,SAAS,KAAK/G,eAAe,CAACiM,aAA9B,iBAA+C,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnF,aAAvB;AAAsC,QAAA,MAAM,EAAEG,cAA9C;AAA8D,QAAA,IAAI,EAAEL,SAApE;AAA+E,QAAA,OAAO,EAAEC,YAAxF;AAAsG,QAAA,OAAO,EAAExB;AAA/G;AAAA;AAAA;AAAA;AAAA,cArKlD,EAsKG0B,SAAS,KAAK/G,eAAe,CAAC0M,eAA9B,iBAAiD,QAAC,YAAD;AAAc,QAAA,IAAI,EAAE5F,aAApB;AAAmC,QAAA,MAAM,EAAEG,cAA3C;AAA2D,QAAA,IAAI,EAAEL,SAAjE;AAA4E,QAAA,OAAO,EAAEvB;AAArF;AAAA;AAAA;AAAA;AAAA,cAtKpD,EAuKG0B,SAAS,KAAK/G,eAAe,CAAC6L,YAA9B,iBAA8C,QAAC,iBAAD;AAAmB,QAAA,IAAI,EAAE/E,aAAzB;AAAwC,QAAA,MAAM,EAAEG,cAAhD;AAAgE,QAAA,IAAI,EAAEL,SAAtE;AAAiF,QAAA,qBAAqB,EAAEa,qBAAxG;AAA+H,QAAA,OAAO,EAAEpC;AAAxI;AAAA;AAAA;AAAA;AAAA,cAvKjD;AAAA,oBADF;AA0KE;AACH;;GArauBF,a;UAEN1F,U,EAS6EU,gB,EAClE+D,e,EACiClC,S,EAaMkB,c,EAM9C6B,Q;;;KAhCEI,a","sourcesContent":["import React, { useMemo } from 'react';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n} from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport env from 'common/enviroment';\r\n\r\nimport Table from \"components/tables/Table\";\r\nimport TagsInput from 'components/tags/TagsInput';\r\nimport NotificationModal from 'components/modals/NotificationModal/NotificationModal';\r\nimport HomologationModal from 'components/modals/HomologationModal';\r\nimport ClosingModal from 'components/modals/WarningClosingModal';\r\n\r\nimport MODAL_TYPE_ENUM from 'common/enumerators/ModalTypeEnum';\r\nimport { isAdmin, isSubgerente } from 'common/SessionUtils';\r\n\r\nimport { useModalWithData } from 'common/hooks/useModalWithData';\r\nimport { ViewsContext } from 'context/ViewsContext';\r\nimport NotificationPendingModal from 'components/modals/NotificationPendingModal';\r\nimport { createQueryHttpRequestBody } from 'axios/AxiosUtils';\r\nimport { createOrderByClause } from 'axios/AxiosUtils';\r\nimport NOTIFICATION_TYPE_ENUM from 'common/enumerators/NotificationTypeEnum';\r\nimport { createBaseHttpRequestBody } from 'axios/AxiosUtils';\r\nimport { isComandoFiscal } from 'common/SessionUtils';\r\nimport { cloneFilters } from 'axios/AxiosUtils';\r\nimport { mountGroupsFilterClause } from 'axios/AxiosUtils';\r\nimport { hasUserLoggedData } from 'common/SessionUtils';\r\nimport { createSimpleFilterClause } from 'axios/AxiosUtils';\r\nimport { getUserLogin } from 'common/SessionUtils';\r\nimport { OR_FILTER } from 'axios/AxiosUtils';\r\nimport { createCompositeFilterClause } from 'axios/AxiosUtils';\r\nimport { WarningsUpdateContext } from 'context/WarningsUpdateContext';\r\nimport { WarningsContext } from 'context/WarningsContext';\r\nimport { AuditorsContext } from 'context/AuditorsContext';\r\nimport { GroupsContext } from 'context/GroupsContext';\r\nimport { NavigationContext } from 'context/NavigationContext';\r\nimport { isLoggedIn } from 'common/SessionUtils';\r\nimport NOTIFICATION_STATUS_ENUM from 'common/enumerators/NotificationStatus';\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { getTimeoutConfig } from \"axios/AxiosUtils\";\r\nimport { getRetryConfig } from \"axios/AxiosUtils\";\r\nimport { NotificationActionButtons } from 'components/buttons/NoficationActionButtons';\r\nimport SimpleMapModal from 'components/modals/SimpleMapModal';\r\nimport { Notification } from 'common/model/Notification';\r\nimport useToggle from 'common/hooks/useToogle';\r\nimport { BLANK_FORM_DATA, conditionalHomologationFormat, mountWarningHistoryText } from './utils/format-data';\r\nimport { TAGS_INPUT_FILTERS } from './utils/filters';\r\nimport { ID_CONFIG } from 'common/model/WarningConfig';\r\nimport { NAME } from 'common/model/WarningConfig';\r\nimport { FISCAL_ACTION } from 'common/model/WarningConfig';\r\nimport { FISCAL_ACTION_REPORT } from 'common/model/Notification';\r\nimport { FISCAL_ACTION_DATE } from 'common/model/Notification';\r\nimport { DESIGNATION_AUDITOR } from 'common/model/Notification';\r\nimport { FISCAL_ACTION_AUDITORS } from 'common/model/Notification';\r\nimport { SUPERVISION_AUDITOR } from 'common/model/Notification';\r\nimport { HOMOLOGATION_AUDITOR } from 'common/model/Notification';\r\nimport { SUPERVISION_DATE } from 'common/model/Notification';\r\nimport { AWARENESS_AUDITOR } from 'common/model/Notification';\r\nimport { AWARENESS_DATE } from 'common/model/Notification';\r\nimport { ID } from 'common/model/Notification';\r\nimport { useJsApiLoader } from '@react-google-maps/api';\r\nimport { EVENT_CREATION_TIMESTAMP } from 'common/model/Event';\r\nimport { EVENT_VEHICLE_TYPE } from 'common/model/Event';\r\nimport { EVENT_VEHICLE_MODEL } from 'common/model/Event';\r\nimport { EVENT_VEHICLE_COLOUR } from 'common/model/Event';\r\nimport { EVENT_VEHICLE_PLATE } from 'common/model/Event';\r\nimport { EVENT_LOCAL } from 'common/model/Event';\r\nimport SuspensionModal from 'components/modals/SuspensionModal/SuspensionModal';\r\nimport { REACTIVATION_MODE } from 'components/modals/SuspensionModal/SuspensionModal';\r\nimport { SUSPENSION_MODE } from 'components/modals/SuspensionModal/SuspensionModal';\r\nimport { FISCAL_NOTIFICATION_TYPE } from 'common/model/Notification';\r\nimport { GROUP_IDS_SSE } from 'common/model/WarningConfig';\r\nimport { FILTERS } from 'axios/AxiosUtils';\r\nimport { ROLE } from 'axios/AxiosUtils';\r\nimport { QUERY } from 'axios/AxiosUtils';\r\nimport { ADMIN } from 'common/SessionUtils';\r\nimport useNotification from 'common/hooks/useNotification';\r\nimport { isEmpty } from 'common/utils/collections';\r\nimport { trimText } from 'common/utils/forms';\r\nimport { toUpperCase } from 'common/utils/validate';\r\nimport { treatNullValue } from 'common/utils/collections';\r\nimport { ID_NOTIFICATION } from 'common/model/Notification';\r\nimport { ID_LOG } from 'common/model/Notification';\r\nimport { INT } from 'axios/AxiosUtils';\r\nimport { EQUAL } from 'axios/AxiosUtils';\r\nimport { VARCHAR } from 'axios/AxiosUtils';\r\nimport { ASC } from 'axios/AxiosUtils';\r\nimport { setNotificationHistory } from 'common/SessionUtils';\r\nimport { setNotification } from 'common/SessionUtils';\r\nimport useAsync from 'common/hooks/useAsync';\r\nimport { reloadVisibilityGroups } from 'common/SessionUtils';\r\nimport { delay } from 'common/utils/forms';\r\nimport LoadingPage from 'layouts/Loading';\r\n\r\nexport default function Notifications() {\r\n\r\n  const history = useHistory()\r\n  const { refresh, refreshFlag, notificationFilters, setNotificationFilters, notificationTags, setNotificationTags} = React.useContext(ViewsContext)\r\n  const { startWarningsViewedSSE, warningsViewed } = React.useContext(WarningsUpdateContext)\r\n  const { startSSE, wasReloaded, setWasReloaded } = React.useContext(WarningsContext);\r\n  const { auditorsData, getAuditorsData, getAuditorRegistry } = React.useContext(AuditorsContext);\r\n  const { groupsDataMap, fetchGroupsData, getMonitoringGroupOwner, getGroupOwnerData, getGroupSupervisorData, groupsSimpleMap, fetchGroupsName } = React.useContext(GroupsContext);\r\n  const { setIsMap } = React.useContext(NavigationContext);\r\n\r\n\r\n  const {modalData, setModalData, isModalActive, modalType,  toggleModalOn, toggleModalOff } = useModalWithData()\r\n  const {mountEditionData} = useNotification(getAuditorRegistry, getMonitoringGroupOwner, getGroupOwnerData, getGroupSupervisorData) \r\n  const [pendingNotificationFlag, fetchPendingNotification] = useToggle(false)\r\n\r\n  const [isEditionModalActive, setEditionModal] = React.useState(false);\r\n  const toggleEditionModalOn = () => { setEditionModal(true)}\r\n  const toggleEditionModalOff = () => { setEditionModal(false); cleanInputs()}\r\n\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const [modalReadonlyMode, setModalReadonlyMode] = React.useState(true);\r\n  const [formData, setFormData] = React.useState(BLANK_FORM_DATA) // Hook para guardar dados antigos de um grupo, para impedir que a atualização de um grupo que não possui modificação\r\n\r\n  const axiosRetryProxy = axios.create(getTimeoutConfig())\r\n  axiosRetry(axiosRetryProxy, getRetryConfig())\r\n\r\n  const { isLoaded: googleMapLoaded, loadError : googleMapError } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: env.googleApiKey\r\n  })\r\n\r\n\r\n  const { loading } = useAsync(async () => {\r\n\r\n    if (wasReloaded && isLoggedIn()) {\r\n      setIsMap(false);\r\n      reloadVisibilityGroups()\r\n\r\n      if (isEmpty(groupsDataMap)) {\r\n        await fetchGroupsData()\r\n      }\r\n\r\n      if (isEmpty(groupsSimpleMap)) {\r\n        await fetchGroupsName()\r\n      }\r\n\r\n      if (isEmpty(auditorsData)) {\r\n        await getAuditorsData();\r\n      }\r\n\r\n      startWarningsViewedSSE()\r\n      startSSE()\r\n\r\n      if (hasUserLoggedData()) {\r\n        openPendingNotifications(false);\r\n      }\r\n\r\n      await delay(2000);\r\n      setWasReloaded(false)\r\n    }\r\n  }, [wasReloaded]);\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (!isLoggedIn()) {\r\n      history.push('/login')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n\r\n\r\n  const cleanInputs = () => {\r\n    setFormData({ ...BLANK_FORM_DATA, fiscal_action_auditors: {}, fiscal_action_homologation_auditor: \"\" })\r\n  }\r\n\r\n\r\n  const readWarningHistory = async (warningId) => {\r\n\r\n    let filters = []\r\n    filters.push(createSimpleFilterClause(ID_NOTIFICATION, INT, EQUAL, warningId));\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters, createOrderByClause(ID_LOG, ASC))\r\n\r\n    try {\r\n      const res = await axiosRetryProxy.post(`${env.apiAddress}/warnings/read_warning_history`, httpRequestBody)\r\n      return res.data\r\n\r\n    } catch (error) {\r\n      console.log(\"XXX\", error)\r\n    }\r\n\r\n    return httpRequestBody\r\n  }\r\n\r\n\r\n\r\n  const isEditionButtonDisabled = (warning) => {\r\n\r\n    //Se a notificação foi homologada ou não possuia comando fiscal, não deve permitir edição\r\n    let notAllowedStatus = [NOTIFICATION_STATUS_ENUM.HOMOLOGADA, NOTIFICATION_STATUS_ENUM.SEM_COMANDO, NOTIFICATION_STATUS_ENUM.SEM_COMANDO_HOMOLOGADA]\r\n    if (notAllowedStatus.includes(warning.getStatus()) )\r\n      return true\r\n\r\n    if (isAdmin() || isSubgerente()) {\r\n      return false\r\n    }\r\n\r\n    return !hasUserLoggedData()\r\n\r\n  }\r\n\r\n  const isPauseButtonDisabled = (criador) => {\r\n    let user = getUserLogin()\r\n\r\n    if ((user && criador === user) || isAdmin() || isSubgerente()) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  const createFilters = () => {\r\n\r\n    let filtersClone = cloneFilters(notificationFilters)\r\n\r\n    let groups = mountGroupsFilterClause(notificationFilters)\r\n\r\n    //Se o usuário for do comando fiscal é muito provavel que ele não pertença a um dos grupos criadores do alerta.\r\n    //Por isso, é necessário instanciar o groups com um array vazio = []\r\n    if (hasUserLoggedData() && filtersClone && isComandoFiscal()) {\r\n      filtersClone.push(createSimpleFilterClause(FISCAL_ACTION_AUDITORS, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"))\r\n      groups = []\r\n    }\r\n\r\n    if (hasUserLoggedData() && isSubgerente()) {\r\n      let orClauses = []\r\n      orClauses.push(createSimpleFilterClause(HOMOLOGATION_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"))\r\n      orClauses.push(createSimpleFilterClause(AWARENESS_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"))\r\n      orClauses.push(createSimpleFilterClause(SUPERVISION_AUDITOR, VARCHAR, EQUAL, \"%\" + getUserLogin() + \"%\"))\r\n\r\n      filtersClone.push(createCompositeFilterClause(HOMOLOGATION_AUDITOR, OR_FILTER, orClauses))\r\n      groups = []\r\n    }\r\n\r\n    return {filters: filtersClone, groups: groups}\r\n\r\n  }\r\n\r\n\r\n  const createCountHttpRequestBody = () => {\r\n\r\n    let filters = createFilters()\r\n\r\n    let httpRequestBody = createBaseHttpRequestBody()\r\n\r\n    httpRequestBody[GROUP_IDS_SSE] = filters.groups\r\n    httpRequestBody[FILTERS] = filters.filters\r\n    httpRequestBody[FISCAL_NOTIFICATION_TYPE] = NOTIFICATION_TYPE_ENUM.NOTIFICATION // Por fins de otimização, esta tela precisa acessar uma view diferente.\r\n\r\n    if (isComandoFiscal()) {\r\n      httpRequestBody[ROLE] = ADMIN //TODO retirar esta gambiarra. E tratar isso no back.\r\n    }\r\n\r\n    return httpRequestBody\r\n  }\r\n\r\n  const createWarningsHttpRequestBody = () => {\r\n\r\n    let filters = createFilters()\r\n\r\n    let httpRequestBody = createQueryHttpRequestBody(filters.filters, [])\r\n\r\n    httpRequestBody[FISCAL_NOTIFICATION_TYPE] = NOTIFICATION_TYPE_ENUM.NOTIFICATION // Por fins de otimização, esta tela precisa acessar uma view diferente.\r\n    httpRequestBody[QUERY][GROUP_IDS_SSE] = filters.groups\r\n\r\n    if (isComandoFiscal()) {\r\n      httpRequestBody[ROLE] = ADMIN //TODO retirar esta gambiarra. E tratar isso no back.\r\n    }\r\n\r\n    return httpRequestBody\r\n  }\r\n\r\n  const openEditionModal = async (notificationObj, readonly = true) => {\r\n\r\n    cleanInputs()\r\n\r\n    let historyData = await readWarningHistory(notificationObj.getId())\r\n    let warningHistoryText = mountWarningHistoryText(notificationObj.getRawData(), historyData)\r\n\r\n    setNotificationHistory(historyData)\r\n    setNotification(notificationObj.getRawData())\r\n\r\n    setFormData(mountEditionData(notificationObj, warningHistoryText))\r\n\r\n    setModalReadonlyMode(readonly);\r\n\r\n    toggleEditionModalOn()\r\n  }\r\n\r\n  const openMapModal = (warning) => {\r\n    setModalData({ warning: warning });\r\n    toggleModalOn(MODAL_TYPE_ENUM.MAP)\r\n  }\r\n\r\n  const openHomologationModal = (mode, notificationObj, index, popHomologatedNotification) => {\r\n    let modalData = { homologationType: mode, notification_id: notificationObj.getId(), raw_data: notificationObj.getRawData(), index:index, popHomologatedNotification: popHomologatedNotification }\r\n    toggleModalOn(MODAL_TYPE_ENUM.HOMOLOGATION, modalData)\r\n  }\r\n\r\n  const openReactivationModal = (warningConfigObj) => {\r\n    let modalData = {mode : REACTIVATION_MODE, warningConfig: warningConfigObj }\r\n    toggleModalOn(MODAL_TYPE_ENUM.WARNING_PAUSE, modalData)\r\n  }\r\n\r\n  const openSuspensionModal = (warningConfigObj) => {\r\n    let modalData = {mode : SUSPENSION_MODE, warningConfig: warningConfigObj }\r\n    toggleModalOn(MODAL_TYPE_ENUM.WARNING_PAUSE, modalData)\r\n  }\r\n\r\n  const openPendingNotifications =  () => {\r\n    fetchPendingNotification()\r\n    toggleModalOn(MODAL_TYPE_ENUM.PENDING_HOMOLOGATION, {})\r\n  }\r\n\r\n  const openClosingModal = (warningConfigObj) => {\r\n    let modalData =  { id_config: warningConfigObj.getIdConfig(), config_name: warningConfigObj.getName(), groups: warningConfigObj.getGroupsIds()}\r\n    toggleModalOn(MODAL_TYPE_ENUM.CLOSING_WARNING, modalData)\r\n  }\r\n\r\n  const actionMethods = {\r\n    editionMethod : openEditionModal,\r\n    homologationMethod : openHomologationModal,\r\n    suspensionMethod : openSuspensionModal,\r\n    reactivationMethod : openReactivationModal,\r\n    warningClosingMethod : openClosingModal,\r\n  }\r\n\r\n  const disabledMethods = {\r\n    isEditionButtonDisabled : isEditionButtonDisabled,\r\n    isPauseButtonDisabled : isPauseButtonDisabled\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const createMapModal = useMemo(() => <SimpleMapModal show={isModalActive}  googleMapLoaded={googleMapLoaded} googleMapError={googleMapError} toggle={toggleModalOff} data={modalData} />, [modalData]);\r\n\r\n  if (loading && wasReloaded) {\r\n    return <LoadingPage />\r\n  } else {\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <Card className=\"card\">\r\n          <CardBody style={{ minHeight: '51em' }}>\r\n\r\n            <TagsInput\r\n              tagsState={[notificationTags, setNotificationTags]}\r\n              setQuery={setNotificationFilters}\r\n              columns={TAGS_INPUT_FILTERS}\r\n            >\r\n              {(isSubgerente() || isAdmin()) &&\r\n                <Button\r\n                  size=\"md\"\r\n                  className='btn btn-primary'\r\n                  onClick={() => openPendingNotifications()}\r\n                  style={{ height: \"2.5rem\", width: \"16rem\", marginBottom: \"4px\", padding: \"0px\", justifySelf: \"center\" }}\r\n                >\r\n                  Homologação/Ciência Pendente\r\n                </Button>\r\n              }\r\n            </TagsInput>\r\n            <Table\r\n              dataUrl=\"/warnings/read_all\"\r\n              countUrl=\"/warnings/count_warnings\"\r\n              timeout={10000}\r\n              requestBody={createWarningsHttpRequestBody}\r\n              countRequestBody={createCountHttpRequestBody}\r\n              tags={notificationFilters}\r\n              fillData\r\n              trProps={row => { return { onDoubleClick: () => { openEditionModal(new Notification(row), true); }, style: conditionalHomologationFormat(row, warningsViewed) } }}\r\n              refresh={refreshFlag}\r\n              loading={[isLoading, setIsLoading]}\r\n              columns={{\r\n                \"Nº Alerta\": {\r\n                  args: ID_CONFIG,\r\n                  thStyle: { textAlign: 'right' },\r\n                  tdStyle: { textAlign: 'right' }\r\n                },\r\n                \"Alerta\": {\r\n                  args: NAME,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center' }\r\n                },\r\n                \"Data/Hora\": {\r\n                  args: EVENT_CREATION_TIMESTAMP,\r\n                  tdStyle: { whiteSpace: 'pre', textAlign: 'center' },\r\n                  func: (date) => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\r\n                },\r\n                \"Local\": {\r\n                  args: EVENT_LOCAL,\r\n                  Func: (props) => (\r\n                    <p\r\n                      className='links-table'\r\n                      onClick={() => { openMapModal(props.row_data); }}\r\n                    >\r\n                      {props.data}\r\n                    </p>\r\n                  )\r\n                },\r\n                \"Veículo/Modelo/Cor\": {\r\n                  args: [EVENT_VEHICLE_TYPE, EVENT_VEHICLE_MODEL, EVENT_VEHICLE_COLOUR],\r\n                  tdStyle: { whiteSpace: 'pre' },\r\n                  func: ([vehicle, model, color]) => `${vehicle}\\n${model}\\n${color}`\r\n                },\r\n                \"Placa\": EVENT_VEHICLE_PLATE,\r\n                \"Ação Fiscal\": {\r\n                  args: FISCAL_ACTION,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { whiteSpace: 'pre', textAlign: 'justify' },\r\n                  func: (value) => trimText(value)\r\n                },\r\n                \"Ação Realizada\": {\r\n                  args: FISCAL_ACTION_REPORT,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { whiteSpace: 'pre', textAlign: 'justify' },\r\n                  func: (value) => trimText(value)\r\n                },\r\n                \"Data/Hora da Ação Fiscal\": {\r\n                  args: FISCAL_ACTION_DATE,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { whiteSpace: 'pre', textAlign: 'center' },\r\n                  func: (date) => new Date(date).toLocaleString(\"pt-BR\").replace(', ', '\\n')\r\n                },\r\n                \"Responsável pelo Monitoramento\": {\r\n                  args: DESIGNATION_AUDITOR,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  func: (value) => toUpperCase(value)\r\n                },\r\n                \"Responsável pela Ação Fiscal\": {\r\n                  args: FISCAL_ACTION_AUDITORS,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  func: (value) => toUpperCase(value).replace(\",\", \", \")\r\n                },\r\n                \"Responsável pela Supervisão\": {\r\n                  args: SUPERVISION_AUDITOR,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  func: (value) => toUpperCase(treatNullValue(value, \"NA\"))\r\n                },\r\n                \"Responsável pela Homologação\": {\r\n                  args: HOMOLOGATION_AUDITOR,\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  func: (value) => toUpperCase(value)\r\n                },\r\n                \"Supervisão\": {\r\n                  args: [SUPERVISION_AUDITOR, SUPERVISION_DATE],\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  defaultValue: \"\",\r\n                  Func: ({ row_data}) => {\r\n                    const notificationObj = new Notification(row_data)\r\n                    return notificationObj.getSupervisionStatusLabel()\r\n                  }\r\n                },\r\n                \"Ciência\": {\r\n                  args: [AWARENESS_AUDITOR, AWARENESS_DATE],\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  defaultValue: \"\",\r\n                  Func: ({ row_data}) => {\r\n                    const notificationObj = new Notification(row_data)\r\n                    return notificationObj.getAwarenessStatusLabel()\r\n                  }\r\n                  \r\n                },\r\n                \"Situação\": {\r\n                  args: [ID],\r\n                  thStyle: { textAlign: 'center' },\r\n                  tdStyle: { textAlign: 'center', whiteSpace: 'pre' },\r\n                  Func: ({ row_data}) => {\r\n                    const notificationObj = new Notification(row_data)\r\n                    return notificationObj.getNotificationStatusLabel(warningsViewed)\r\n                  }\r\n                },\r\n                \"Ações\": {\r\n                  args: ID,\r\n                  tdStyle: { textAlign: 'center' },\r\n                  thStyle: { textAlign: 'center' },\r\n                  Func: ({ row_data, index }) => <NotificationActionButtons \r\n                      data={{\r\n                        notificationObj : new Notification(row_data),\r\n                        notificationIndex : index,\r\n                        raw_data : row_data\r\n                      }}\r\n                      mode ={{\r\n                        editionMode : true,\r\n                        popHomologatedNotificationEnabled : false\r\n                      }}\r\n                      actionMethods={actionMethods} disabledMethods={disabledMethods}\r\n\r\n                  />\r\n\r\n                }\r\n              }}\r\n            />\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n\r\n      {isEditionModalActive && <NotificationModal show={isEditionModalActive} toggle={toggleEditionModalOff} data={formData}  refresh={refresh} initialReadOnlyState={modalReadonlyMode}  /> }\r\n      {modalType === MODAL_TYPE_ENUM.MAP && createMapModal}\r\n      {modalType === MODAL_TYPE_ENUM.PENDING_HOMOLOGATION && <NotificationPendingModal  fetchData={pendingNotificationFlag} show={isModalActive} toggle={toggleModalOff} actionMethods={actionMethods} disabledMethods={disabledMethods} refresh={refresh}/>}\r\n      {modalType === MODAL_TYPE_ENUM.WARNING_PAUSE && <SuspensionModal show={isModalActive} toggle={toggleModalOff} data={modalData} setData={setModalData} refresh={refresh} />}\r\n      {modalType === MODAL_TYPE_ENUM.CLOSING_WARNING && <ClosingModal show={isModalActive} toggle={toggleModalOff} data={modalData} refresh={refresh}/>}\r\n      {modalType === MODAL_TYPE_ENUM.HOMOLOGATION && <HomologationModal show={isModalActive} toggle={toggleModalOff} data={modalData} toggleEditionModalOff={toggleEditionModalOff} refresh={refresh} />}\r\n    </>\r\n  )}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}