{"ast":null,"code":"import { getUserLogin } from \"common/SessionUtils\";\nimport { DESIGNATION_REPORT } from \"common/model/Notification\";\nimport { MONITORING_USER_ID } from \"common/model/Notification\";\nimport { FISCAL_ACTION_AUDITORS } from \"common/model/Notification\";\nimport { USER_LOGIN } from \"common/model/User\";\nimport { checkSemComandoFiscal } from \"common/rules/NotificationRules\";\nimport { isEmpty } from \"common/utils/collections\";\nexport function conditionalFormatingMethod(user_name, defaultStyle) {\n  if (user_name === getUserLogin()) return defaultStyle;\n  return { ...defaultStyle,\n    color: 'red'\n  };\n}\nexport function getUserValues(values) {\n  let fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USER_LOGIN;\n  let aux = [];\n\n  for (var value of values) {\n    if (value && value[fieldName]) {\n      aux.push(value[fieldName]);\n    }\n  }\n\n  return aux.length > 0 ? aux.sort().join(\",\") : null;\n}\nexport function hasEmptyValues(obj) {\n  let fiscalKeys = Object.keys(obj[FISCAL_ACTION_AUDITORS]);\n  if (!fiscalKeys || fiscalKeys.length === 0 || isEmpty(obj[MONITORING_USER_ID])) return true;\n\n  if (checkSemComandoFiscal(obj[FISCAL_ACTION_AUDITORS]) && (isEmpty(obj[DESIGNATION_REPORT]) || isEmpty(obj[MONITORING_USER_ID]))) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/rodri/OneDrive/Documentos/cicc-app/front-end/src/components/modals/WarningModal/utils/format-data.js"],"names":["getUserLogin","DESIGNATION_REPORT","MONITORING_USER_ID","FISCAL_ACTION_AUDITORS","USER_LOGIN","checkSemComandoFiscal","isEmpty","conditionalFormatingMethod","user_name","defaultStyle","color","getUserValues","values","fieldName","aux","value","push","length","sort","join","hasEmptyValues","obj","fiscalKeys","Object","keys"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAGA,OAAO,SAASC,0BAAT,CAAoCC,SAApC,EAA+CC,YAA/C,EAA6D;AAChE,MAAID,SAAS,KAAKR,YAAY,EAA9B,EACC,OAAOS,YAAP;AAGD,SAAO,EAAC,GAAGA,YAAJ;AAAkBC,IAAAA,KAAK,EAAG;AAA1B,GAAP;AACD;AAGD,OAAO,SAASC,aAAT,CAAwBC,MAAxB,EAAwD;AAAA,MAAxBC,SAAwB,uEAAZT,UAAY;AAC7D,MAAIU,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,KAAT,IAAkBH,MAAlB,EAA0B;AACxB,QAAIG,KAAK,IAAIA,KAAK,CAACF,SAAD,CAAlB,EAA+B;AAC3BC,MAAAA,GAAG,CAACE,IAAJ,CAASD,KAAK,CAACF,SAAD,CAAd;AACH;AACF;;AACD,SAAOC,GAAG,CAACG,MAAJ,GAAa,CAAb,GAAiBH,GAAG,CAACI,IAAJ,GAAWC,IAAX,CAAgB,GAAhB,CAAjB,GAAwC,IAA/C;AACD;AAID,OAAO,SAASC,cAAT,CAAyBC,GAAzB,EAA8B;AACnC,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAAClB,sBAAD,CAAf,CAAjB;AACA,MAAI,CAACmB,UAAD,IAAeA,UAAU,CAACL,MAAX,KAAsB,CAArC,IAA0CX,OAAO,CAACe,GAAG,CAACnB,kBAAD,CAAJ,CAArD,EACE,OAAO,IAAP;;AAEF,MAAIG,qBAAqB,CAACgB,GAAG,CAAClB,sBAAD,CAAJ,CAArB,KAAuDG,OAAO,CAACe,GAAG,CAACpB,kBAAD,CAAJ,CAAP,IAAoCK,OAAO,CAACe,GAAG,CAACnB,kBAAD,CAAJ,CAAlG,CAAJ,EAAmI;AACjI,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { getUserLogin } from \"common/SessionUtils\"\r\nimport { DESIGNATION_REPORT } from \"common/model/Notification\"\r\nimport { MONITORING_USER_ID } from \"common/model/Notification\"\r\nimport { FISCAL_ACTION_AUDITORS } from \"common/model/Notification\"\r\nimport { USER_LOGIN } from \"common/model/User\"\r\nimport { checkSemComandoFiscal } from \"common/rules/NotificationRules\"\r\nimport { isEmpty } from \"common/utils/collections\"\r\n\r\n\r\nexport function conditionalFormatingMethod(user_name, defaultStyle) {\r\n    if (user_name === getUserLogin()) \r\n     return defaultStyle\r\n\r\n    \r\n    return {...defaultStyle, color : 'red'}\r\n  }\r\n\r\n\r\n  export function getUserValues (values, fieldName = USER_LOGIN) {\r\n    let aux = []\r\n    for (var value of values) {\r\n      if (value && value[fieldName]) {\r\n          aux.push(value[fieldName])        \r\n      }\r\n    }\r\n    return aux.length > 0 ? aux.sort().join(\",\") : null\r\n  }\r\n\r\n\r\n\r\n  export function hasEmptyValues (obj) {\r\n    let fiscalKeys = Object.keys(obj[FISCAL_ACTION_AUDITORS])\r\n    if (!fiscalKeys || fiscalKeys.length === 0 || isEmpty(obj[MONITORING_USER_ID]))\r\n      return true\r\n    \r\n    if (checkSemComandoFiscal(obj[FISCAL_ACTION_AUDITORS]) && (isEmpty(obj[DESIGNATION_REPORT]) || isEmpty(obj[MONITORING_USER_ID])) ) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }"]},"metadata":{},"sourceType":"module"}